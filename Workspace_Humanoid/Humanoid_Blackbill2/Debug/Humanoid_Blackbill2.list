
Humanoid_Blackbill2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067b0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08006948  08006948  00016948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006960  08006960  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  08006960  08006960  00016960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006968  08006968  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006968  08006968  00016968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800696c  0800696c  0001696c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08006970  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  20000028  08006998  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  08006998  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 13 .debug_info   000103dc  00000000  00000000  0002009b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000211f  00000000  00000000  00030477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc0  00000000  00000000  00032598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c8a  00000000  00000000  00033558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001caa  00000000  00000000  000341e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001272a  00000000  00000000  00035e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090504  00000000  00000000  000485b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000045f4  00000000  00000000  000d8abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000dd0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000028 	.word	0x20000028
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006930 	.word	0x08006930

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000002c 	.word	0x2000002c
 80001d4:	08006930 	.word	0x08006930

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2uiz>:
 8000a84:	004a      	lsls	r2, r1, #1
 8000a86:	d211      	bcs.n	8000aac <__aeabi_d2uiz+0x28>
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d211      	bcs.n	8000ab2 <__aeabi_d2uiz+0x2e>
 8000a8e:	d50d      	bpl.n	8000aac <__aeabi_d2uiz+0x28>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d40e      	bmi.n	8000ab8 <__aeabi_d2uiz+0x34>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_d2uiz+0x3a>
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b970 	b.w	8000e5c <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9e08      	ldr	r6, [sp, #32]
 8000b9a:	460d      	mov	r5, r1
 8000b9c:	4604      	mov	r4, r0
 8000b9e:	460f      	mov	r7, r1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d14a      	bne.n	8000c3a <__udivmoddi4+0xa6>
 8000ba4:	428a      	cmp	r2, r1
 8000ba6:	4694      	mov	ip, r2
 8000ba8:	d965      	bls.n	8000c76 <__udivmoddi4+0xe2>
 8000baa:	fab2 f382 	clz	r3, r2
 8000bae:	b143      	cbz	r3, 8000bc2 <__udivmoddi4+0x2e>
 8000bb0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bb4:	f1c3 0220 	rsb	r2, r3, #32
 8000bb8:	409f      	lsls	r7, r3
 8000bba:	fa20 f202 	lsr.w	r2, r0, r2
 8000bbe:	4317      	orrs	r7, r2
 8000bc0:	409c      	lsls	r4, r3
 8000bc2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bc6:	fa1f f58c 	uxth.w	r5, ip
 8000bca:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bce:	0c22      	lsrs	r2, r4, #16
 8000bd0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bd4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bd8:	fb01 f005 	mul.w	r0, r1, r5
 8000bdc:	4290      	cmp	r0, r2
 8000bde:	d90a      	bls.n	8000bf6 <__udivmoddi4+0x62>
 8000be0:	eb1c 0202 	adds.w	r2, ip, r2
 8000be4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000be8:	f080 811c 	bcs.w	8000e24 <__udivmoddi4+0x290>
 8000bec:	4290      	cmp	r0, r2
 8000bee:	f240 8119 	bls.w	8000e24 <__udivmoddi4+0x290>
 8000bf2:	3902      	subs	r1, #2
 8000bf4:	4462      	add	r2, ip
 8000bf6:	1a12      	subs	r2, r2, r0
 8000bf8:	b2a4      	uxth	r4, r4
 8000bfa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bfe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c02:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c06:	fb00 f505 	mul.w	r5, r0, r5
 8000c0a:	42a5      	cmp	r5, r4
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x90>
 8000c0e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c12:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c16:	f080 8107 	bcs.w	8000e28 <__udivmoddi4+0x294>
 8000c1a:	42a5      	cmp	r5, r4
 8000c1c:	f240 8104 	bls.w	8000e28 <__udivmoddi4+0x294>
 8000c20:	4464      	add	r4, ip
 8000c22:	3802      	subs	r0, #2
 8000c24:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c28:	1b64      	subs	r4, r4, r5
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	b11e      	cbz	r6, 8000c36 <__udivmoddi4+0xa2>
 8000c2e:	40dc      	lsrs	r4, r3
 8000c30:	2300      	movs	r3, #0
 8000c32:	e9c6 4300 	strd	r4, r3, [r6]
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d908      	bls.n	8000c50 <__udivmoddi4+0xbc>
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	f000 80ed 	beq.w	8000e1e <__udivmoddi4+0x28a>
 8000c44:	2100      	movs	r1, #0
 8000c46:	e9c6 0500 	strd	r0, r5, [r6]
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c50:	fab3 f183 	clz	r1, r3
 8000c54:	2900      	cmp	r1, #0
 8000c56:	d149      	bne.n	8000cec <__udivmoddi4+0x158>
 8000c58:	42ab      	cmp	r3, r5
 8000c5a:	d302      	bcc.n	8000c62 <__udivmoddi4+0xce>
 8000c5c:	4282      	cmp	r2, r0
 8000c5e:	f200 80f8 	bhi.w	8000e52 <__udivmoddi4+0x2be>
 8000c62:	1a84      	subs	r4, r0, r2
 8000c64:	eb65 0203 	sbc.w	r2, r5, r3
 8000c68:	2001      	movs	r0, #1
 8000c6a:	4617      	mov	r7, r2
 8000c6c:	2e00      	cmp	r6, #0
 8000c6e:	d0e2      	beq.n	8000c36 <__udivmoddi4+0xa2>
 8000c70:	e9c6 4700 	strd	r4, r7, [r6]
 8000c74:	e7df      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000c76:	b902      	cbnz	r2, 8000c7a <__udivmoddi4+0xe6>
 8000c78:	deff      	udf	#255	; 0xff
 8000c7a:	fab2 f382 	clz	r3, r2
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f040 8090 	bne.w	8000da4 <__udivmoddi4+0x210>
 8000c84:	1a8a      	subs	r2, r1, r2
 8000c86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c8a:	fa1f fe8c 	uxth.w	lr, ip
 8000c8e:	2101      	movs	r1, #1
 8000c90:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c94:	fb07 2015 	mls	r0, r7, r5, r2
 8000c98:	0c22      	lsrs	r2, r4, #16
 8000c9a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c9e:	fb0e f005 	mul.w	r0, lr, r5
 8000ca2:	4290      	cmp	r0, r2
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x124>
 8000ca6:	eb1c 0202 	adds.w	r2, ip, r2
 8000caa:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x122>
 8000cb0:	4290      	cmp	r0, r2
 8000cb2:	f200 80cb 	bhi.w	8000e4c <__udivmoddi4+0x2b8>
 8000cb6:	4645      	mov	r5, r8
 8000cb8:	1a12      	subs	r2, r2, r0
 8000cba:	b2a4      	uxth	r4, r4
 8000cbc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cc0:	fb07 2210 	mls	r2, r7, r0, r2
 8000cc4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000ccc:	45a6      	cmp	lr, r4
 8000cce:	d908      	bls.n	8000ce2 <__udivmoddi4+0x14e>
 8000cd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cd8:	d202      	bcs.n	8000ce0 <__udivmoddi4+0x14c>
 8000cda:	45a6      	cmp	lr, r4
 8000cdc:	f200 80bb 	bhi.w	8000e56 <__udivmoddi4+0x2c2>
 8000ce0:	4610      	mov	r0, r2
 8000ce2:	eba4 040e 	sub.w	r4, r4, lr
 8000ce6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cea:	e79f      	b.n	8000c2c <__udivmoddi4+0x98>
 8000cec:	f1c1 0720 	rsb	r7, r1, #32
 8000cf0:	408b      	lsls	r3, r1
 8000cf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cfa:	fa05 f401 	lsl.w	r4, r5, r1
 8000cfe:	fa20 f307 	lsr.w	r3, r0, r7
 8000d02:	40fd      	lsrs	r5, r7
 8000d04:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d08:	4323      	orrs	r3, r4
 8000d0a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	fb09 5518 	mls	r5, r9, r8, r5
 8000d16:	0c1c      	lsrs	r4, r3, #16
 8000d18:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d1c:	fb08 f50e 	mul.w	r5, r8, lr
 8000d20:	42a5      	cmp	r5, r4
 8000d22:	fa02 f201 	lsl.w	r2, r2, r1
 8000d26:	fa00 f001 	lsl.w	r0, r0, r1
 8000d2a:	d90b      	bls.n	8000d44 <__udivmoddi4+0x1b0>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d34:	f080 8088 	bcs.w	8000e48 <__udivmoddi4+0x2b4>
 8000d38:	42a5      	cmp	r5, r4
 8000d3a:	f240 8085 	bls.w	8000e48 <__udivmoddi4+0x2b4>
 8000d3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d42:	4464      	add	r4, ip
 8000d44:	1b64      	subs	r4, r4, r5
 8000d46:	b29d      	uxth	r5, r3
 8000d48:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d4c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d50:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d54:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x1da>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d64:	d26c      	bcs.n	8000e40 <__udivmoddi4+0x2ac>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	d96a      	bls.n	8000e40 <__udivmoddi4+0x2ac>
 8000d6a:	3b02      	subs	r3, #2
 8000d6c:	4464      	add	r4, ip
 8000d6e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d72:	fba3 9502 	umull	r9, r5, r3, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	42ac      	cmp	r4, r5
 8000d7c:	46c8      	mov	r8, r9
 8000d7e:	46ae      	mov	lr, r5
 8000d80:	d356      	bcc.n	8000e30 <__udivmoddi4+0x29c>
 8000d82:	d053      	beq.n	8000e2c <__udivmoddi4+0x298>
 8000d84:	b156      	cbz	r6, 8000d9c <__udivmoddi4+0x208>
 8000d86:	ebb0 0208 	subs.w	r2, r0, r8
 8000d8a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d8e:	fa04 f707 	lsl.w	r7, r4, r7
 8000d92:	40ca      	lsrs	r2, r1
 8000d94:	40cc      	lsrs	r4, r1
 8000d96:	4317      	orrs	r7, r2
 8000d98:	e9c6 7400 	strd	r7, r4, [r6]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	2100      	movs	r1, #0
 8000da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da4:	f1c3 0120 	rsb	r1, r3, #32
 8000da8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dac:	fa20 f201 	lsr.w	r2, r0, r1
 8000db0:	fa25 f101 	lsr.w	r1, r5, r1
 8000db4:	409d      	lsls	r5, r3
 8000db6:	432a      	orrs	r2, r5
 8000db8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbc:	fa1f fe8c 	uxth.w	lr, ip
 8000dc0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc4:	fb07 1510 	mls	r5, r7, r0, r1
 8000dc8:	0c11      	lsrs	r1, r2, #16
 8000dca:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dce:	fb00 f50e 	mul.w	r5, r0, lr
 8000dd2:	428d      	cmp	r5, r1
 8000dd4:	fa04 f403 	lsl.w	r4, r4, r3
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x258>
 8000dda:	eb1c 0101 	adds.w	r1, ip, r1
 8000dde:	f100 38ff 	add.w	r8, r0, #4294967295
 8000de2:	d22f      	bcs.n	8000e44 <__udivmoddi4+0x2b0>
 8000de4:	428d      	cmp	r5, r1
 8000de6:	d92d      	bls.n	8000e44 <__udivmoddi4+0x2b0>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4461      	add	r1, ip
 8000dec:	1b49      	subs	r1, r1, r5
 8000dee:	b292      	uxth	r2, r2
 8000df0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000df4:	fb07 1115 	mls	r1, r7, r5, r1
 8000df8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dfc:	fb05 f10e 	mul.w	r1, r5, lr
 8000e00:	4291      	cmp	r1, r2
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x282>
 8000e04:	eb1c 0202 	adds.w	r2, ip, r2
 8000e08:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e0c:	d216      	bcs.n	8000e3c <__udivmoddi4+0x2a8>
 8000e0e:	4291      	cmp	r1, r2
 8000e10:	d914      	bls.n	8000e3c <__udivmoddi4+0x2a8>
 8000e12:	3d02      	subs	r5, #2
 8000e14:	4462      	add	r2, ip
 8000e16:	1a52      	subs	r2, r2, r1
 8000e18:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e1c:	e738      	b.n	8000c90 <__udivmoddi4+0xfc>
 8000e1e:	4631      	mov	r1, r6
 8000e20:	4630      	mov	r0, r6
 8000e22:	e708      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000e24:	4639      	mov	r1, r7
 8000e26:	e6e6      	b.n	8000bf6 <__udivmoddi4+0x62>
 8000e28:	4610      	mov	r0, r2
 8000e2a:	e6fb      	b.n	8000c24 <__udivmoddi4+0x90>
 8000e2c:	4548      	cmp	r0, r9
 8000e2e:	d2a9      	bcs.n	8000d84 <__udivmoddi4+0x1f0>
 8000e30:	ebb9 0802 	subs.w	r8, r9, r2
 8000e34:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	e7a3      	b.n	8000d84 <__udivmoddi4+0x1f0>
 8000e3c:	4645      	mov	r5, r8
 8000e3e:	e7ea      	b.n	8000e16 <__udivmoddi4+0x282>
 8000e40:	462b      	mov	r3, r5
 8000e42:	e794      	b.n	8000d6e <__udivmoddi4+0x1da>
 8000e44:	4640      	mov	r0, r8
 8000e46:	e7d1      	b.n	8000dec <__udivmoddi4+0x258>
 8000e48:	46d0      	mov	r8, sl
 8000e4a:	e77b      	b.n	8000d44 <__udivmoddi4+0x1b0>
 8000e4c:	3d02      	subs	r5, #2
 8000e4e:	4462      	add	r2, ip
 8000e50:	e732      	b.n	8000cb8 <__udivmoddi4+0x124>
 8000e52:	4608      	mov	r0, r1
 8000e54:	e70a      	b.n	8000c6c <__udivmoddi4+0xd8>
 8000e56:	4464      	add	r4, ip
 8000e58:	3802      	subs	r0, #2
 8000e5a:	e742      	b.n	8000ce2 <__udivmoddi4+0x14e>

08000e5c <__aeabi_idiv0>:
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop

08000e60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e64:	f001 fae8 	bl	8002438 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e68:	f000 f870 	bl	8000f4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e6c:	f000 fbea 	bl	8001644 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e70:	f000 f8d6 	bl	8001020 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000e74:	f000 f902 	bl	800107c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000e78:	f000 f9f2 	bl	8001260 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000e7c:	f000 fa9c 	bl	80013b8 <MX_TIM5_Init>
  MX_TIM9_Init();
 8000e80:	f000 fb28 	bl	80014d4 <MX_TIM9_Init>
  MX_TIM10_Init();
 8000e84:	f000 fb6c 	bl	8001560 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000e88:	f000 fb8e 	bl	80015a8 <MX_TIM11_Init>
  MX_TIM4_Init();
 8000e8c:	f000 fa40 	bl	8001310 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000e90:	f000 f982 	bl	8001198 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000e94:	f000 fbac 	bl	80015f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  PCA9685_Init(&hi2c1);
 8000e98:	4827      	ldr	r0, [pc, #156]	; (8000f38 <main+0xd8>)
 8000e9a:	f000 ffa5 	bl	8001de8 <PCA9685_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  //TODO  CRC to check that data received right, parity check
  HAL_UART_Receive_IT(&huart1, rxDataGArrU8, 1);
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	4926      	ldr	r1, [pc, #152]	; (8000f3c <main+0xdc>)
 8000ea2:	4827      	ldr	r0, [pc, #156]	; (8000f40 <main+0xe0>)
 8000ea4:	f004 fd1b 	bl	80058de <HAL_UART_Receive_IT>

	  if(UART1_flag_gb == 1){
 8000ea8:	4b26      	ldr	r3, [pc, #152]	; (8000f44 <main+0xe4>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d1f5      	bne.n	8000e9e <main+0x3e>
		  	    UART1_flag_gb = 0;
 8000eb2:	4b24      	ldr	r3, [pc, #144]	; (8000f44 <main+0xe4>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	701a      	strb	r2, [r3, #0]
		  	    switch (rxDataGArrU8[0]){
 8000eb8:	4b20      	ldr	r3, [pc, #128]	; (8000f3c <main+0xdc>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b03      	cmp	r3, #3
 8000ebe:	d028      	beq.n	8000f12 <main+0xb2>
 8000ec0:	2b03      	cmp	r3, #3
 8000ec2:	dcec      	bgt.n	8000e9e <main+0x3e>
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d002      	beq.n	8000ece <main+0x6e>
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d011      	beq.n	8000ef0 <main+0x90>
 8000ecc:	e032      	b.n	8000f34 <main+0xd4>
		  	    case ORDER_TO_TAKE_OBJECT:
		  	    {
				HAL_UART_Transmit(&huart1, txBufferGArrU8, 27, 10); //send received to ROS
 8000ece:	230a      	movs	r3, #10
 8000ed0:	221b      	movs	r2, #27
 8000ed2:	491d      	ldr	r1, [pc, #116]	; (8000f48 <main+0xe8>)
 8000ed4:	481a      	ldr	r0, [pc, #104]	; (8000f40 <main+0xe0>)
 8000ed6:	f004 fc77 	bl	80057c8 <HAL_UART_Transmit>
		  	    TAKE_OBJECT();
 8000eda:	f000 fc49 	bl	8001770 <TAKE_OBJECT>
				HAL_Delay(1000);
 8000ede:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ee2:	f001 fb1b 	bl	800251c <HAL_Delay>
				while(rxDataGArrU8[0] == 1){}
 8000ee6:	bf00      	nop
 8000ee8:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <main+0xdc>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d0fb      	beq.n	8000ee8 <main+0x88>
		  	    }
		  	    case ORDER_TO_dELIVER_OBJECT:
		  	    {
		  	    RELEASE_OBJECT();
 8000ef0:	f000 fca0 	bl	8001834 <RELEASE_OBJECT>
				HAL_UART_Transmit(&huart1, txBufferGArrU8, 27, 10); //send received to ROS
 8000ef4:	230a      	movs	r3, #10
 8000ef6:	221b      	movs	r2, #27
 8000ef8:	4913      	ldr	r1, [pc, #76]	; (8000f48 <main+0xe8>)
 8000efa:	4811      	ldr	r0, [pc, #68]	; (8000f40 <main+0xe0>)
 8000efc:	f004 fc64 	bl	80057c8 <HAL_UART_Transmit>
				HAL_Delay(1000);
 8000f00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f04:	f001 fb0a 	bl	800251c <HAL_Delay>
				while(rxDataGArrU8[0] == 2){}
 8000f08:	bf00      	nop
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <main+0xdc>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d0fb      	beq.n	8000f0a <main+0xaa>
		  	    }
		  	    case  ORDER_TO_SHAKE_HAND:
		  	    {
		  	    SHAKE_HAND();
 8000f12:	f000 fccf 	bl	80018b4 <SHAKE_HAND>
				HAL_UART_Transmit(&huart1, txBufferGArrU8, 27, 10); //send received to ROS
 8000f16:	230a      	movs	r3, #10
 8000f18:	221b      	movs	r2, #27
 8000f1a:	490b      	ldr	r1, [pc, #44]	; (8000f48 <main+0xe8>)
 8000f1c:	4808      	ldr	r0, [pc, #32]	; (8000f40 <main+0xe0>)
 8000f1e:	f004 fc53 	bl	80057c8 <HAL_UART_Transmit>
				HAL_Delay(1000);
 8000f22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f26:	f001 faf9 	bl	800251c <HAL_Delay>
				while(rxDataGArrU8[0] == 3){}
 8000f2a:	bf00      	nop
 8000f2c:	4b03      	ldr	r3, [pc, #12]	; (8000f3c <main+0xdc>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b03      	cmp	r3, #3
 8000f32:	d0fb      	beq.n	8000f2c <main+0xcc>
  HAL_UART_Receive_IT(&huart1, rxDataGArrU8, 1);
 8000f34:	e7b3      	b.n	8000e9e <main+0x3e>
 8000f36:	bf00      	nop
 8000f38:	20000044 	.word	0x20000044
 8000f3c:	20000320 	.word	0x20000320
 8000f40:	200002d8 	.word	0x200002d8
 8000f44:	20000325 	.word	0x20000325
 8000f48:	20000000 	.word	0x20000000

08000f4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b094      	sub	sp, #80	; 0x50
 8000f50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f52:	f107 0320 	add.w	r3, r7, #32
 8000f56:	2230      	movs	r2, #48	; 0x30
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f005 fc3a 	bl	80067d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f70:	2300      	movs	r3, #0
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	4b28      	ldr	r3, [pc, #160]	; (8001018 <SystemClock_Config+0xcc>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	4a27      	ldr	r2, [pc, #156]	; (8001018 <SystemClock_Config+0xcc>)
 8000f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f80:	4b25      	ldr	r3, [pc, #148]	; (8001018 <SystemClock_Config+0xcc>)
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	4b22      	ldr	r3, [pc, #136]	; (800101c <SystemClock_Config+0xd0>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f98:	4a20      	ldr	r2, [pc, #128]	; (800101c <SystemClock_Config+0xd0>)
 8000f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f9e:	6013      	str	r3, [r2, #0]
 8000fa0:	4b1e      	ldr	r3, [pc, #120]	; (800101c <SystemClock_Config+0xd0>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fac:	2302      	movs	r3, #2
 8000fae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fb4:	2310      	movs	r3, #16
 8000fb6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fc0:	2308      	movs	r3, #8
 8000fc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000fc4:	2348      	movs	r3, #72	; 0x48
 8000fc6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fcc:	2304      	movs	r3, #4
 8000fce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd0:	f107 0320 	add.w	r3, r7, #32
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f002 ffab 	bl	8003f30 <HAL_RCC_OscConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fe0:	f000 fce6 	bl	80019b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ff0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ffa:	f107 030c 	add.w	r3, r7, #12
 8000ffe:	2102      	movs	r1, #2
 8001000:	4618      	mov	r0, r3
 8001002:	f003 fa0d 	bl	8004420 <HAL_RCC_ClockConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800100c:	f000 fcd0 	bl	80019b0 <Error_Handler>
  }
}
 8001010:	bf00      	nop
 8001012:	3750      	adds	r7, #80	; 0x50
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40023800 	.word	0x40023800
 800101c:	40007000 	.word	0x40007000

08001020 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <MX_I2C1_Init+0x50>)
 8001026:	4a13      	ldr	r2, [pc, #76]	; (8001074 <MX_I2C1_Init+0x54>)
 8001028:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <MX_I2C1_Init+0x50>)
 800102c:	4a12      	ldr	r2, [pc, #72]	; (8001078 <MX_I2C1_Init+0x58>)
 800102e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001030:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <MX_I2C1_Init+0x50>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <MX_I2C1_Init+0x50>)
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <MX_I2C1_Init+0x50>)
 800103e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001042:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001044:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <MX_I2C1_Init+0x50>)
 8001046:	2200      	movs	r2, #0
 8001048:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <MX_I2C1_Init+0x50>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001050:	4b07      	ldr	r3, [pc, #28]	; (8001070 <MX_I2C1_Init+0x50>)
 8001052:	2200      	movs	r2, #0
 8001054:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <MX_I2C1_Init+0x50>)
 8001058:	2200      	movs	r2, #0
 800105a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800105c:	4804      	ldr	r0, [pc, #16]	; (8001070 <MX_I2C1_Init+0x50>)
 800105e:	f001 fdc3 	bl	8002be8 <HAL_I2C_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001068:	f000 fca2 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000044 	.word	0x20000044
 8001074:	40005400 	.word	0x40005400
 8001078:	000186a0 	.word	0x000186a0

0800107c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b092      	sub	sp, #72	; 0x48
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001082:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800108c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
 800109c:	615a      	str	r2, [r3, #20]
 800109e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	2220      	movs	r2, #32
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f005 fb94 	bl	80067d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010ac:	4b38      	ldr	r3, [pc, #224]	; (8001190 <MX_TIM1_Init+0x114>)
 80010ae:	4a39      	ldr	r2, [pc, #228]	; (8001194 <MX_TIM1_Init+0x118>)
 80010b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80010b2:	4b37      	ldr	r3, [pc, #220]	; (8001190 <MX_TIM1_Init+0x114>)
 80010b4:	2247      	movs	r2, #71	; 0x47
 80010b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b8:	4b35      	ldr	r3, [pc, #212]	; (8001190 <MX_TIM1_Init+0x114>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80010be:	4b34      	ldr	r3, [pc, #208]	; (8001190 <MX_TIM1_Init+0x114>)
 80010c0:	2263      	movs	r2, #99	; 0x63
 80010c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c4:	4b32      	ldr	r3, [pc, #200]	; (8001190 <MX_TIM1_Init+0x114>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010ca:	4b31      	ldr	r3, [pc, #196]	; (8001190 <MX_TIM1_Init+0x114>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d0:	4b2f      	ldr	r3, [pc, #188]	; (8001190 <MX_TIM1_Init+0x114>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010d6:	482e      	ldr	r0, [pc, #184]	; (8001190 <MX_TIM1_Init+0x114>)
 80010d8:	f003 fbd1 	bl	800487e <HAL_TIM_PWM_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80010e2:	f000 fc65 	bl	80019b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e6:	2300      	movs	r3, #0
 80010e8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ea:	2300      	movs	r3, #0
 80010ec:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010f2:	4619      	mov	r1, r3
 80010f4:	4826      	ldr	r0, [pc, #152]	; (8001190 <MX_TIM1_Init+0x114>)
 80010f6:	f004 fa57 	bl	80055a8 <HAL_TIMEx_MasterConfigSynchronization>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001100:	f000 fc56 	bl	80019b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001104:	2360      	movs	r3, #96	; 0x60
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800110c:	2300      	movs	r3, #0
 800110e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001110:	2300      	movs	r3, #0
 8001112:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001114:	2300      	movs	r3, #0
 8001116:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001118:	2300      	movs	r3, #0
 800111a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800111c:	2300      	movs	r3, #0
 800111e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001120:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001124:	2200      	movs	r2, #0
 8001126:	4619      	mov	r1, r3
 8001128:	4819      	ldr	r0, [pc, #100]	; (8001190 <MX_TIM1_Init+0x114>)
 800112a:	f003 fddb 	bl	8004ce4 <HAL_TIM_PWM_ConfigChannel>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001134:	f000 fc3c 	bl	80019b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113c:	220c      	movs	r2, #12
 800113e:	4619      	mov	r1, r3
 8001140:	4813      	ldr	r0, [pc, #76]	; (8001190 <MX_TIM1_Init+0x114>)
 8001142:	f003 fdcf 	bl	8004ce4 <HAL_TIM_PWM_ConfigChannel>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 800114c:	f000 fc30 	bl	80019b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001150:	2300      	movs	r3, #0
 8001152:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001154:	2300      	movs	r3, #0
 8001156:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001158:	2300      	movs	r3, #0
 800115a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001164:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001168:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800116a:	2300      	movs	r3, #0
 800116c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	4619      	mov	r1, r3
 8001172:	4807      	ldr	r0, [pc, #28]	; (8001190 <MX_TIM1_Init+0x114>)
 8001174:	f004 fa86 	bl	8005684 <HAL_TIMEx_ConfigBreakDeadTime>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800117e:	f000 fc17 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001182:	4803      	ldr	r0, [pc, #12]	; (8001190 <MX_TIM1_Init+0x114>)
 8001184:	f000 ffce 	bl	8002124 <HAL_TIM_MspPostInit>

}
 8001188:	bf00      	nop
 800118a:	3748      	adds	r7, #72	; 0x48
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000098 	.word	0x20000098
 8001194:	40010000 	.word	0x40010000

08001198 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	; 0x28
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800119e:	f107 0320 	add.w	r3, r7, #32
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]
 80011b6:	615a      	str	r2, [r3, #20]
 80011b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011ba:	4b28      	ldr	r3, [pc, #160]	; (800125c <MX_TIM2_Init+0xc4>)
 80011bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011c2:	4b26      	ldr	r3, [pc, #152]	; (800125c <MX_TIM2_Init+0xc4>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c8:	4b24      	ldr	r3, [pc, #144]	; (800125c <MX_TIM2_Init+0xc4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80011ce:	4b23      	ldr	r3, [pc, #140]	; (800125c <MX_TIM2_Init+0xc4>)
 80011d0:	f04f 32ff 	mov.w	r2, #4294967295
 80011d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d6:	4b21      	ldr	r3, [pc, #132]	; (800125c <MX_TIM2_Init+0xc4>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011dc:	4b1f      	ldr	r3, [pc, #124]	; (800125c <MX_TIM2_Init+0xc4>)
 80011de:	2200      	movs	r2, #0
 80011e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011e2:	481e      	ldr	r0, [pc, #120]	; (800125c <MX_TIM2_Init+0xc4>)
 80011e4:	f003 fb4b 	bl	800487e <HAL_TIM_PWM_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80011ee:	f000 fbdf 	bl	80019b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f2:	2300      	movs	r3, #0
 80011f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f6:	2300      	movs	r3, #0
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011fa:	f107 0320 	add.w	r3, r7, #32
 80011fe:	4619      	mov	r1, r3
 8001200:	4816      	ldr	r0, [pc, #88]	; (800125c <MX_TIM2_Init+0xc4>)
 8001202:	f004 f9d1 	bl	80055a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800120c:	f000 fbd0 	bl	80019b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001210:	2360      	movs	r3, #96	; 0x60
 8001212:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	2200      	movs	r2, #0
 8001224:	4619      	mov	r1, r3
 8001226:	480d      	ldr	r0, [pc, #52]	; (800125c <MX_TIM2_Init+0xc4>)
 8001228:	f003 fd5c 	bl	8004ce4 <HAL_TIM_PWM_ConfigChannel>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001232:	f000 fbbd 	bl	80019b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	2204      	movs	r2, #4
 800123a:	4619      	mov	r1, r3
 800123c:	4807      	ldr	r0, [pc, #28]	; (800125c <MX_TIM2_Init+0xc4>)
 800123e:	f003 fd51 	bl	8004ce4 <HAL_TIM_PWM_ConfigChannel>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001248:	f000 fbb2 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800124c:	4803      	ldr	r0, [pc, #12]	; (800125c <MX_TIM2_Init+0xc4>)
 800124e:	f000 ff69 	bl	8002124 <HAL_TIM_MspPostInit>

}
 8001252:	bf00      	nop
 8001254:	3728      	adds	r7, #40	; 0x28
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200000e0 	.word	0x200000e0

08001260 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08c      	sub	sp, #48	; 0x30
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001266:	f107 030c 	add.w	r3, r7, #12
 800126a:	2224      	movs	r2, #36	; 0x24
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f005 fab0 	bl	80067d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800127c:	4b22      	ldr	r3, [pc, #136]	; (8001308 <MX_TIM3_Init+0xa8>)
 800127e:	4a23      	ldr	r2, [pc, #140]	; (800130c <MX_TIM3_Init+0xac>)
 8001280:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8001282:	4b21      	ldr	r3, [pc, #132]	; (8001308 <MX_TIM3_Init+0xa8>)
 8001284:	2263      	movs	r2, #99	; 0x63
 8001286:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001288:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <MX_TIM3_Init+0xa8>)
 800128a:	2210      	movs	r2, #16
 800128c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800128e:	4b1e      	ldr	r3, [pc, #120]	; (8001308 <MX_TIM3_Init+0xa8>)
 8001290:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001294:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001296:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <MX_TIM3_Init+0xa8>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129c:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <MX_TIM3_Init+0xa8>)
 800129e:	2200      	movs	r2, #0
 80012a0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012a2:	2303      	movs	r3, #3
 80012a4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80012a6:	2302      	movs	r3, #2
 80012a8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012aa:	2301      	movs	r3, #1
 80012ac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80012b2:	230a      	movs	r3, #10
 80012b4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80012b6:	2302      	movs	r3, #2
 80012b8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012ba:	2301      	movs	r3, #1
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012be:	2300      	movs	r3, #0
 80012c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80012c2:	230a      	movs	r3, #10
 80012c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80012c6:	f107 030c 	add.w	r3, r7, #12
 80012ca:	4619      	mov	r1, r3
 80012cc:	480e      	ldr	r0, [pc, #56]	; (8001308 <MX_TIM3_Init+0xa8>)
 80012ce:	f003 fbd5 	bl	8004a7c <HAL_TIM_Encoder_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80012d8:	f000 fb6a 	bl	80019b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012dc:	2300      	movs	r3, #0
 80012de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	4619      	mov	r1, r3
 80012e8:	4807      	ldr	r0, [pc, #28]	; (8001308 <MX_TIM3_Init+0xa8>)
 80012ea:	f004 f95d 	bl	80055a8 <HAL_TIMEx_MasterConfigSynchronization>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80012f4:	f000 fb5c 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 80012f8:	213c      	movs	r1, #60	; 0x3c
 80012fa:	4803      	ldr	r0, [pc, #12]	; (8001308 <MX_TIM3_Init+0xa8>)
 80012fc:	f003 fc64 	bl	8004bc8 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM3_Init 2 */

}
 8001300:	bf00      	nop
 8001302:	3730      	adds	r7, #48	; 0x30
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000128 	.word	0x20000128
 800130c:	40000400 	.word	0x40000400

08001310 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08c      	sub	sp, #48	; 0x30
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	2224      	movs	r2, #36	; 0x24
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f005 fa58 	bl	80067d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800132c:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <MX_TIM4_Init+0xa0>)
 800132e:	4a21      	ldr	r2, [pc, #132]	; (80013b4 <MX_TIM4_Init+0xa4>)
 8001330:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001332:	4b1f      	ldr	r3, [pc, #124]	; (80013b0 <MX_TIM4_Init+0xa0>)
 8001334:	2200      	movs	r2, #0
 8001336:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001338:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <MX_TIM4_Init+0xa0>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800133e:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <MX_TIM4_Init+0xa0>)
 8001340:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001344:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001346:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <MX_TIM4_Init+0xa0>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800134c:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <MX_TIM4_Init+0xa0>)
 800134e:	2200      	movs	r2, #0
 8001350:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001352:	2303      	movs	r3, #3
 8001354:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001356:	2302      	movs	r3, #2
 8001358:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800135a:	2301      	movs	r3, #1
 800135c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800135e:	2300      	movs	r3, #0
 8001360:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001362:	230a      	movs	r3, #10
 8001364:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001366:	2302      	movs	r3, #2
 8001368:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800136a:	2301      	movs	r3, #1
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800136e:	2300      	movs	r3, #0
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001372:	230a      	movs	r3, #10
 8001374:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001376:	f107 030c 	add.w	r3, r7, #12
 800137a:	4619      	mov	r1, r3
 800137c:	480c      	ldr	r0, [pc, #48]	; (80013b0 <MX_TIM4_Init+0xa0>)
 800137e:	f003 fb7d 	bl	8004a7c <HAL_TIM_Encoder_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001388:	f000 fb12 	bl	80019b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138c:	2300      	movs	r3, #0
 800138e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001390:	2300      	movs	r3, #0
 8001392:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	4619      	mov	r1, r3
 8001398:	4805      	ldr	r0, [pc, #20]	; (80013b0 <MX_TIM4_Init+0xa0>)
 800139a:	f004 f905 	bl	80055a8 <HAL_TIMEx_MasterConfigSynchronization>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80013a4:	f000 fb04 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
//  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
  /* USER CODE END TIM4_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	3730      	adds	r7, #48	; 0x30
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000170 	.word	0x20000170
 80013b4:	40000800 	.word	0x40000800

080013b8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08e      	sub	sp, #56	; 0x38
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013cc:	f107 0320 	add.w	r3, r7, #32
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
 80013e4:	615a      	str	r2, [r3, #20]
 80013e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80013e8:	4b38      	ldr	r3, [pc, #224]	; (80014cc <MX_TIM5_Init+0x114>)
 80013ea:	4a39      	ldr	r2, [pc, #228]	; (80014d0 <MX_TIM5_Init+0x118>)
 80013ec:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1440-1;
 80013ee:	4b37      	ldr	r3, [pc, #220]	; (80014cc <MX_TIM5_Init+0x114>)
 80013f0:	f240 529f 	movw	r2, #1439	; 0x59f
 80013f4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f6:	4b35      	ldr	r3, [pc, #212]	; (80014cc <MX_TIM5_Init+0x114>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 80013fc:	4b33      	ldr	r3, [pc, #204]	; (80014cc <MX_TIM5_Init+0x114>)
 80013fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001402:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001404:	4b31      	ldr	r3, [pc, #196]	; (80014cc <MX_TIM5_Init+0x114>)
 8001406:	2200      	movs	r2, #0
 8001408:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140a:	4b30      	ldr	r3, [pc, #192]	; (80014cc <MX_TIM5_Init+0x114>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001410:	482e      	ldr	r0, [pc, #184]	; (80014cc <MX_TIM5_Init+0x114>)
 8001412:	f003 f9e5 	bl	80047e0 <HAL_TIM_Base_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 800141c:	f000 fac8 	bl	80019b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001424:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001426:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800142a:	4619      	mov	r1, r3
 800142c:	4827      	ldr	r0, [pc, #156]	; (80014cc <MX_TIM5_Init+0x114>)
 800142e:	f003 fd1b 	bl	8004e68 <HAL_TIM_ConfigClockSource>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001438:	f000 faba 	bl	80019b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800143c:	4823      	ldr	r0, [pc, #140]	; (80014cc <MX_TIM5_Init+0x114>)
 800143e:	f003 fa1e 	bl	800487e <HAL_TIM_PWM_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001448:	f000 fab2 	bl	80019b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144c:	2300      	movs	r3, #0
 800144e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001450:	2300      	movs	r3, #0
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001454:	f107 0320 	add.w	r3, r7, #32
 8001458:	4619      	mov	r1, r3
 800145a:	481c      	ldr	r0, [pc, #112]	; (80014cc <MX_TIM5_Init+0x114>)
 800145c:	f004 f8a4 	bl	80055a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001466:	f000 faa3 	bl	80019b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800146a:	2360      	movs	r3, #96	; 0x60
 800146c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	2200      	movs	r2, #0
 800147e:	4619      	mov	r1, r3
 8001480:	4812      	ldr	r0, [pc, #72]	; (80014cc <MX_TIM5_Init+0x114>)
 8001482:	f003 fc2f 	bl	8004ce4 <HAL_TIM_PWM_ConfigChannel>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 800148c:	f000 fa90 	bl	80019b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	2204      	movs	r2, #4
 8001494:	4619      	mov	r1, r3
 8001496:	480d      	ldr	r0, [pc, #52]	; (80014cc <MX_TIM5_Init+0x114>)
 8001498:	f003 fc24 	bl	8004ce4 <HAL_TIM_PWM_ConfigChannel>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 80014a2:	f000 fa85 	bl	80019b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	2208      	movs	r2, #8
 80014aa:	4619      	mov	r1, r3
 80014ac:	4807      	ldr	r0, [pc, #28]	; (80014cc <MX_TIM5_Init+0x114>)
 80014ae:	f003 fc19 	bl	8004ce4 <HAL_TIM_PWM_ConfigChannel>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM5_Init+0x104>
  {
    Error_Handler();
 80014b8:	f000 fa7a 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80014bc:	4803      	ldr	r0, [pc, #12]	; (80014cc <MX_TIM5_Init+0x114>)
 80014be:	f000 fe31 	bl	8002124 <HAL_TIM_MspPostInit>

}
 80014c2:	bf00      	nop
 80014c4:	3738      	adds	r7, #56	; 0x38
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200001b8 	.word	0x200001b8
 80014d0:	40000c00 	.word	0x40000c00

080014d4 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
 80014e8:	615a      	str	r2, [r3, #20]
 80014ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80014ec:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <MX_TIM9_Init+0x84>)
 80014ee:	4a1b      	ldr	r2, [pc, #108]	; (800155c <MX_TIM9_Init+0x88>)
 80014f0:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1440-1;
 80014f2:	4b19      	ldr	r3, [pc, #100]	; (8001558 <MX_TIM9_Init+0x84>)
 80014f4:	f240 529f 	movw	r2, #1439	; 0x59f
 80014f8:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fa:	4b17      	ldr	r3, [pc, #92]	; (8001558 <MX_TIM9_Init+0x84>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 8001500:	4b15      	ldr	r3, [pc, #84]	; (8001558 <MX_TIM9_Init+0x84>)
 8001502:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001506:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001508:	4b13      	ldr	r3, [pc, #76]	; (8001558 <MX_TIM9_Init+0x84>)
 800150a:	2200      	movs	r2, #0
 800150c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150e:	4b12      	ldr	r3, [pc, #72]	; (8001558 <MX_TIM9_Init+0x84>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001514:	4810      	ldr	r0, [pc, #64]	; (8001558 <MX_TIM9_Init+0x84>)
 8001516:	f003 f9b2 	bl	800487e <HAL_TIM_PWM_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM9_Init+0x50>
  {
    Error_Handler();
 8001520:	f000 fa46 	bl	80019b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001524:	2360      	movs	r3, #96	; 0x60
 8001526:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001534:	1d3b      	adds	r3, r7, #4
 8001536:	2204      	movs	r2, #4
 8001538:	4619      	mov	r1, r3
 800153a:	4807      	ldr	r0, [pc, #28]	; (8001558 <MX_TIM9_Init+0x84>)
 800153c:	f003 fbd2 	bl	8004ce4 <HAL_TIM_PWM_ConfigChannel>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 8001546:	f000 fa33 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800154a:	4803      	ldr	r0, [pc, #12]	; (8001558 <MX_TIM9_Init+0x84>)
 800154c:	f000 fdea 	bl	8002124 <HAL_TIM_MspPostInit>

}
 8001550:	bf00      	nop
 8001552:	3720      	adds	r7, #32
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000200 	.word	0x20000200
 800155c:	40014000 	.word	0x40014000

08001560 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001564:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <MX_TIM10_Init+0x40>)
 8001566:	4a0f      	ldr	r2, [pc, #60]	; (80015a4 <MX_TIM10_Init+0x44>)
 8001568:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800156a:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <MX_TIM10_Init+0x40>)
 800156c:	2200      	movs	r2, #0
 800156e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001570:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <MX_TIM10_Init+0x40>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001576:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <MX_TIM10_Init+0x40>)
 8001578:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800157c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157e:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <MX_TIM10_Init+0x40>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <MX_TIM10_Init+0x40>)
 8001586:	2200      	movs	r2, #0
 8001588:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800158a:	4805      	ldr	r0, [pc, #20]	; (80015a0 <MX_TIM10_Init+0x40>)
 800158c:	f003 f928 	bl	80047e0 <HAL_TIM_Base_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001596:	f000 fa0b 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000248 	.word	0x20000248
 80015a4:	40014400 	.word	0x40014400

080015a8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80015ac:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <MX_TIM11_Init+0x40>)
 80015ae:	4a0f      	ldr	r2, [pc, #60]	; (80015ec <MX_TIM11_Init+0x44>)
 80015b0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80015b2:	4b0d      	ldr	r3, [pc, #52]	; (80015e8 <MX_TIM11_Init+0x40>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b8:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <MX_TIM11_Init+0x40>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80015be:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <MX_TIM11_Init+0x40>)
 80015c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015c4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c6:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <MX_TIM11_Init+0x40>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <MX_TIM11_Init+0x40>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80015d2:	4805      	ldr	r0, [pc, #20]	; (80015e8 <MX_TIM11_Init+0x40>)
 80015d4:	f003 f904 	bl	80047e0 <HAL_TIM_Base_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80015de:	f000 f9e7 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000290 	.word	0x20000290
 80015ec:	40014800 	.word	0x40014800

080015f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <MX_USART1_UART_Init+0x4c>)
 80015f6:	4a12      	ldr	r2, [pc, #72]	; (8001640 <MX_USART1_UART_Init+0x50>)
 80015f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015fa:	4b10      	ldr	r3, [pc, #64]	; (800163c <MX_USART1_UART_Init+0x4c>)
 80015fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001600:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <MX_USART1_UART_Init+0x4c>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <MX_USART1_UART_Init+0x4c>)
 800160a:	2200      	movs	r2, #0
 800160c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800160e:	4b0b      	ldr	r3, [pc, #44]	; (800163c <MX_USART1_UART_Init+0x4c>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001614:	4b09      	ldr	r3, [pc, #36]	; (800163c <MX_USART1_UART_Init+0x4c>)
 8001616:	220c      	movs	r2, #12
 8001618:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800161a:	4b08      	ldr	r3, [pc, #32]	; (800163c <MX_USART1_UART_Init+0x4c>)
 800161c:	2200      	movs	r2, #0
 800161e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <MX_USART1_UART_Init+0x4c>)
 8001622:	2200      	movs	r2, #0
 8001624:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001626:	4805      	ldr	r0, [pc, #20]	; (800163c <MX_USART1_UART_Init+0x4c>)
 8001628:	f004 f87e 	bl	8005728 <HAL_UART_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001632:	f000 f9bd 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	200002d8 	.word	0x200002d8
 8001640:	40011000 	.word	0x40011000

08001644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08a      	sub	sp, #40	; 0x28
 8001648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]
 8001658:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	4b32      	ldr	r3, [pc, #200]	; (8001728 <MX_GPIO_Init+0xe4>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a31      	ldr	r2, [pc, #196]	; (8001728 <MX_GPIO_Init+0xe4>)
 8001664:	f043 0304 	orr.w	r3, r3, #4
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b2f      	ldr	r3, [pc, #188]	; (8001728 <MX_GPIO_Init+0xe4>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0304 	and.w	r3, r3, #4
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	4b2b      	ldr	r3, [pc, #172]	; (8001728 <MX_GPIO_Init+0xe4>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a2a      	ldr	r2, [pc, #168]	; (8001728 <MX_GPIO_Init+0xe4>)
 8001680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b28      	ldr	r3, [pc, #160]	; (8001728 <MX_GPIO_Init+0xe4>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	4b24      	ldr	r3, [pc, #144]	; (8001728 <MX_GPIO_Init+0xe4>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a23      	ldr	r2, [pc, #140]	; (8001728 <MX_GPIO_Init+0xe4>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4b21      	ldr	r3, [pc, #132]	; (8001728 <MX_GPIO_Init+0xe4>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	4b1d      	ldr	r3, [pc, #116]	; (8001728 <MX_GPIO_Init+0xe4>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a1c      	ldr	r2, [pc, #112]	; (8001728 <MX_GPIO_Init+0xe4>)
 80016b8:	f043 0302 	orr.w	r3, r3, #2
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <MX_GPIO_Init+0xe4>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MotorR_ER_Pin|MotorR_EL_Pin|GPIO_OUTPUT_for_UART_Pin, GPIO_PIN_RESET);
 80016ca:	2200      	movs	r2, #0
 80016cc:	f44f 41c2 	mov.w	r1, #24832	; 0x6100
 80016d0:	4816      	ldr	r0, [pc, #88]	; (800172c <MX_GPIO_Init+0xe8>)
 80016d2:	f001 fa6f 	bl	8002bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|MotorL_isL_Pin|MotorL_isR_Pin|MotorL_EL_Pin
 80016d6:	2200      	movs	r2, #0
 80016d8:	f24f 0132 	movw	r1, #61490	; 0xf032
 80016dc:	4814      	ldr	r0, [pc, #80]	; (8001730 <MX_GPIO_Init+0xec>)
 80016de:	f001 fa69 	bl	8002bb4 <HAL_GPIO_WritePin>
                          |MotorL_ER_Pin|MotorR_isL_Pin|MotorR_isR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : MotorR_ER_Pin MotorR_EL_Pin GPIO_OUTPUT_for_UART_Pin */
  GPIO_InitStruct.Pin = MotorR_ER_Pin|MotorR_EL_Pin|GPIO_OUTPUT_for_UART_Pin;
 80016e2:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 80016e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e8:	2301      	movs	r3, #1
 80016ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f0:	2300      	movs	r3, #0
 80016f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	4619      	mov	r1, r3
 80016fa:	480c      	ldr	r0, [pc, #48]	; (800172c <MX_GPIO_Init+0xe8>)
 80016fc:	f001 f8d6 	bl	80028ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 MotorL_isL_Pin MotorL_isR_Pin MotorL_EL_Pin
                           MotorL_ER_Pin MotorR_isL_Pin MotorR_isR_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|MotorL_isL_Pin|MotorL_isR_Pin|MotorL_EL_Pin
 8001700:	f24f 0332 	movw	r3, #61490	; 0xf032
 8001704:	617b      	str	r3, [r7, #20]
                          |MotorL_ER_Pin|MotorR_isL_Pin|MotorR_isR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001706:	2301      	movs	r3, #1
 8001708:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170e:	2300      	movs	r3, #0
 8001710:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	4619      	mov	r1, r3
 8001718:	4805      	ldr	r0, [pc, #20]	; (8001730 <MX_GPIO_Init+0xec>)
 800171a:	f001 f8c7 	bl	80028ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800171e:	bf00      	nop
 8001720:	3728      	adds	r7, #40	; 0x28
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800
 800172c:	40020800 	.word	0x40020800
 8001730:	40020400 	.word	0x40020400

08001734 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
  */
	if(huart->Instance == USART1){
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a08      	ldr	r2, [pc, #32]	; (8001764 <HAL_UART_RxCpltCallback+0x30>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d108      	bne.n	8001758 <HAL_UART_RxCpltCallback+0x24>
		rxBufferGArrU8[0] = huart->Instance->DR;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_UART_RxCpltCallback+0x34>)
 8001750:	701a      	strb	r2, [r3, #0]
		UART1_flag_gb = 1;
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_UART_RxCpltCallback+0x38>)
 8001754:	2201      	movs	r2, #1
 8001756:	701a      	strb	r2, [r3, #0]
	}
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	40011000 	.word	0x40011000
 8001768:	20000324 	.word	0x20000324
 800176c:	20000325 	.word	0x20000325

08001770 <TAKE_OBJECT>:
   *           - Sets servo angles for other parts of the arms to specific positions.
   *           - Sets the PWM duty cycle for the specified Servo motor channel to a predefined value.
   *           - Starts the PWM output for the specified Servo motor channel.
   */
void TAKE_OBJECT(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
TIM5->CCR1=90;
 8001774:	4b28      	ldr	r3, [pc, #160]	; (8001818 <TAKE_OBJECT+0xa8>)
 8001776:	225a      	movs	r2, #90	; 0x5a
 8001778:	635a      	str	r2, [r3, #52]	; 0x34
HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 800177a:	2100      	movs	r1, #0
 800177c:	4827      	ldr	r0, [pc, #156]	; (800181c <TAKE_OBJECT+0xac>)
 800177e:	f003 f8cd 	bl	800491c <HAL_TIM_PWM_Start>
HAL_Delay(3000);
 8001782:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001786:	f000 fec9 	bl	800251c <HAL_Delay>
// C elbow right
	  PCA9685_SetServoAngle(12,  10);
 800178a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800178e:	200c      	movs	r0, #12
 8001790:	f000 face 	bl	8001d30 <PCA9685_SetServoAngle>
	  // D rest right
	  PCA9685_SetServoAngle(10,  100);
 8001794:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8001820 <TAKE_OBJECT+0xb0>
 8001798:	200a      	movs	r0, #10
 800179a:	f000 fac9 	bl	8001d30 <PCA9685_SetServoAngle>
	  HAL_Delay(4000);
 800179e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80017a2:	f000 febb 	bl	800251c <HAL_Delay>
	  //open
	  //Pinky Right hand (1)
	   PCA9685_SetServoAngle( PinkyR_channel1 ,  140);
 80017a6:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8001824 <TAKE_OBJECT+0xb4>
 80017aa:	2001      	movs	r0, #1
 80017ac:	f000 fac0 	bl	8001d30 <PCA9685_SetServoAngle>
	  //Ring Right hand (2)
	  PCA9685_SetServoAngle(RingR_channel0,  140);
 80017b0:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8001824 <TAKE_OBJECT+0xb4>
 80017b4:	2000      	movs	r0, #0
 80017b6:	f000 fabb 	bl	8001d30 <PCA9685_SetServoAngle>
	  //middle Right hand (3)
	  PCA9685_SetServoAngle(MiddleR_channel2,  140);
 80017ba:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8001824 <TAKE_OBJECT+0xb4>
 80017be:	2002      	movs	r0, #2
 80017c0:	f000 fab6 	bl	8001d30 <PCA9685_SetServoAngle>
	  //index Right hand (4)
	  PCA9685_SetServoAngle(IndexR_channel3,  170);
 80017c4:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8001828 <TAKE_OBJECT+0xb8>
 80017c8:	2003      	movs	r0, #3
 80017ca:	f000 fab1 	bl	8001d30 <PCA9685_SetServoAngle>
	  //thumb Right hand (5)
	  PCA9685_SetServoAngle(ThumbR_channel4,  15);
 80017ce:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 80017d2:	2004      	movs	r0, #4
 80017d4:	f000 faac 	bl	8001d30 <PCA9685_SetServoAngle>
	  HAL_Delay(2000);
 80017d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80017dc:	f000 fe9e 	bl	800251c <HAL_Delay>
   //close
	 //pinky Right hand (1)
	 PCA9685_SetServoAngle(1,  10);
 80017e0:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80017e4:	2001      	movs	r0, #1
 80017e6:	f000 faa3 	bl	8001d30 <PCA9685_SetServoAngle>
	 //Ring Right hand (2)
	 PCA9685_SetServoAngle(0,  0);
 80017ea:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800182c <TAKE_OBJECT+0xbc>
 80017ee:	2000      	movs	r0, #0
 80017f0:	f000 fa9e 	bl	8001d30 <PCA9685_SetServoAngle>
	 //middle Right hand (3)
	 PCA9685_SetServoAngle(2,  0);
 80017f4:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800182c <TAKE_OBJECT+0xbc>
 80017f8:	2002      	movs	r0, #2
 80017fa:	f000 fa99 	bl	8001d30 <PCA9685_SetServoAngle>
	 //index Right hand (4)
	 PCA9685_SetServoAngle(3,  75);
 80017fe:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8001830 <TAKE_OBJECT+0xc0>
 8001802:	2003      	movs	r0, #3
 8001804:	f000 fa94 	bl	8001d30 <PCA9685_SetServoAngle>
	 //thumb Right hand (5)
	 PCA9685_SetServoAngle(4,  75);
 8001808:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8001830 <TAKE_OBJECT+0xc0>
 800180c:	2004      	movs	r0, #4
 800180e:	f000 fa8f 	bl	8001d30 <PCA9685_SetServoAngle>
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40000c00 	.word	0x40000c00
 800181c:	200001b8 	.word	0x200001b8
 8001820:	42c80000 	.word	0x42c80000
 8001824:	430c0000 	.word	0x430c0000
 8001828:	432a0000 	.word	0x432a0000
 800182c:	00000000 	.word	0x00000000
 8001830:	42960000 	.word	0x42960000

08001834 <RELEASE_OBJECT>:
   *           - Sets servo angles for other parts of the arms to specific positions.
   *           - Sets the PWM duty cycle for the specified Servo motor channel to a predefined value.
   *           - Starts the PWM output for the specified Servo motor channel.
   */
void RELEASE_OBJECT(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
//open
	  //Pinky Right hand (1)
	   PCA9685_SetServoAngle( PinkyR_channel1 ,  140);
 8001838:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80018a0 <RELEASE_OBJECT+0x6c>
 800183c:	2001      	movs	r0, #1
 800183e:	f000 fa77 	bl	8001d30 <PCA9685_SetServoAngle>
	  //Ring Right hand (2)
	  PCA9685_SetServoAngle(RingR_channel0,  140);
 8001842:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80018a0 <RELEASE_OBJECT+0x6c>
 8001846:	2000      	movs	r0, #0
 8001848:	f000 fa72 	bl	8001d30 <PCA9685_SetServoAngle>
	  //middle Right hand (3)
	  PCA9685_SetServoAngle(MiddleR_channel2,  140);
 800184c:	ed9f 0a14 	vldr	s0, [pc, #80]	; 80018a0 <RELEASE_OBJECT+0x6c>
 8001850:	2002      	movs	r0, #2
 8001852:	f000 fa6d 	bl	8001d30 <PCA9685_SetServoAngle>
	  //index Right hand (4)
	  PCA9685_SetServoAngle(IndexR_channel3,  170);
 8001856:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80018a4 <RELEASE_OBJECT+0x70>
 800185a:	2003      	movs	r0, #3
 800185c:	f000 fa68 	bl	8001d30 <PCA9685_SetServoAngle>
	  //thumb Right hand (5)
	  PCA9685_SetServoAngle(ThumbR_channel4,  15);
 8001860:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8001864:	2004      	movs	r0, #4
 8001866:	f000 fa63 	bl	8001d30 <PCA9685_SetServoAngle>
	  HAL_Delay(4000);
 800186a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800186e:	f000 fe55 	bl	800251c <HAL_Delay>
	  // C elbow right
	 PCA9685_SetServoAngle(12,  80);
 8001872:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80018a8 <RELEASE_OBJECT+0x74>
 8001876:	200c      	movs	r0, #12
 8001878:	f000 fa5a 	bl	8001d30 <PCA9685_SetServoAngle>
	// D rest right
	  PCA9685_SetServoAngle(10,  10);
 800187c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8001880:	200a      	movs	r0, #10
 8001882:	f000 fa55 	bl	8001d30 <PCA9685_SetServoAngle>
	  HAL_Delay(1500);
 8001886:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800188a:	f000 fe47 	bl	800251c <HAL_Delay>
	  //shoulder release
	  TIM5->CCR1=60;
 800188e:	4b07      	ldr	r3, [pc, #28]	; (80018ac <RELEASE_OBJECT+0x78>)
 8001890:	223c      	movs	r2, #60	; 0x3c
 8001892:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001894:	2100      	movs	r1, #0
 8001896:	4806      	ldr	r0, [pc, #24]	; (80018b0 <RELEASE_OBJECT+0x7c>)
 8001898:	f003 f840 	bl	800491c <HAL_TIM_PWM_Start>


}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	430c0000 	.word	0x430c0000
 80018a4:	432a0000 	.word	0x432a0000
 80018a8:	42a00000 	.word	0x42a00000
 80018ac:	40000c00 	.word	0x40000c00
 80018b0:	200001b8 	.word	0x200001b8

080018b4 <SHAKE_HAND>:
   *           - Sets servo angles for the fingers of the right hand to simulate an open hand gesture.
   *           - Sets servo angles for other parts of the right arm to a specific position.
   *           - Sets the PWM duty cycle for the Servo motor to a predefined value based on the specified motor channel.
   *           - Starts the PWM output for the specified Servo motor channel.
   */
void SHAKE_HAND(void){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
	TIM5->CCR1=90;
 80018b8:	4b37      	ldr	r3, [pc, #220]	; (8001998 <SHAKE_HAND+0xe4>)
 80018ba:	225a      	movs	r2, #90	; 0x5a
 80018bc:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 80018be:	2100      	movs	r1, #0
 80018c0:	4836      	ldr	r0, [pc, #216]	; (800199c <SHAKE_HAND+0xe8>)
 80018c2:	f003 f82b 	bl	800491c <HAL_TIM_PWM_Start>
	HAL_Delay(5000);
 80018c6:	f241 3088 	movw	r0, #5000	; 0x1388
 80018ca:	f000 fe27 	bl	800251c <HAL_Delay>
		  //open
		  //Pinky Right hand (1)
		   PCA9685_SetServoAngle( PinkyR_channel1 ,  140);
 80018ce:	ed9f 0a34 	vldr	s0, [pc, #208]	; 80019a0 <SHAKE_HAND+0xec>
 80018d2:	2001      	movs	r0, #1
 80018d4:	f000 fa2c 	bl	8001d30 <PCA9685_SetServoAngle>
		  //Ring Right hand (2)
		  PCA9685_SetServoAngle(RingR_channel0,  140);
 80018d8:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80019a0 <SHAKE_HAND+0xec>
 80018dc:	2000      	movs	r0, #0
 80018de:	f000 fa27 	bl	8001d30 <PCA9685_SetServoAngle>
		  //middle Right hand (3)
		  PCA9685_SetServoAngle(MiddleR_channel2,  140);
 80018e2:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 80019a0 <SHAKE_HAND+0xec>
 80018e6:	2002      	movs	r0, #2
 80018e8:	f000 fa22 	bl	8001d30 <PCA9685_SetServoAngle>
		  //index Right hand (4)
		  PCA9685_SetServoAngle(IndexR_channel3,  170);
 80018ec:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80019a4 <SHAKE_HAND+0xf0>
 80018f0:	2003      	movs	r0, #3
 80018f2:	f000 fa1d 	bl	8001d30 <PCA9685_SetServoAngle>
		  //thumb Right hand (5)
		  PCA9685_SetServoAngle(ThumbR_channel4,  15);
 80018f6:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 80018fa:	2004      	movs	r0, #4
 80018fc:	f000 fa18 	bl	8001d30 <PCA9685_SetServoAngle>
		  HAL_Delay(1000);
 8001900:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001904:	f000 fe0a 	bl	800251c <HAL_Delay>
	   //close
		 //pinky Right hand (1)
		 PCA9685_SetServoAngle(1,  10);
 8001908:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800190c:	2001      	movs	r0, #1
 800190e:	f000 fa0f 	bl	8001d30 <PCA9685_SetServoAngle>
		 //Ring Right hand (2)
		 PCA9685_SetServoAngle(0,  0);
 8001912:	ed9f 0a25 	vldr	s0, [pc, #148]	; 80019a8 <SHAKE_HAND+0xf4>
 8001916:	2000      	movs	r0, #0
 8001918:	f000 fa0a 	bl	8001d30 <PCA9685_SetServoAngle>
		 //middle Right hand (3)
		 PCA9685_SetServoAngle(2,  0);
 800191c:	ed9f 0a22 	vldr	s0, [pc, #136]	; 80019a8 <SHAKE_HAND+0xf4>
 8001920:	2002      	movs	r0, #2
 8001922:	f000 fa05 	bl	8001d30 <PCA9685_SetServoAngle>
		 //index Right hand (4)
		 PCA9685_SetServoAngle(3,  75);
 8001926:	ed9f 0a21 	vldr	s0, [pc, #132]	; 80019ac <SHAKE_HAND+0xf8>
 800192a:	2003      	movs	r0, #3
 800192c:	f000 fa00 	bl	8001d30 <PCA9685_SetServoAngle>
		 //thumb Right hand (5)
		 PCA9685_SetServoAngle(4,  75);
 8001930:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80019ac <SHAKE_HAND+0xf8>
 8001934:	2004      	movs	r0, #4
 8001936:	f000 f9fb 	bl	8001d30 <PCA9685_SetServoAngle>
		 HAL_Delay(3000);
 800193a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800193e:	f000 fded 	bl	800251c <HAL_Delay>
		 //open
		 	  //Pinky Right hand (1)
		 	   PCA9685_SetServoAngle( PinkyR_channel1 ,  140);
 8001942:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80019a0 <SHAKE_HAND+0xec>
 8001946:	2001      	movs	r0, #1
 8001948:	f000 f9f2 	bl	8001d30 <PCA9685_SetServoAngle>
		 	  //Ring Right hand (2)
		 	  PCA9685_SetServoAngle(RingR_channel0,  140);
 800194c:	ed9f 0a14 	vldr	s0, [pc, #80]	; 80019a0 <SHAKE_HAND+0xec>
 8001950:	2000      	movs	r0, #0
 8001952:	f000 f9ed 	bl	8001d30 <PCA9685_SetServoAngle>
		 	  //middle Right hand (3)
		 	  PCA9685_SetServoAngle(MiddleR_channel2,  140);
 8001956:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80019a0 <SHAKE_HAND+0xec>
 800195a:	2002      	movs	r0, #2
 800195c:	f000 f9e8 	bl	8001d30 <PCA9685_SetServoAngle>
		 	  //index Right hand (4)
		 	  PCA9685_SetServoAngle(IndexR_channel3,  170);
 8001960:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80019a4 <SHAKE_HAND+0xf0>
 8001964:	2003      	movs	r0, #3
 8001966:	f000 f9e3 	bl	8001d30 <PCA9685_SetServoAngle>
		 	  //thumb Right hand (5)
		 	  PCA9685_SetServoAngle(ThumbR_channel4,  15);
 800196a:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 800196e:	2004      	movs	r0, #4
 8001970:	f000 f9de 	bl	8001d30 <PCA9685_SetServoAngle>
		 	  HAL_Delay(4000);
 8001974:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001978:	f000 fdd0 	bl	800251c <HAL_Delay>
		 	  //shoulder release
		 	  TIM5->CCR1=60;
 800197c:	4b06      	ldr	r3, [pc, #24]	; (8001998 <SHAKE_HAND+0xe4>)
 800197e:	223c      	movs	r2, #60	; 0x3c
 8001980:	635a      	str	r2, [r3, #52]	; 0x34
		 	  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001982:	2100      	movs	r1, #0
 8001984:	4805      	ldr	r0, [pc, #20]	; (800199c <SHAKE_HAND+0xe8>)
 8001986:	f002 ffc9 	bl	800491c <HAL_TIM_PWM_Start>
		 	  HAL_Delay(4000);
 800198a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800198e:	f000 fdc5 	bl	800251c <HAL_Delay>



}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40000c00 	.word	0x40000c00
 800199c:	200001b8 	.word	0x200001b8
 80019a0:	430c0000 	.word	0x430c0000
 80019a4:	432a0000 	.word	0x432a0000
 80019a8:	00000000 	.word	0x00000000
 80019ac:	42960000 	.word	0x42960000

080019b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b4:	b672      	cpsid	i
}
 80019b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019b8:	e7fe      	b.n	80019b8 <Error_Handler+0x8>
	...

080019bc <PCA9685_SetBit>:
  * @param  Bit: The position of the bit to set (0 to 7).
  * @param  Value: The value to set the bit (0 or 1).
  * @retval PCA9685_STATUS: PCA9685_OK if the operation is successful, PCA9685_ERROR otherwise.
  */
PCA9685_STATUS PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b088      	sub	sp, #32
 80019c0:	af04      	add	r7, sp, #16
 80019c2:	4603      	mov	r3, r0
 80019c4:	71fb      	strb	r3, [r7, #7]
 80019c6:	460b      	mov	r3, r1
 80019c8:	71bb      	strb	r3, [r7, #6]
 80019ca:	4613      	mov	r3, r2
 80019cc:	717b      	strb	r3, [r7, #5]
	uint8_t tmp;
    // Convert any non-zero value to 1
	if(Value) Value = 1;
 80019ce:	797b      	ldrb	r3, [r7, #5]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <PCA9685_SetBit+0x1c>
 80019d4:	2301      	movs	r3, #1
 80019d6:	717b      	strb	r3, [r7, #5]
    // Read the current value from the register
	if(HAL_OK != HAL_I2C_Mem_Read(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 80019d8:	4b24      	ldr	r3, [pc, #144]	; (8001a6c <PCA9685_SetBit+0xb0>)
 80019da:	6818      	ldr	r0, [r3, #0]
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	b29a      	uxth	r2, r3
 80019e0:	230a      	movs	r3, #10
 80019e2:	9302      	str	r3, [sp, #8]
 80019e4:	2301      	movs	r3, #1
 80019e6:	9301      	str	r3, [sp, #4]
 80019e8:	f107 030f 	add.w	r3, r7, #15
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	2301      	movs	r3, #1
 80019f0:	21a0      	movs	r1, #160	; 0xa0
 80019f2:	f001 fc35 	bl	8003260 <HAL_I2C_Mem_Read>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <PCA9685_SetBit+0x44>
	{
		return PCA9685_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e031      	b.n	8001a64 <PCA9685_SetBit+0xa8>
	}
    // Clear the bit position
	tmp &= ~((1<<PCA9685_MODE1_RESTART_BIT)|(1<<Bit));
 8001a00:	79bb      	ldrb	r3, [r7, #6]
 8001a02:	2201      	movs	r2, #1
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	b25b      	sxtb	r3, r3
 8001a0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a0e:	b25b      	sxtb	r3, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	b25a      	sxtb	r2, r3
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
 8001a16:	b25b      	sxtb	r3, r3
 8001a18:	4013      	ands	r3, r2
 8001a1a:	b25b      	sxtb	r3, r3
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	73fb      	strb	r3, [r7, #15]
    // Set the bit to the specified value
	tmp |= (Value&1)<<Bit;
 8001a20:	797b      	ldrb	r3, [r7, #5]
 8001a22:	f003 0201 	and.w	r2, r3, #1
 8001a26:	79bb      	ldrb	r3, [r7, #6]
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	b25a      	sxtb	r2, r3
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
 8001a30:	b25b      	sxtb	r3, r3
 8001a32:	4313      	orrs	r3, r2
 8001a34:	b25b      	sxtb	r3, r3
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	73fb      	strb	r3, [r7, #15]
    // Write the modified value back to the register
	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <PCA9685_SetBit+0xb0>)
 8001a3c:	6818      	ldr	r0, [r3, #0]
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	230a      	movs	r3, #10
 8001a44:	9302      	str	r3, [sp, #8]
 8001a46:	2301      	movs	r3, #1
 8001a48:	9301      	str	r3, [sp, #4]
 8001a4a:	f107 030f 	add.w	r3, r7, #15
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	2301      	movs	r3, #1
 8001a52:	21a0      	movs	r1, #160	; 0xa0
 8001a54:	f001 fb0a 	bl	800306c <HAL_I2C_Mem_Write>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <PCA9685_SetBit+0xa6>
	{
		return PCA9685_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e000      	b.n	8001a64 <PCA9685_SetBit+0xa8>
	}

	return PCA9685_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000328 	.word	0x20000328

08001a70 <PCA9685_SoftwareReset>:
  * @brief  Performs a software reset on the PCA9685 device.
  * @note   This function sends a software reset command to the PCA9685 device, which resets all internal registers to their default values.
  * @retval PCA9685_STATUS: PCA9685_OK if the software reset operation is successful, PCA9685_ERROR otherwise.
  */
PCA9685_STATUS PCA9685_SoftwareReset(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af02      	add	r7, sp, #8
	uint8_t cmd = 0x6;
 8001a76:	2306      	movs	r3, #6
 8001a78:	71fb      	strb	r3, [r7, #7]
	// Send the software reset command via I2C
	if(HAL_OK == HAL_I2C_Master_Transmit(pca9685_i2c, 0x00, &cmd, 1, 10))
 8001a7a:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <PCA9685_SoftwareReset+0x30>)
 8001a7c:	6818      	ldr	r0, [r3, #0]
 8001a7e:	1dfa      	adds	r2, r7, #7
 8001a80:	230a      	movs	r3, #10
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	2301      	movs	r3, #1
 8001a86:	2100      	movs	r1, #0
 8001a88:	f001 f9f2 	bl	8002e70 <HAL_I2C_Master_Transmit>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <PCA9685_SoftwareReset+0x26>
	{
		return PCA9685_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	e000      	b.n	8001a98 <PCA9685_SoftwareReset+0x28>
	}
	// Return error status if the transmission fails
	return PCA9685_ERROR;
 8001a96:	2301      	movs	r3, #1
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20000328 	.word	0x20000328

08001aa4 <PCA9685_SleepMode>:
  *             @arg 0: Disable sleep mode (normal operation).
  *             @arg 1: Enable sleep mode.
  * @retval PCA9685_STATUS: PCA9685_OK if the sleep mode setting is successful, PCA9685_ERROR otherwise.
  */
PCA9685_STATUS PCA9685_SleepMode(uint8_t Enable)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	71fb      	strb	r3, [r7, #7]
    // Call PCA9685_SetBit function to set or clear the sleep mode bit in MODE1 register
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, Enable);
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	2104      	movs	r1, #4
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	f7ff ff81 	bl	80019bc <PCA9685_SetBit>
 8001aba:	4603      	mov	r3, r0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <PCA9685_RestartMode>:
  *             @arg 0: Disable restart mode (PWM outputs are not restarted immediately).
  *             @arg 1: Enable restart mode (PWM outputs are restarted immediately upon receiving new values in LEDn_ON registers).
  * @retval PCA9685_STATUS: PCA9685_OK if the restart mode setting is successful, PCA9685_ERROR otherwise.
  */
PCA9685_STATUS PCA9685_RestartMode(uint8_t Enable)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]
    // Call PCA9685_SetBit function to set or clear the restart mode bit in MODE1 register
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, Enable);
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	2107      	movs	r1, #7
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	f7ff ff71 	bl	80019bc <PCA9685_SetBit>
 8001ada:	4603      	mov	r3, r0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <PCA9685_AutoIncrement>:
  *             @arg 0: Disable auto-increment mode (consecutive register accesses are not automatically incremented).
  *             @arg 1: Enable auto-increment mode (consecutive register accesses are automatically incremented).
  * @retval PCA9685_STATUS: PCA9685_OK if the auto-increment mode setting is successful, PCA9685_ERROR otherwise.
  */
PCA9685_STATUS PCA9685_AutoIncrement(uint8_t Enable)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	71fb      	strb	r3, [r7, #7]
    // Call PCA9685_SetBit function to set or clear the auto-increment mode bit in MODE1 register
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, Enable);
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	461a      	mov	r2, r3
 8001af2:	2105      	movs	r1, #5
 8001af4:	2000      	movs	r0, #0
 8001af6:	f7ff ff61 	bl	80019bc <PCA9685_SetBit>
 8001afa:	4603      	mov	r3, r0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	0000      	movs	r0, r0
	...

08001b08 <PCA9685_SetPwmFrequency>:
  * @param  Frequency: The desired PWM frequency to be set (in Hz).
  * @note   The PWM frequency is set by configuring the prescaler value in the PCA9685 device.
  * @retval PCA9685_STATUS: PCA9685_OK if the PWM frequency setting is successful, PCA9685_ERROR otherwise.
  */
PCA9685_STATUS PCA9685_SetPwmFrequency(uint16_t Frequency)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b088      	sub	sp, #32
 8001b0c:	af04      	add	r7, sp, #16
 8001b0e:	4603      	mov	r3, r0
 8001b10:	80fb      	strh	r3, [r7, #6]
	float PrescalerVal;
	uint8_t Prescale;

    // Determine the prescale value based on the desired PWM frequency
	if(Frequency >= 1526)
 8001b12:	88fb      	ldrh	r3, [r7, #6]
 8001b14:	f240 52f5 	movw	r2, #1525	; 0x5f5
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d902      	bls.n	8001b22 <PCA9685_SetPwmFrequency+0x1a>
	{
		Prescale = 0x03;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	72fb      	strb	r3, [r7, #11]
 8001b20:	e046      	b.n	8001bb0 <PCA9685_SetPwmFrequency+0xa8>
	}
	else if(Frequency <= 24)
 8001b22:	88fb      	ldrh	r3, [r7, #6]
 8001b24:	2b18      	cmp	r3, #24
 8001b26:	d802      	bhi.n	8001b2e <PCA9685_SetPwmFrequency+0x26>
	{
		Prescale = 0xFF;
 8001b28:	23ff      	movs	r3, #255	; 0xff
 8001b2a:	72fb      	strb	r3, [r7, #11]
 8001b2c:	e040      	b.n	8001bb0 <PCA9685_SetPwmFrequency+0xa8>
	}
	else
	{
		PrescalerVal = (25000000 / (4096.0 * (float)Frequency)) - 1;
 8001b2e:	88fb      	ldrh	r3, [r7, #6]
 8001b30:	ee07 3a90 	vmov	s15, r3
 8001b34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b38:	ee17 0a90 	vmov	r0, s15
 8001b3c:	f7fe fcb0 	bl	80004a0 <__aeabi_f2d>
 8001b40:	f04f 0200 	mov.w	r2, #0
 8001b44:	4b2a      	ldr	r3, [pc, #168]	; (8001bf0 <PCA9685_SetPwmFrequency+0xe8>)
 8001b46:	f7fe fd03 	bl	8000550 <__aeabi_dmul>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	a126      	add	r1, pc, #152	; (adr r1, 8001be8 <PCA9685_SetPwmFrequency+0xe0>)
 8001b50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b54:	f7fe fe26 	bl	80007a4 <__aeabi_ddiv>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	4b23      	ldr	r3, [pc, #140]	; (8001bf4 <PCA9685_SetPwmFrequency+0xec>)
 8001b66:	f7fe fb3b 	bl	80001e0 <__aeabi_dsub>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	4610      	mov	r0, r2
 8001b70:	4619      	mov	r1, r3
 8001b72:	f7fe ffa7 	bl	8000ac4 <__aeabi_d2f>
 8001b76:	4603      	mov	r3, r0
 8001b78:	60fb      	str	r3, [r7, #12]
		Prescale = floor(PrescalerVal + 0.5);
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f7fe fc90 	bl	80004a0 <__aeabi_f2d>
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	4b1c      	ldr	r3, [pc, #112]	; (8001bf8 <PCA9685_SetPwmFrequency+0xf0>)
 8001b86:	f7fe fb2d 	bl	80001e4 <__adddf3>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	ec43 2b17 	vmov	d7, r2, r3
 8001b92:	eeb0 0a47 	vmov.f32	s0, s14
 8001b96:	eef0 0a67 	vmov.f32	s1, s15
 8001b9a:	f004 fe49 	bl	8006830 <floor>
 8001b9e:	ec53 2b10 	vmov	r2, r3, d0
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f7fe ff6d 	bl	8000a84 <__aeabi_d2uiz>
 8001baa:	4603      	mov	r3, r0
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	72fb      	strb	r3, [r7, #11]
	}

	//	To change the frequency, PCA9685 have to be in Sleep mode.
	PCA9685_SleepMode(1);
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	f7ff ff77 	bl	8001aa4 <PCA9685_SleepMode>
    // Write the prescale value to the PCA9685 device
	HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, PCA9685_PRESCALE, 1, &Prescale, 1, 10); // Write Prescale value
 8001bb6:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <PCA9685_SetPwmFrequency+0xf4>)
 8001bb8:	6818      	ldr	r0, [r3, #0]
 8001bba:	230a      	movs	r3, #10
 8001bbc:	9302      	str	r3, [sp, #8]
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	9301      	str	r3, [sp, #4]
 8001bc2:	f107 030b 	add.w	r3, r7, #11
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	2301      	movs	r3, #1
 8001bca:	22fe      	movs	r2, #254	; 0xfe
 8001bcc:	21a0      	movs	r1, #160	; 0xa0
 8001bce:	f001 fa4d 	bl	800306c <HAL_I2C_Mem_Write>
	// Set the PCA9685 device back to Awake mode
	PCA9685_SleepMode(0);
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	f7ff ff66 	bl	8001aa4 <PCA9685_SleepMode>
    // Enable restart mode to apply the frequency change immediately
	PCA9685_RestartMode(1);
 8001bd8:	2001      	movs	r0, #1
 8001bda:	f7ff ff73 	bl	8001ac4 <PCA9685_RestartMode>
	return PCA9685_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	00000000 	.word	0x00000000
 8001bec:	4177d784 	.word	0x4177d784
 8001bf0:	40b00000 	.word	0x40b00000
 8001bf4:	3ff00000 	.word	0x3ff00000
 8001bf8:	3fe00000 	.word	0x3fe00000
 8001bfc:	20000328 	.word	0x20000328

08001c00 <PCA9685_SetPwm>:
  *
  *         The tick value represents a fraction of the PWM period, with 4096 ticks per period.
  * @retval PCA9685_STATUS: PCA9685_OK if the PWM setting is successful, PCA9685_ERROR otherwise.
  */
PCA9685_STATUS PCA9685_SetPwm(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af04      	add	r7, sp, #16
 8001c06:	4603      	mov	r3, r0
 8001c08:	71fb      	strb	r3, [r7, #7]
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	80bb      	strh	r3, [r7, #4]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	807b      	strh	r3, [r7, #2]
	uint8_t RegisterAddress;
	uint8_t Message[4];

    // Calculate the register address for the specified channel
	RegisterAddress = PCA9685_LED0_ON_L + (4 * Channel);
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	3306      	adds	r3, #6
 8001c1a:	73fb      	strb	r3, [r7, #15]
    // Split the OnTime and OffTime values into individual bytes
	Message[0] = OnTime & 0xFF;
 8001c1c:	88bb      	ldrh	r3, [r7, #4]
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	723b      	strb	r3, [r7, #8]
	Message[1] = OnTime>>8;
 8001c22:	88bb      	ldrh	r3, [r7, #4]
 8001c24:	0a1b      	lsrs	r3, r3, #8
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	727b      	strb	r3, [r7, #9]
	Message[2] = OffTime & 0xFF;
 8001c2c:	887b      	ldrh	r3, [r7, #2]
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	72bb      	strb	r3, [r7, #10]
	Message[3] = OffTime>>8;
 8001c32:	887b      	ldrh	r3, [r7, #2]
 8001c34:	0a1b      	lsrs	r3, r3, #8
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	72fb      	strb	r3, [r7, #11]
    // Write the OnTime and OffTime values to the corresponding LED registers via I2C
	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, RegisterAddress, 1, Message, 4, 10))
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <PCA9685_SetPwm+0x70>)
 8001c3e:	6818      	ldr	r0, [r3, #0]
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	230a      	movs	r3, #10
 8001c46:	9302      	str	r3, [sp, #8]
 8001c48:	2304      	movs	r3, #4
 8001c4a:	9301      	str	r3, [sp, #4]
 8001c4c:	f107 0308 	add.w	r3, r7, #8
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	2301      	movs	r3, #1
 8001c54:	21a0      	movs	r1, #160	; 0xa0
 8001c56:	f001 fa09 	bl	800306c <HAL_I2C_Mem_Write>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <PCA9685_SetPwm+0x64>
	{
		return PCA9685_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e000      	b.n	8001c66 <PCA9685_SetPwm+0x66>
	}

	return PCA9685_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000328 	.word	0x20000328

08001c74 <PCA9685_SetPin>:
  *             @arg 1: Invert the PWM signal.
  * @note   The Value parameter represents the ON time for the PWM signal when not inverted, and the OFF time when inverted.
  * @retval PCA9685_STATUS: PCA9685_OK if the PWM setting is successful, PCA9685_ERROR otherwise.
  */
PCA9685_STATUS PCA9685_SetPin(uint8_t Channel, uint16_t Value, uint8_t Invert)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	71fb      	strb	r3, [r7, #7]
 8001c7e:	460b      	mov	r3, r1
 8001c80:	80bb      	strh	r3, [r7, #4]
 8001c82:	4613      	mov	r3, r2
 8001c84:	71bb      	strb	r3, [r7, #6]

  // Ensure Value is within the valid range (0 to 4095)
  if(Value > 4095) Value = 4095;
 8001c86:	88bb      	ldrh	r3, [r7, #4]
 8001c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c8c:	d302      	bcc.n	8001c94 <PCA9685_SetPin+0x20>
 8001c8e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001c92:	80bb      	strh	r3, [r7, #4]

  // Determine the PWM duty cycle based on the provided Value and Invert settings
  if (Invert) {
 8001c94:	79bb      	ldrb	r3, [r7, #6]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d025      	beq.n	8001ce6 <PCA9685_SetPin+0x72>
    if (Value == 0) {
 8001c9a:	88bb      	ldrh	r3, [r7, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d108      	bne.n	8001cb2 <PCA9685_SetPin+0x3e>
      // Special value for signal fully on.
      return PCA9685_SetPwm(Channel, 4096, 0);
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff ffa9 	bl	8001c00 <PCA9685_SetPwm>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	e03a      	b.n	8001d28 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 4095) {
 8001cb2:	88bb      	ldrh	r3, [r7, #4]
 8001cb4:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d108      	bne.n	8001cce <PCA9685_SetPin+0x5a>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
 8001cbe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff ff9b 	bl	8001c00 <PCA9685_SetPwm>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	e02c      	b.n	8001d28 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, 4095-Value);
 8001cce:	88bb      	ldrh	r3, [r7, #4]
 8001cd0:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001cd4:	330f      	adds	r3, #15
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ff8f 	bl	8001c00 <PCA9685_SetPwm>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	e020      	b.n	8001d28 <PCA9685_SetPin+0xb4>
    }
  }
  else {
    if (Value == 4095) {
 8001ce6:	88bb      	ldrh	r3, [r7, #4]
 8001ce8:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d108      	bne.n	8001d02 <PCA9685_SetPin+0x8e>
      // Special value for signal fully on.
    	return PCA9685_SetPwm(Channel, 4096, 0);
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff81 	bl	8001c00 <PCA9685_SetPwm>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	e012      	b.n	8001d28 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 0) {
 8001d02:	88bb      	ldrh	r3, [r7, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d108      	bne.n	8001d1a <PCA9685_SetPin+0xa6>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d0e:	2100      	movs	r1, #0
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ff75 	bl	8001c00 <PCA9685_SetPwm>
 8001d16:	4603      	mov	r3, r0
 8001d18:	e006      	b.n	8001d28 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, Value);
 8001d1a:	88ba      	ldrh	r2, [r7, #4]
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ff6d 	bl	8001c00 <PCA9685_SetPwm>
 8001d26:	4603      	mov	r3, r0
    }
  }
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <PCA9685_SetServoAngle>:
  * @note   This function is applicable only in servo mode (PCA9685_SERVO_MODE).
  *         The angle is converted to a corresponding PWM value and then set for the channel.
  * @retval PCA9685_STATUS: PCA9685_OK if the servo angle setting is successful, PCA9685_ERROR otherwise.
  */
PCA9685_STATUS PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	ed87 0a00 	vstr	s0, [r7]
 8001d3c:	71fb      	strb	r3, [r7, #7]
	float Value;
    // Ensure the Angle parameter is within the valid range
	if(Angle < MIN_ANGLE) Angle = MIN_ANGLE;
 8001d3e:	edd7 7a00 	vldr	s15, [r7]
 8001d42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4a:	d502      	bpl.n	8001d52 <PCA9685_SetServoAngle+0x22>
 8001d4c:	f04f 0300 	mov.w	r3, #0
 8001d50:	603b      	str	r3, [r7, #0]
	if(Angle > MAX_ANGLE) Angle = MAX_ANGLE;
 8001d52:	edd7 7a00 	vldr	s15, [r7]
 8001d56:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001dd8 <PCA9685_SetServoAngle+0xa8>
 8001d5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d62:	dd01      	ble.n	8001d68 <PCA9685_SetServoAngle+0x38>
 8001d64:	4b1d      	ldr	r3, [pc, #116]	; (8001ddc <PCA9685_SetServoAngle+0xac>)
 8001d66:	603b      	str	r3, [r7, #0]

    // Convert the angle to the corresponding PWM value
	Value = (Angle - MIN_ANGLE) * ((float)SERVO_MAX - (float)SERVO_MIN) / (MAX_ANGLE - MIN_ANGLE) + (float)SERVO_MIN;
 8001d68:	6838      	ldr	r0, [r7, #0]
 8001d6a:	f7fe fb99 	bl	80004a0 <__aeabi_f2d>
 8001d6e:	a318      	add	r3, pc, #96	; (adr r3, 8001dd0 <PCA9685_SetServoAngle+0xa0>)
 8001d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d74:	f7fe fbec 	bl	8000550 <__aeabi_dmul>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	4619      	mov	r1, r3
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <PCA9685_SetServoAngle+0xb0>)
 8001d86:	f7fe fd0d 	bl	80007a4 <__aeabi_ddiv>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4610      	mov	r0, r2
 8001d90:	4619      	mov	r1, r3
 8001d92:	f04f 0200 	mov.w	r2, #0
 8001d96:	4b13      	ldr	r3, [pc, #76]	; (8001de4 <PCA9685_SetServoAngle+0xb4>)
 8001d98:	f7fe fa24 	bl	80001e4 <__adddf3>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4610      	mov	r0, r2
 8001da2:	4619      	mov	r1, r3
 8001da4:	f7fe fe8e 	bl	8000ac4 <__aeabi_d2f>
 8001da8:	4603      	mov	r3, r0
 8001daa:	60fb      	str	r3, [r7, #12]
    // Set the PWM value for the specified channel
	return PCA9685_SetPin(Channel, (uint16_t)Value, 0);
 8001dac:	edd7 7a03 	vldr	s15, [r7, #12]
 8001db0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001db4:	ee17 3a90 	vmov	r3, s15
 8001db8:	b299      	uxth	r1, r3
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff ff58 	bl	8001c74 <PCA9685_SetPin>
 8001dc4:	4603      	mov	r3, r0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	00000000 	.word	0x00000000
 8001dd4:	40786000 	.word	0x40786000
 8001dd8:	43340000 	.word	0x43340000
 8001ddc:	43340000 	.word	0x43340000
 8001de0:	40668000 	.word	0x40668000
 8001de4:	405b8000 	.word	0x405b8000

08001de8 <PCA9685_Init>:
  *           3. Sets the PWM frequency based on the mode (servo mode or default mode).
  *           4. Enables auto-increment mode for consecutive register accesses.
  * @retval PCA9685_STATUS: PCA9685_OK if the initialization is successful, PCA9685_ERROR otherwise.
  */
PCA9685_STATUS PCA9685_Init(I2C_HandleTypeDef *hi2c)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
    // Set the I2C handle for communication with the PCA9685 device
	pca9685_i2c = hi2c;
 8001df0:	4a07      	ldr	r2, [pc, #28]	; (8001e10 <PCA9685_Init+0x28>)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6013      	str	r3, [r2, #0]

    // Perform a software reset on the PCA9685 device
	PCA9685_SoftwareReset();
 8001df6:	f7ff fe3b 	bl	8001a70 <PCA9685_SoftwareReset>
    // Set the PWM frequency based on the mode (servo mode or default mode)
#ifdef PCA9685_SERVO_MODE
	PCA9685_SetPwmFrequency(48);
 8001dfa:	2030      	movs	r0, #48	; 0x30
 8001dfc:	f7ff fe84 	bl	8001b08 <PCA9685_SetPwmFrequency>
#else
	PCA9685_SetPwmFrequency(1000);
#endif
    // Enable auto-increment mode for consecutive register accesses
	PCA9685_AutoIncrement(1);
 8001e00:	2001      	movs	r0, #1
 8001e02:	f7ff fe6f 	bl	8001ae4 <PCA9685_AutoIncrement>

	return PCA9685_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20000328 	.word	0x20000328

08001e14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	607b      	str	r3, [r7, #4]
 8001e1e:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <HAL_MspInit+0x4c>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	4a0f      	ldr	r2, [pc, #60]	; (8001e60 <HAL_MspInit+0x4c>)
 8001e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e28:	6453      	str	r3, [r2, #68]	; 0x44
 8001e2a:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <HAL_MspInit+0x4c>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e32:	607b      	str	r3, [r7, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	603b      	str	r3, [r7, #0]
 8001e3a:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <HAL_MspInit+0x4c>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	4a08      	ldr	r2, [pc, #32]	; (8001e60 <HAL_MspInit+0x4c>)
 8001e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e44:	6413      	str	r3, [r2, #64]	; 0x40
 8001e46:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <HAL_MspInit+0x4c>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4e:	603b      	str	r3, [r7, #0]
 8001e50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40023800 	.word	0x40023800

08001e64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	; 0x28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a19      	ldr	r2, [pc, #100]	; (8001ee8 <HAL_I2C_MspInit+0x84>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d12c      	bne.n	8001ee0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	4b18      	ldr	r3, [pc, #96]	; (8001eec <HAL_I2C_MspInit+0x88>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	4a17      	ldr	r2, [pc, #92]	; (8001eec <HAL_I2C_MspInit+0x88>)
 8001e90:	f043 0302 	orr.w	r3, r3, #2
 8001e94:	6313      	str	r3, [r2, #48]	; 0x30
 8001e96:	4b15      	ldr	r3, [pc, #84]	; (8001eec <HAL_I2C_MspInit+0x88>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ea2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ea8:	2312      	movs	r3, #18
 8001eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001eb4:	2304      	movs	r3, #4
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb8:	f107 0314 	add.w	r3, r7, #20
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	480c      	ldr	r0, [pc, #48]	; (8001ef0 <HAL_I2C_MspInit+0x8c>)
 8001ec0:	f000 fcf4 	bl	80028ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <HAL_I2C_MspInit+0x88>)
 8001eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ecc:	4a07      	ldr	r2, [pc, #28]	; (8001eec <HAL_I2C_MspInit+0x88>)
 8001ece:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ed2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed4:	4b05      	ldr	r3, [pc, #20]	; (8001eec <HAL_I2C_MspInit+0x88>)
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ee0:	bf00      	nop
 8001ee2:	3728      	adds	r7, #40	; 0x28
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40005400 	.word	0x40005400
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40020400 	.word	0x40020400

08001ef4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b087      	sub	sp, #28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a1f      	ldr	r2, [pc, #124]	; (8001f80 <HAL_TIM_PWM_MspInit+0x8c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d10e      	bne.n	8001f24 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	4b1e      	ldr	r3, [pc, #120]	; (8001f84 <HAL_TIM_PWM_MspInit+0x90>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0e:	4a1d      	ldr	r2, [pc, #116]	; (8001f84 <HAL_TIM_PWM_MspInit+0x90>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	6453      	str	r3, [r2, #68]	; 0x44
 8001f16:	4b1b      	ldr	r3, [pc, #108]	; (8001f84 <HAL_TIM_PWM_MspInit+0x90>)
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001f22:	e026      	b.n	8001f72 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM2)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f2c:	d10e      	bne.n	8001f4c <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <HAL_TIM_PWM_MspInit+0x90>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	4a13      	ldr	r2, [pc, #76]	; (8001f84 <HAL_TIM_PWM_MspInit+0x90>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3e:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <HAL_TIM_PWM_MspInit+0x90>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	613b      	str	r3, [r7, #16]
 8001f48:	693b      	ldr	r3, [r7, #16]
}
 8001f4a:	e012      	b.n	8001f72 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM9)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a0d      	ldr	r2, [pc, #52]	; (8001f88 <HAL_TIM_PWM_MspInit+0x94>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d10d      	bne.n	8001f72 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <HAL_TIM_PWM_MspInit+0x90>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5e:	4a09      	ldr	r2, [pc, #36]	; (8001f84 <HAL_TIM_PWM_MspInit+0x90>)
 8001f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f64:	6453      	str	r3, [r2, #68]	; 0x44
 8001f66:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <HAL_TIM_PWM_MspInit+0x90>)
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]
}
 8001f72:	bf00      	nop
 8001f74:	371c      	adds	r7, #28
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40010000 	.word	0x40010000
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40014000 	.word	0x40014000

08001f8c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08c      	sub	sp, #48	; 0x30
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f94:	f107 031c 	add.w	r3, r7, #28
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a32      	ldr	r2, [pc, #200]	; (8002074 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d12c      	bne.n	8002008 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61bb      	str	r3, [r7, #24]
 8001fb2:	4b31      	ldr	r3, [pc, #196]	; (8002078 <HAL_TIM_Encoder_MspInit+0xec>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	4a30      	ldr	r2, [pc, #192]	; (8002078 <HAL_TIM_Encoder_MspInit+0xec>)
 8001fb8:	f043 0302 	orr.w	r3, r3, #2
 8001fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fbe:	4b2e      	ldr	r3, [pc, #184]	; (8002078 <HAL_TIM_Encoder_MspInit+0xec>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	61bb      	str	r3, [r7, #24]
 8001fc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]
 8001fce:	4b2a      	ldr	r3, [pc, #168]	; (8002078 <HAL_TIM_Encoder_MspInit+0xec>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	4a29      	ldr	r2, [pc, #164]	; (8002078 <HAL_TIM_Encoder_MspInit+0xec>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fda:	4b27      	ldr	r3, [pc, #156]	; (8002078 <HAL_TIM_Encoder_MspInit+0xec>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	617b      	str	r3, [r7, #20]
 8001fe4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_Encoder1B_Pin|TIM3_CH2_Encoder1A_Pin;
 8001fe6:	23c0      	movs	r3, #192	; 0xc0
 8001fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fea:	2302      	movs	r3, #2
 8001fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffa:	f107 031c 	add.w	r3, r7, #28
 8001ffe:	4619      	mov	r1, r3
 8002000:	481e      	ldr	r0, [pc, #120]	; (800207c <HAL_TIM_Encoder_MspInit+0xf0>)
 8002002:	f000 fc53 	bl	80028ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002006:	e030      	b.n	800206a <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a1c      	ldr	r2, [pc, #112]	; (8002080 <HAL_TIM_Encoder_MspInit+0xf4>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d12b      	bne.n	800206a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	4b18      	ldr	r3, [pc, #96]	; (8002078 <HAL_TIM_Encoder_MspInit+0xec>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	4a17      	ldr	r2, [pc, #92]	; (8002078 <HAL_TIM_Encoder_MspInit+0xec>)
 800201c:	f043 0304 	orr.w	r3, r3, #4
 8002020:	6413      	str	r3, [r2, #64]	; 0x40
 8002022:	4b15      	ldr	r3, [pc, #84]	; (8002078 <HAL_TIM_Encoder_MspInit+0xec>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f003 0304 	and.w	r3, r3, #4
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	4b11      	ldr	r3, [pc, #68]	; (8002078 <HAL_TIM_Encoder_MspInit+0xec>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	4a10      	ldr	r2, [pc, #64]	; (8002078 <HAL_TIM_Encoder_MspInit+0xec>)
 8002038:	f043 0302 	orr.w	r3, r3, #2
 800203c:	6313      	str	r3, [r2, #48]	; 0x30
 800203e:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <HAL_TIM_Encoder_MspInit+0xec>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_Encoder2A_Pin|TIM4_CH1_Encoder2B_Pin;
 800204a:	23c0      	movs	r3, #192	; 0xc0
 800204c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204e:	2302      	movs	r3, #2
 8002050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002056:	2300      	movs	r3, #0
 8002058:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800205a:	2302      	movs	r3, #2
 800205c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800205e:	f107 031c 	add.w	r3, r7, #28
 8002062:	4619      	mov	r1, r3
 8002064:	4807      	ldr	r0, [pc, #28]	; (8002084 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002066:	f000 fc21 	bl	80028ac <HAL_GPIO_Init>
}
 800206a:	bf00      	nop
 800206c:	3730      	adds	r7, #48	; 0x30
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40000400 	.word	0x40000400
 8002078:	40023800 	.word	0x40023800
 800207c:	40020000 	.word	0x40020000
 8002080:	40000800 	.word	0x40000800
 8002084:	40020400 	.word	0x40020400

08002088 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002088:	b480      	push	{r7}
 800208a:	b087      	sub	sp, #28
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a1f      	ldr	r2, [pc, #124]	; (8002114 <HAL_TIM_Base_MspInit+0x8c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d10e      	bne.n	80020b8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
 800209e:	4b1e      	ldr	r3, [pc, #120]	; (8002118 <HAL_TIM_Base_MspInit+0x90>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	4a1d      	ldr	r2, [pc, #116]	; (8002118 <HAL_TIM_Base_MspInit+0x90>)
 80020a4:	f043 0308 	orr.w	r3, r3, #8
 80020a8:	6413      	str	r3, [r2, #64]	; 0x40
 80020aa:	4b1b      	ldr	r3, [pc, #108]	; (8002118 <HAL_TIM_Base_MspInit+0x90>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	617b      	str	r3, [r7, #20]
 80020b4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80020b6:	e026      	b.n	8002106 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM10)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a17      	ldr	r2, [pc, #92]	; (800211c <HAL_TIM_Base_MspInit+0x94>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d10e      	bne.n	80020e0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]
 80020c6:	4b14      	ldr	r3, [pc, #80]	; (8002118 <HAL_TIM_Base_MspInit+0x90>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	4a13      	ldr	r2, [pc, #76]	; (8002118 <HAL_TIM_Base_MspInit+0x90>)
 80020cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d0:	6453      	str	r3, [r2, #68]	; 0x44
 80020d2:	4b11      	ldr	r3, [pc, #68]	; (8002118 <HAL_TIM_Base_MspInit+0x90>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	613b      	str	r3, [r7, #16]
 80020dc:	693b      	ldr	r3, [r7, #16]
}
 80020de:	e012      	b.n	8002106 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM11)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a0e      	ldr	r2, [pc, #56]	; (8002120 <HAL_TIM_Base_MspInit+0x98>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d10d      	bne.n	8002106 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <HAL_TIM_Base_MspInit+0x90>)
 80020f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f2:	4a09      	ldr	r2, [pc, #36]	; (8002118 <HAL_TIM_Base_MspInit+0x90>)
 80020f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020f8:	6453      	str	r3, [r2, #68]	; 0x44
 80020fa:	4b07      	ldr	r3, [pc, #28]	; (8002118 <HAL_TIM_Base_MspInit+0x90>)
 80020fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
}
 8002106:	bf00      	nop
 8002108:	371c      	adds	r7, #28
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40000c00 	.word	0x40000c00
 8002118:	40023800 	.word	0x40023800
 800211c:	40014400 	.word	0x40014400
 8002120:	40014800 	.word	0x40014800

08002124 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b08c      	sub	sp, #48	; 0x30
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212c:	f107 031c 	add.w	r3, r7, #28
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a57      	ldr	r2, [pc, #348]	; (80022a0 <HAL_TIM_MspPostInit+0x17c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d11f      	bne.n	8002186 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	61bb      	str	r3, [r7, #24]
 800214a:	4b56      	ldr	r3, [pc, #344]	; (80022a4 <HAL_TIM_MspPostInit+0x180>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	4a55      	ldr	r2, [pc, #340]	; (80022a4 <HAL_TIM_MspPostInit+0x180>)
 8002150:	f043 0301 	orr.w	r3, r3, #1
 8002154:	6313      	str	r3, [r2, #48]	; 0x30
 8002156:	4b53      	ldr	r3, [pc, #332]	; (80022a4 <HAL_TIM_MspPostInit+0x180>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	61bb      	str	r3, [r7, #24]
 8002160:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_ELPWMR_Pin|TIM1_CH4ELPWML_Pin;
 8002162:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8002166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002168:	2302      	movs	r3, #2
 800216a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002170:	2300      	movs	r3, #0
 8002172:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002174:	2301      	movs	r3, #1
 8002176:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002178:	f107 031c 	add.w	r3, r7, #28
 800217c:	4619      	mov	r1, r3
 800217e:	484a      	ldr	r0, [pc, #296]	; (80022a8 <HAL_TIM_MspPostInit+0x184>)
 8002180:	f000 fb94 	bl	80028ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8002184:	e088      	b.n	8002298 <HAL_TIM_MspPostInit+0x174>
  else if(htim->Instance==TIM2)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800218e:	d13c      	bne.n	800220a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	4b43      	ldr	r3, [pc, #268]	; (80022a4 <HAL_TIM_MspPostInit+0x180>)
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	4a42      	ldr	r2, [pc, #264]	; (80022a4 <HAL_TIM_MspPostInit+0x180>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	6313      	str	r3, [r2, #48]	; 0x30
 80021a0:	4b40      	ldr	r3, [pc, #256]	; (80022a4 <HAL_TIM_MspPostInit+0x180>)
 80021a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	617b      	str	r3, [r7, #20]
 80021aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ac:	2300      	movs	r3, #0
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	4b3c      	ldr	r3, [pc, #240]	; (80022a4 <HAL_TIM_MspPostInit+0x180>)
 80021b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b4:	4a3b      	ldr	r2, [pc, #236]	; (80022a4 <HAL_TIM_MspPostInit+0x180>)
 80021b6:	f043 0302 	orr.w	r3, r3, #2
 80021ba:	6313      	str	r3, [r2, #48]	; 0x30
 80021bc:	4b39      	ldr	r3, [pc, #228]	; (80022a4 <HAL_TIM_MspPostInit+0x180>)
 80021be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	613b      	str	r3, [r7, #16]
 80021c6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM1_CH2ERPWML_Pin;
 80021c8:	2320      	movs	r3, #32
 80021ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021cc:	2302      	movs	r3, #2
 80021ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d4:	2300      	movs	r3, #0
 80021d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021d8:	2301      	movs	r3, #1
 80021da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM1_CH2ERPWML_GPIO_Port, &GPIO_InitStruct);
 80021dc:	f107 031c 	add.w	r3, r7, #28
 80021e0:	4619      	mov	r1, r3
 80021e2:	4831      	ldr	r0, [pc, #196]	; (80022a8 <HAL_TIM_MspPostInit+0x184>)
 80021e4:	f000 fb62 	bl	80028ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM2_CH2_ERPWMR_Pin;
 80021e8:	2308      	movs	r3, #8
 80021ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ec:	2302      	movs	r3, #2
 80021ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f4:	2300      	movs	r3, #0
 80021f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021f8:	2301      	movs	r3, #1
 80021fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH2_ERPWMR_GPIO_Port, &GPIO_InitStruct);
 80021fc:	f107 031c 	add.w	r3, r7, #28
 8002200:	4619      	mov	r1, r3
 8002202:	482a      	ldr	r0, [pc, #168]	; (80022ac <HAL_TIM_MspPostInit+0x188>)
 8002204:	f000 fb52 	bl	80028ac <HAL_GPIO_Init>
}
 8002208:	e046      	b.n	8002298 <HAL_TIM_MspPostInit+0x174>
  else if(htim->Instance==TIM5)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a28      	ldr	r2, [pc, #160]	; (80022b0 <HAL_TIM_MspPostInit+0x18c>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d11e      	bne.n	8002252 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002214:	2300      	movs	r3, #0
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	4b22      	ldr	r3, [pc, #136]	; (80022a4 <HAL_TIM_MspPostInit+0x180>)
 800221a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221c:	4a21      	ldr	r2, [pc, #132]	; (80022a4 <HAL_TIM_MspPostInit+0x180>)
 800221e:	f043 0301 	orr.w	r3, r3, #1
 8002222:	6313      	str	r3, [r2, #48]	; 0x30
 8002224:	4b1f      	ldr	r3, [pc, #124]	; (80022a4 <HAL_TIM_MspPostInit+0x180>)
 8002226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002230:	2307      	movs	r3, #7
 8002232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002234:	2302      	movs	r3, #2
 8002236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223c:	2300      	movs	r3, #0
 800223e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002240:	2302      	movs	r3, #2
 8002242:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002244:	f107 031c 	add.w	r3, r7, #28
 8002248:	4619      	mov	r1, r3
 800224a:	4817      	ldr	r0, [pc, #92]	; (80022a8 <HAL_TIM_MspPostInit+0x184>)
 800224c:	f000 fb2e 	bl	80028ac <HAL_GPIO_Init>
}
 8002250:	e022      	b.n	8002298 <HAL_TIM_MspPostInit+0x174>
  else if(htim->Instance==TIM9)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a17      	ldr	r2, [pc, #92]	; (80022b4 <HAL_TIM_MspPostInit+0x190>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d11d      	bne.n	8002298 <HAL_TIM_MspPostInit+0x174>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800225c:	2300      	movs	r3, #0
 800225e:	60bb      	str	r3, [r7, #8]
 8002260:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <HAL_TIM_MspPostInit+0x180>)
 8002262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002264:	4a0f      	ldr	r2, [pc, #60]	; (80022a4 <HAL_TIM_MspPostInit+0x180>)
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	6313      	str	r3, [r2, #48]	; 0x30
 800226c:	4b0d      	ldr	r3, [pc, #52]	; (80022a4 <HAL_TIM_MspPostInit+0x180>)
 800226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	60bb      	str	r3, [r7, #8]
 8002276:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002278:	2308      	movs	r3, #8
 800227a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227c:	2302      	movs	r3, #2
 800227e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002284:	2300      	movs	r3, #0
 8002286:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002288:	2303      	movs	r3, #3
 800228a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228c:	f107 031c 	add.w	r3, r7, #28
 8002290:	4619      	mov	r1, r3
 8002292:	4805      	ldr	r0, [pc, #20]	; (80022a8 <HAL_TIM_MspPostInit+0x184>)
 8002294:	f000 fb0a 	bl	80028ac <HAL_GPIO_Init>
}
 8002298:	bf00      	nop
 800229a:	3730      	adds	r7, #48	; 0x30
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40010000 	.word	0x40010000
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40020000 	.word	0x40020000
 80022ac:	40020400 	.word	0x40020400
 80022b0:	40000c00 	.word	0x40000c00
 80022b4:	40014000 	.word	0x40014000

080022b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08a      	sub	sp, #40	; 0x28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c0:	f107 0314 	add.w	r3, r7, #20
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a1d      	ldr	r2, [pc, #116]	; (800234c <HAL_UART_MspInit+0x94>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d134      	bne.n	8002344 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	4b1c      	ldr	r3, [pc, #112]	; (8002350 <HAL_UART_MspInit+0x98>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	4a1b      	ldr	r2, [pc, #108]	; (8002350 <HAL_UART_MspInit+0x98>)
 80022e4:	f043 0310 	orr.w	r3, r3, #16
 80022e8:	6453      	str	r3, [r2, #68]	; 0x44
 80022ea:	4b19      	ldr	r3, [pc, #100]	; (8002350 <HAL_UART_MspInit+0x98>)
 80022ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ee:	f003 0310 	and.w	r3, r3, #16
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	4b15      	ldr	r3, [pc, #84]	; (8002350 <HAL_UART_MspInit+0x98>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	4a14      	ldr	r2, [pc, #80]	; (8002350 <HAL_UART_MspInit+0x98>)
 8002300:	f043 0301 	orr.w	r3, r3, #1
 8002304:	6313      	str	r3, [r2, #48]	; 0x30
 8002306:	4b12      	ldr	r3, [pc, #72]	; (8002350 <HAL_UART_MspInit+0x98>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002312:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002318:	2302      	movs	r3, #2
 800231a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002320:	2303      	movs	r3, #3
 8002322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002324:	2307      	movs	r3, #7
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	4619      	mov	r1, r3
 800232e:	4809      	ldr	r0, [pc, #36]	; (8002354 <HAL_UART_MspInit+0x9c>)
 8002330:	f000 fabc 	bl	80028ac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002334:	2200      	movs	r2, #0
 8002336:	2100      	movs	r1, #0
 8002338:	2025      	movs	r0, #37	; 0x25
 800233a:	f000 f9ee 	bl	800271a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800233e:	2025      	movs	r0, #37	; 0x25
 8002340:	f000 fa07 	bl	8002752 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002344:	bf00      	nop
 8002346:	3728      	adds	r7, #40	; 0x28
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40011000 	.word	0x40011000
 8002350:	40023800 	.word	0x40023800
 8002354:	40020000 	.word	0x40020000

08002358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800235c:	e7fe      	b.n	800235c <NMI_Handler+0x4>

0800235e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800235e:	b480      	push	{r7}
 8002360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002362:	e7fe      	b.n	8002362 <HardFault_Handler+0x4>

08002364 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002368:	e7fe      	b.n	8002368 <MemManage_Handler+0x4>

0800236a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800236a:	b480      	push	{r7}
 800236c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800236e:	e7fe      	b.n	800236e <BusFault_Handler+0x4>

08002370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002374:	e7fe      	b.n	8002374 <UsageFault_Handler+0x4>

08002376 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002376:	b480      	push	{r7}
 8002378:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800237a:	bf00      	nop
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002388:	bf00      	nop
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002392:	b480      	push	{r7}
 8002394:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002396:	bf00      	nop
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023a4:	f000 f89a 	bl	80024dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023a8:	bf00      	nop
 80023aa:	bd80      	pop	{r7, pc}

080023ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023b0:	4802      	ldr	r0, [pc, #8]	; (80023bc <USART1_IRQHandler+0x10>)
 80023b2:	f003 fab9 	bl	8005928 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	200002d8 	.word	0x200002d8

080023c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023c4:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <SystemInit+0x20>)
 80023c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ca:	4a05      	ldr	r2, [pc, #20]	; (80023e0 <SystemInit+0x20>)
 80023cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023d4:	bf00      	nop
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800241c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80023e8:	f7ff ffea 	bl	80023c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023ec:	480c      	ldr	r0, [pc, #48]	; (8002420 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023ee:	490d      	ldr	r1, [pc, #52]	; (8002424 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023f0:	4a0d      	ldr	r2, [pc, #52]	; (8002428 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023f4:	e002      	b.n	80023fc <LoopCopyDataInit>

080023f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023fa:	3304      	adds	r3, #4

080023fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002400:	d3f9      	bcc.n	80023f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002402:	4a0a      	ldr	r2, [pc, #40]	; (800242c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002404:	4c0a      	ldr	r4, [pc, #40]	; (8002430 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002406:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002408:	e001      	b.n	800240e <LoopFillZerobss>

0800240a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800240a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800240c:	3204      	adds	r2, #4

0800240e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800240e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002410:	d3fb      	bcc.n	800240a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002412:	f004 f9e7 	bl	80067e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002416:	f7fe fd23 	bl	8000e60 <main>
  bx  lr    
 800241a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800241c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002420:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002424:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8002428:	08006970 	.word	0x08006970
  ldr r2, =_sbss
 800242c:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8002430:	20000330 	.word	0x20000330

08002434 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002434:	e7fe      	b.n	8002434 <ADC_IRQHandler>
	...

08002438 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800243c:	4b0e      	ldr	r3, [pc, #56]	; (8002478 <HAL_Init+0x40>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a0d      	ldr	r2, [pc, #52]	; (8002478 <HAL_Init+0x40>)
 8002442:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002446:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <HAL_Init+0x40>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <HAL_Init+0x40>)
 800244e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002452:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002454:	4b08      	ldr	r3, [pc, #32]	; (8002478 <HAL_Init+0x40>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a07      	ldr	r2, [pc, #28]	; (8002478 <HAL_Init+0x40>)
 800245a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800245e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002460:	2003      	movs	r0, #3
 8002462:	f000 f94f 	bl	8002704 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002466:	200f      	movs	r0, #15
 8002468:	f000 f808 	bl	800247c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800246c:	f7ff fcd2 	bl	8001e14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40023c00 	.word	0x40023c00

0800247c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002484:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <HAL_InitTick+0x54>)
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <HAL_InitTick+0x58>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	4619      	mov	r1, r3
 800248e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002492:	fbb3 f3f1 	udiv	r3, r3, r1
 8002496:	fbb2 f3f3 	udiv	r3, r2, r3
 800249a:	4618      	mov	r0, r3
 800249c:	f000 f967 	bl	800276e <HAL_SYSTICK_Config>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e00e      	b.n	80024c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b0f      	cmp	r3, #15
 80024ae:	d80a      	bhi.n	80024c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024b0:	2200      	movs	r2, #0
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	f04f 30ff 	mov.w	r0, #4294967295
 80024b8:	f000 f92f 	bl	800271a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024bc:	4a06      	ldr	r2, [pc, #24]	; (80024d8 <HAL_InitTick+0x5c>)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	e000      	b.n	80024c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	2000001c 	.word	0x2000001c
 80024d4:	20000024 	.word	0x20000024
 80024d8:	20000020 	.word	0x20000020

080024dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024e0:	4b06      	ldr	r3, [pc, #24]	; (80024fc <HAL_IncTick+0x20>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	461a      	mov	r2, r3
 80024e6:	4b06      	ldr	r3, [pc, #24]	; (8002500 <HAL_IncTick+0x24>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4413      	add	r3, r2
 80024ec:	4a04      	ldr	r2, [pc, #16]	; (8002500 <HAL_IncTick+0x24>)
 80024ee:	6013      	str	r3, [r2, #0]
}
 80024f0:	bf00      	nop
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	20000024 	.word	0x20000024
 8002500:	2000032c 	.word	0x2000032c

08002504 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return uwTick;
 8002508:	4b03      	ldr	r3, [pc, #12]	; (8002518 <HAL_GetTick+0x14>)
 800250a:	681b      	ldr	r3, [r3, #0]
}
 800250c:	4618      	mov	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	2000032c 	.word	0x2000032c

0800251c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002524:	f7ff ffee 	bl	8002504 <HAL_GetTick>
 8002528:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002534:	d005      	beq.n	8002542 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002536:	4b0a      	ldr	r3, [pc, #40]	; (8002560 <HAL_Delay+0x44>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4413      	add	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002542:	bf00      	nop
 8002544:	f7ff ffde 	bl	8002504 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	429a      	cmp	r2, r3
 8002552:	d8f7      	bhi.n	8002544 <HAL_Delay+0x28>
  {
  }
}
 8002554:	bf00      	nop
 8002556:	bf00      	nop
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20000024 	.word	0x20000024

08002564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002574:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002580:	4013      	ands	r3, r2
 8002582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800258c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002596:	4a04      	ldr	r2, [pc, #16]	; (80025a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	60d3      	str	r3, [r2, #12]
}
 800259c:	bf00      	nop
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	e000ed00 	.word	0xe000ed00

080025ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025b0:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <__NVIC_GetPriorityGrouping+0x18>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	0a1b      	lsrs	r3, r3, #8
 80025b6:	f003 0307 	and.w	r3, r3, #7
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	db0b      	blt.n	80025f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025da:	79fb      	ldrb	r3, [r7, #7]
 80025dc:	f003 021f 	and.w	r2, r3, #31
 80025e0:	4907      	ldr	r1, [pc, #28]	; (8002600 <__NVIC_EnableIRQ+0x38>)
 80025e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e6:	095b      	lsrs	r3, r3, #5
 80025e8:	2001      	movs	r0, #1
 80025ea:	fa00 f202 	lsl.w	r2, r0, r2
 80025ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	e000e100 	.word	0xe000e100

08002604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	6039      	str	r1, [r7, #0]
 800260e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002614:	2b00      	cmp	r3, #0
 8002616:	db0a      	blt.n	800262e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	b2da      	uxtb	r2, r3
 800261c:	490c      	ldr	r1, [pc, #48]	; (8002650 <__NVIC_SetPriority+0x4c>)
 800261e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002622:	0112      	lsls	r2, r2, #4
 8002624:	b2d2      	uxtb	r2, r2
 8002626:	440b      	add	r3, r1
 8002628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800262c:	e00a      	b.n	8002644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	b2da      	uxtb	r2, r3
 8002632:	4908      	ldr	r1, [pc, #32]	; (8002654 <__NVIC_SetPriority+0x50>)
 8002634:	79fb      	ldrb	r3, [r7, #7]
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	3b04      	subs	r3, #4
 800263c:	0112      	lsls	r2, r2, #4
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	440b      	add	r3, r1
 8002642:	761a      	strb	r2, [r3, #24]
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	e000e100 	.word	0xe000e100
 8002654:	e000ed00 	.word	0xe000ed00

08002658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002658:	b480      	push	{r7}
 800265a:	b089      	sub	sp, #36	; 0x24
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	f1c3 0307 	rsb	r3, r3, #7
 8002672:	2b04      	cmp	r3, #4
 8002674:	bf28      	it	cs
 8002676:	2304      	movcs	r3, #4
 8002678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	3304      	adds	r3, #4
 800267e:	2b06      	cmp	r3, #6
 8002680:	d902      	bls.n	8002688 <NVIC_EncodePriority+0x30>
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	3b03      	subs	r3, #3
 8002686:	e000      	b.n	800268a <NVIC_EncodePriority+0x32>
 8002688:	2300      	movs	r3, #0
 800268a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800268c:	f04f 32ff 	mov.w	r2, #4294967295
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43da      	mvns	r2, r3
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	401a      	ands	r2, r3
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026a0:	f04f 31ff 	mov.w	r1, #4294967295
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	fa01 f303 	lsl.w	r3, r1, r3
 80026aa:	43d9      	mvns	r1, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b0:	4313      	orrs	r3, r2
         );
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3724      	adds	r7, #36	; 0x24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
	...

080026c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026d0:	d301      	bcc.n	80026d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026d2:	2301      	movs	r3, #1
 80026d4:	e00f      	b.n	80026f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026d6:	4a0a      	ldr	r2, [pc, #40]	; (8002700 <SysTick_Config+0x40>)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3b01      	subs	r3, #1
 80026dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026de:	210f      	movs	r1, #15
 80026e0:	f04f 30ff 	mov.w	r0, #4294967295
 80026e4:	f7ff ff8e 	bl	8002604 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026e8:	4b05      	ldr	r3, [pc, #20]	; (8002700 <SysTick_Config+0x40>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ee:	4b04      	ldr	r3, [pc, #16]	; (8002700 <SysTick_Config+0x40>)
 80026f0:	2207      	movs	r2, #7
 80026f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	e000e010 	.word	0xe000e010

08002704 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f7ff ff29 	bl	8002564 <__NVIC_SetPriorityGrouping>
}
 8002712:	bf00      	nop
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800271a:	b580      	push	{r7, lr}
 800271c:	b086      	sub	sp, #24
 800271e:	af00      	add	r7, sp, #0
 8002720:	4603      	mov	r3, r0
 8002722:	60b9      	str	r1, [r7, #8]
 8002724:	607a      	str	r2, [r7, #4]
 8002726:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800272c:	f7ff ff3e 	bl	80025ac <__NVIC_GetPriorityGrouping>
 8002730:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	68b9      	ldr	r1, [r7, #8]
 8002736:	6978      	ldr	r0, [r7, #20]
 8002738:	f7ff ff8e 	bl	8002658 <NVIC_EncodePriority>
 800273c:	4602      	mov	r2, r0
 800273e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002742:	4611      	mov	r1, r2
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff ff5d 	bl	8002604 <__NVIC_SetPriority>
}
 800274a:	bf00      	nop
 800274c:	3718      	adds	r7, #24
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
 8002758:	4603      	mov	r3, r0
 800275a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800275c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff ff31 	bl	80025c8 <__NVIC_EnableIRQ>
}
 8002766:	bf00      	nop
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b082      	sub	sp, #8
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7ff ffa2 	bl	80026c0 <SysTick_Config>
 800277c:	4603      	mov	r3, r0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b084      	sub	sp, #16
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002792:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002794:	f7ff feb6 	bl	8002504 <HAL_GetTick>
 8002798:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d008      	beq.n	80027b8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2280      	movs	r2, #128	; 0x80
 80027aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e052      	b.n	800285e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 0216 	bic.w	r2, r2, #22
 80027c6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695a      	ldr	r2, [r3, #20]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027d6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d103      	bne.n	80027e8 <HAL_DMA_Abort+0x62>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d007      	beq.n	80027f8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0208 	bic.w	r2, r2, #8
 80027f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0201 	bic.w	r2, r2, #1
 8002806:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002808:	e013      	b.n	8002832 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800280a:	f7ff fe7b 	bl	8002504 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b05      	cmp	r3, #5
 8002816:	d90c      	bls.n	8002832 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2220      	movs	r2, #32
 800281c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2203      	movs	r2, #3
 8002822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e015      	b.n	800285e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1e4      	bne.n	800280a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002844:	223f      	movs	r2, #63	; 0x3f
 8002846:	409a      	lsls	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d004      	beq.n	8002884 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2280      	movs	r2, #128	; 0x80
 800287e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e00c      	b.n	800289e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2205      	movs	r2, #5
 8002888:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 0201 	bic.w	r2, r2, #1
 800289a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
	...

080028ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b089      	sub	sp, #36	; 0x24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028be:	2300      	movs	r3, #0
 80028c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028c2:	2300      	movs	r3, #0
 80028c4:	61fb      	str	r3, [r7, #28]
 80028c6:	e159      	b.n	8002b7c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028c8:	2201      	movs	r2, #1
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	4013      	ands	r3, r2
 80028da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	f040 8148 	bne.w	8002b76 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d005      	beq.n	80028fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d130      	bne.n	8002960 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	2203      	movs	r2, #3
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43db      	mvns	r3, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4013      	ands	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	68da      	ldr	r2, [r3, #12]
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4313      	orrs	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002934:	2201      	movs	r2, #1
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	43db      	mvns	r3, r3
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4013      	ands	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	091b      	lsrs	r3, r3, #4
 800294a:	f003 0201 	and.w	r2, r3, #1
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4313      	orrs	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f003 0303 	and.w	r3, r3, #3
 8002968:	2b03      	cmp	r3, #3
 800296a:	d017      	beq.n	800299c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	2203      	movs	r2, #3
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4013      	ands	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4313      	orrs	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f003 0303 	and.w	r3, r3, #3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d123      	bne.n	80029f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	08da      	lsrs	r2, r3, #3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3208      	adds	r2, #8
 80029b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	220f      	movs	r2, #15
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4013      	ands	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	691a      	ldr	r2, [r3, #16]
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4313      	orrs	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	08da      	lsrs	r2, r3, #3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3208      	adds	r2, #8
 80029ea:	69b9      	ldr	r1, [r7, #24]
 80029ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	2203      	movs	r2, #3
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43db      	mvns	r3, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4013      	ands	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 0203 	and.w	r2, r3, #3
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 80a2 	beq.w	8002b76 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	4b57      	ldr	r3, [pc, #348]	; (8002b94 <HAL_GPIO_Init+0x2e8>)
 8002a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3a:	4a56      	ldr	r2, [pc, #344]	; (8002b94 <HAL_GPIO_Init+0x2e8>)
 8002a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a40:	6453      	str	r3, [r2, #68]	; 0x44
 8002a42:	4b54      	ldr	r3, [pc, #336]	; (8002b94 <HAL_GPIO_Init+0x2e8>)
 8002a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a4e:	4a52      	ldr	r2, [pc, #328]	; (8002b98 <HAL_GPIO_Init+0x2ec>)
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	089b      	lsrs	r3, r3, #2
 8002a54:	3302      	adds	r3, #2
 8002a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	220f      	movs	r2, #15
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a49      	ldr	r2, [pc, #292]	; (8002b9c <HAL_GPIO_Init+0x2f0>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d019      	beq.n	8002aae <HAL_GPIO_Init+0x202>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a48      	ldr	r2, [pc, #288]	; (8002ba0 <HAL_GPIO_Init+0x2f4>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d013      	beq.n	8002aaa <HAL_GPIO_Init+0x1fe>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a47      	ldr	r2, [pc, #284]	; (8002ba4 <HAL_GPIO_Init+0x2f8>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d00d      	beq.n	8002aa6 <HAL_GPIO_Init+0x1fa>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a46      	ldr	r2, [pc, #280]	; (8002ba8 <HAL_GPIO_Init+0x2fc>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d007      	beq.n	8002aa2 <HAL_GPIO_Init+0x1f6>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a45      	ldr	r2, [pc, #276]	; (8002bac <HAL_GPIO_Init+0x300>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d101      	bne.n	8002a9e <HAL_GPIO_Init+0x1f2>
 8002a9a:	2304      	movs	r3, #4
 8002a9c:	e008      	b.n	8002ab0 <HAL_GPIO_Init+0x204>
 8002a9e:	2307      	movs	r3, #7
 8002aa0:	e006      	b.n	8002ab0 <HAL_GPIO_Init+0x204>
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e004      	b.n	8002ab0 <HAL_GPIO_Init+0x204>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	e002      	b.n	8002ab0 <HAL_GPIO_Init+0x204>
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <HAL_GPIO_Init+0x204>
 8002aae:	2300      	movs	r3, #0
 8002ab0:	69fa      	ldr	r2, [r7, #28]
 8002ab2:	f002 0203 	and.w	r2, r2, #3
 8002ab6:	0092      	lsls	r2, r2, #2
 8002ab8:	4093      	lsls	r3, r2
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ac0:	4935      	ldr	r1, [pc, #212]	; (8002b98 <HAL_GPIO_Init+0x2ec>)
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	089b      	lsrs	r3, r3, #2
 8002ac6:	3302      	adds	r3, #2
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ace:	4b38      	ldr	r3, [pc, #224]	; (8002bb0 <HAL_GPIO_Init+0x304>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4013      	ands	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002af2:	4a2f      	ldr	r2, [pc, #188]	; (8002bb0 <HAL_GPIO_Init+0x304>)
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002af8:	4b2d      	ldr	r3, [pc, #180]	; (8002bb0 <HAL_GPIO_Init+0x304>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	43db      	mvns	r3, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4013      	ands	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b1c:	4a24      	ldr	r2, [pc, #144]	; (8002bb0 <HAL_GPIO_Init+0x304>)
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b22:	4b23      	ldr	r3, [pc, #140]	; (8002bb0 <HAL_GPIO_Init+0x304>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b46:	4a1a      	ldr	r2, [pc, #104]	; (8002bb0 <HAL_GPIO_Init+0x304>)
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b4c:	4b18      	ldr	r3, [pc, #96]	; (8002bb0 <HAL_GPIO_Init+0x304>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	43db      	mvns	r3, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b70:	4a0f      	ldr	r2, [pc, #60]	; (8002bb0 <HAL_GPIO_Init+0x304>)
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	61fb      	str	r3, [r7, #28]
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	2b0f      	cmp	r3, #15
 8002b80:	f67f aea2 	bls.w	80028c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b84:	bf00      	nop
 8002b86:	bf00      	nop
 8002b88:	3724      	adds	r7, #36	; 0x24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	40023800 	.word	0x40023800
 8002b98:	40013800 	.word	0x40013800
 8002b9c:	40020000 	.word	0x40020000
 8002ba0:	40020400 	.word	0x40020400
 8002ba4:	40020800 	.word	0x40020800
 8002ba8:	40020c00 	.word	0x40020c00
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	40013c00 	.word	0x40013c00

08002bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	807b      	strh	r3, [r7, #2]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bc4:	787b      	ldrb	r3, [r7, #1]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bca:	887a      	ldrh	r2, [r7, #2]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bd0:	e003      	b.n	8002bda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bd2:	887b      	ldrh	r3, [r7, #2]
 8002bd4:	041a      	lsls	r2, r3, #16
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	619a      	str	r2, [r3, #24]
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
	...

08002be8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e12b      	b.n	8002e52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d106      	bne.n	8002c14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7ff f928 	bl	8001e64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2224      	movs	r2, #36	; 0x24
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0201 	bic.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c4c:	f001 fda0 	bl	8004790 <HAL_RCC_GetPCLK1Freq>
 8002c50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	4a81      	ldr	r2, [pc, #516]	; (8002e5c <HAL_I2C_Init+0x274>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d807      	bhi.n	8002c6c <HAL_I2C_Init+0x84>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4a80      	ldr	r2, [pc, #512]	; (8002e60 <HAL_I2C_Init+0x278>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	bf94      	ite	ls
 8002c64:	2301      	movls	r3, #1
 8002c66:	2300      	movhi	r3, #0
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	e006      	b.n	8002c7a <HAL_I2C_Init+0x92>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4a7d      	ldr	r2, [pc, #500]	; (8002e64 <HAL_I2C_Init+0x27c>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	bf94      	ite	ls
 8002c74:	2301      	movls	r3, #1
 8002c76:	2300      	movhi	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e0e7      	b.n	8002e52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	4a78      	ldr	r2, [pc, #480]	; (8002e68 <HAL_I2C_Init+0x280>)
 8002c86:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8a:	0c9b      	lsrs	r3, r3, #18
 8002c8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	4a6a      	ldr	r2, [pc, #424]	; (8002e5c <HAL_I2C_Init+0x274>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d802      	bhi.n	8002cbc <HAL_I2C_Init+0xd4>
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	e009      	b.n	8002cd0 <HAL_I2C_Init+0xe8>
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cc2:	fb02 f303 	mul.w	r3, r2, r3
 8002cc6:	4a69      	ldr	r2, [pc, #420]	; (8002e6c <HAL_I2C_Init+0x284>)
 8002cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ccc:	099b      	lsrs	r3, r3, #6
 8002cce:	3301      	adds	r3, #1
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6812      	ldr	r2, [r2, #0]
 8002cd4:	430b      	orrs	r3, r1
 8002cd6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ce2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	495c      	ldr	r1, [pc, #368]	; (8002e5c <HAL_I2C_Init+0x274>)
 8002cec:	428b      	cmp	r3, r1
 8002cee:	d819      	bhi.n	8002d24 <HAL_I2C_Init+0x13c>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	1e59      	subs	r1, r3, #1
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cfe:	1c59      	adds	r1, r3, #1
 8002d00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d04:	400b      	ands	r3, r1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00a      	beq.n	8002d20 <HAL_I2C_Init+0x138>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	1e59      	subs	r1, r3, #1
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d18:	3301      	adds	r3, #1
 8002d1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d1e:	e051      	b.n	8002dc4 <HAL_I2C_Init+0x1dc>
 8002d20:	2304      	movs	r3, #4
 8002d22:	e04f      	b.n	8002dc4 <HAL_I2C_Init+0x1dc>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d111      	bne.n	8002d50 <HAL_I2C_Init+0x168>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	1e58      	subs	r0, r3, #1
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6859      	ldr	r1, [r3, #4]
 8002d34:	460b      	mov	r3, r1
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	440b      	add	r3, r1
 8002d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d3e:	3301      	adds	r3, #1
 8002d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	bf0c      	ite	eq
 8002d48:	2301      	moveq	r3, #1
 8002d4a:	2300      	movne	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	e012      	b.n	8002d76 <HAL_I2C_Init+0x18e>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	1e58      	subs	r0, r3, #1
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6859      	ldr	r1, [r3, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	0099      	lsls	r1, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d66:	3301      	adds	r3, #1
 8002d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	bf0c      	ite	eq
 8002d70:	2301      	moveq	r3, #1
 8002d72:	2300      	movne	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <HAL_I2C_Init+0x196>
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e022      	b.n	8002dc4 <HAL_I2C_Init+0x1dc>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10e      	bne.n	8002da4 <HAL_I2C_Init+0x1bc>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	1e58      	subs	r0, r3, #1
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6859      	ldr	r1, [r3, #4]
 8002d8e:	460b      	mov	r3, r1
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	440b      	add	r3, r1
 8002d94:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d98:	3301      	adds	r3, #1
 8002d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002da2:	e00f      	b.n	8002dc4 <HAL_I2C_Init+0x1dc>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	1e58      	subs	r0, r3, #1
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6859      	ldr	r1, [r3, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	0099      	lsls	r1, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dba:	3301      	adds	r3, #1
 8002dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	6809      	ldr	r1, [r1, #0]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69da      	ldr	r2, [r3, #28]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002df2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6911      	ldr	r1, [r2, #16]
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	68d2      	ldr	r2, [r2, #12]
 8002dfe:	4311      	orrs	r1, r2
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6812      	ldr	r2, [r2, #0]
 8002e04:	430b      	orrs	r3, r1
 8002e06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	695a      	ldr	r2, [r3, #20]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0201 	orr.w	r2, r2, #1
 8002e32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	000186a0 	.word	0x000186a0
 8002e60:	001e847f 	.word	0x001e847f
 8002e64:	003d08ff 	.word	0x003d08ff
 8002e68:	431bde83 	.word	0x431bde83
 8002e6c:	10624dd3 	.word	0x10624dd3

08002e70 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b088      	sub	sp, #32
 8002e74:	af02      	add	r7, sp, #8
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	607a      	str	r2, [r7, #4]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	817b      	strh	r3, [r7, #10]
 8002e80:	4613      	mov	r3, r2
 8002e82:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e84:	f7ff fb3e 	bl	8002504 <HAL_GetTick>
 8002e88:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b20      	cmp	r3, #32
 8002e94:	f040 80e0 	bne.w	8003058 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	2319      	movs	r3, #25
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	4970      	ldr	r1, [pc, #448]	; (8003064 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 fe0e 	bl	8003ac4 <I2C_WaitOnFlagUntilTimeout>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	e0d3      	b.n	800305a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_I2C_Master_Transmit+0x50>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e0cc      	b.n	800305a <HAL_I2C_Master_Transmit+0x1ea>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d007      	beq.n	8002ee6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f042 0201 	orr.w	r2, r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ef4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2221      	movs	r2, #33	; 0x21
 8002efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2210      	movs	r2, #16
 8002f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	893a      	ldrh	r2, [r7, #8]
 8002f16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	4a50      	ldr	r2, [pc, #320]	; (8003068 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f28:	8979      	ldrh	r1, [r7, #10]
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	6a3a      	ldr	r2, [r7, #32]
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f000 fbc8 	bl	80036c4 <I2C_MasterRequestWrite>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e08d      	b.n	800305a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f3e:	2300      	movs	r3, #0
 8002f40:	613b      	str	r3, [r7, #16]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	613b      	str	r3, [r7, #16]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	613b      	str	r3, [r7, #16]
 8002f52:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f54:	e066      	b.n	8003024 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	6a39      	ldr	r1, [r7, #32]
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 fecc 	bl	8003cf8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00d      	beq.n	8002f82 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d107      	bne.n	8002f7e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e06b      	b.n	800305a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	781a      	ldrb	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d11b      	bne.n	8002ff8 <HAL_I2C_Master_Transmit+0x188>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d017      	beq.n	8002ff8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	781a      	ldrb	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	6a39      	ldr	r1, [r7, #32]
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 fec3 	bl	8003d88 <I2C_WaitOnBTFFlagUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00d      	beq.n	8003024 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	2b04      	cmp	r3, #4
 800300e:	d107      	bne.n	8003020 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800301e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e01a      	b.n	800305a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003028:	2b00      	cmp	r3, #0
 800302a:	d194      	bne.n	8002f56 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800303a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2220      	movs	r2, #32
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003054:	2300      	movs	r3, #0
 8003056:	e000      	b.n	800305a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003058:	2302      	movs	r3, #2
  }
}
 800305a:	4618      	mov	r0, r3
 800305c:	3718      	adds	r7, #24
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	00100002 	.word	0x00100002
 8003068:	ffff0000 	.word	0xffff0000

0800306c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b088      	sub	sp, #32
 8003070:	af02      	add	r7, sp, #8
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	4608      	mov	r0, r1
 8003076:	4611      	mov	r1, r2
 8003078:	461a      	mov	r2, r3
 800307a:	4603      	mov	r3, r0
 800307c:	817b      	strh	r3, [r7, #10]
 800307e:	460b      	mov	r3, r1
 8003080:	813b      	strh	r3, [r7, #8]
 8003082:	4613      	mov	r3, r2
 8003084:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003086:	f7ff fa3d 	bl	8002504 <HAL_GetTick>
 800308a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b20      	cmp	r3, #32
 8003096:	f040 80d9 	bne.w	800324c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	2319      	movs	r3, #25
 80030a0:	2201      	movs	r2, #1
 80030a2:	496d      	ldr	r1, [pc, #436]	; (8003258 <HAL_I2C_Mem_Write+0x1ec>)
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 fd0d 	bl	8003ac4 <I2C_WaitOnFlagUntilTimeout>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80030b0:	2302      	movs	r3, #2
 80030b2:	e0cc      	b.n	800324e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d101      	bne.n	80030c2 <HAL_I2C_Mem_Write+0x56>
 80030be:	2302      	movs	r3, #2
 80030c0:	e0c5      	b.n	800324e <HAL_I2C_Mem_Write+0x1e2>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d007      	beq.n	80030e8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0201 	orr.w	r2, r2, #1
 80030e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2221      	movs	r2, #33	; 0x21
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2240      	movs	r2, #64	; 0x40
 8003104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6a3a      	ldr	r2, [r7, #32]
 8003112:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003118:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800311e:	b29a      	uxth	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	4a4d      	ldr	r2, [pc, #308]	; (800325c <HAL_I2C_Mem_Write+0x1f0>)
 8003128:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800312a:	88f8      	ldrh	r0, [r7, #6]
 800312c:	893a      	ldrh	r2, [r7, #8]
 800312e:	8979      	ldrh	r1, [r7, #10]
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	9301      	str	r3, [sp, #4]
 8003134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	4603      	mov	r3, r0
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 fb44 	bl	80037c8 <I2C_RequestMemoryWrite>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d052      	beq.n	80031ec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e081      	b.n	800324e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 fdd2 	bl	8003cf8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00d      	beq.n	8003176 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	2b04      	cmp	r3, #4
 8003160:	d107      	bne.n	8003172 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003170:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e06b      	b.n	800324e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	781a      	ldrb	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003190:	3b01      	subs	r3, #1
 8003192:	b29a      	uxth	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319c:	b29b      	uxth	r3, r3
 800319e:	3b01      	subs	r3, #1
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d11b      	bne.n	80031ec <HAL_I2C_Mem_Write+0x180>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d017      	beq.n	80031ec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	781a      	ldrb	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	1c5a      	adds	r2, r3, #1
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d6:	3b01      	subs	r3, #1
 80031d8:	b29a      	uxth	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	3b01      	subs	r3, #1
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1aa      	bne.n	800314a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f000 fdc5 	bl	8003d88 <I2C_WaitOnBTFFlagUntilTimeout>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00d      	beq.n	8003220 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	2b04      	cmp	r3, #4
 800320a:	d107      	bne.n	800321c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800321a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e016      	b.n	800324e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800322e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2220      	movs	r2, #32
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003248:	2300      	movs	r3, #0
 800324a:	e000      	b.n	800324e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800324c:	2302      	movs	r3, #2
  }
}
 800324e:	4618      	mov	r0, r3
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	00100002 	.word	0x00100002
 800325c:	ffff0000 	.word	0xffff0000

08003260 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b08c      	sub	sp, #48	; 0x30
 8003264:	af02      	add	r7, sp, #8
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	4608      	mov	r0, r1
 800326a:	4611      	mov	r1, r2
 800326c:	461a      	mov	r2, r3
 800326e:	4603      	mov	r3, r0
 8003270:	817b      	strh	r3, [r7, #10]
 8003272:	460b      	mov	r3, r1
 8003274:	813b      	strh	r3, [r7, #8]
 8003276:	4613      	mov	r3, r2
 8003278:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800327a:	f7ff f943 	bl	8002504 <HAL_GetTick>
 800327e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b20      	cmp	r3, #32
 800328a:	f040 8214 	bne.w	80036b6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	2319      	movs	r3, #25
 8003294:	2201      	movs	r2, #1
 8003296:	497b      	ldr	r1, [pc, #492]	; (8003484 <HAL_I2C_Mem_Read+0x224>)
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 fc13 	bl	8003ac4 <I2C_WaitOnFlagUntilTimeout>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80032a4:	2302      	movs	r3, #2
 80032a6:	e207      	b.n	80036b8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d101      	bne.n	80032b6 <HAL_I2C_Mem_Read+0x56>
 80032b2:	2302      	movs	r3, #2
 80032b4:	e200      	b.n	80036b8 <HAL_I2C_Mem_Read+0x458>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d007      	beq.n	80032dc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0201 	orr.w	r2, r2, #1
 80032da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2222      	movs	r2, #34	; 0x22
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2240      	movs	r2, #64	; 0x40
 80032f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003306:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800330c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4a5b      	ldr	r2, [pc, #364]	; (8003488 <HAL_I2C_Mem_Read+0x228>)
 800331c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800331e:	88f8      	ldrh	r0, [r7, #6]
 8003320:	893a      	ldrh	r2, [r7, #8]
 8003322:	8979      	ldrh	r1, [r7, #10]
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	9301      	str	r3, [sp, #4]
 8003328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	4603      	mov	r3, r0
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 fae0 	bl	80038f4 <I2C_RequestMemoryRead>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e1bc      	b.n	80036b8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003342:	2b00      	cmp	r3, #0
 8003344:	d113      	bne.n	800336e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003346:	2300      	movs	r3, #0
 8003348:	623b      	str	r3, [r7, #32]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	623b      	str	r3, [r7, #32]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	623b      	str	r3, [r7, #32]
 800335a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	e190      	b.n	8003690 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003372:	2b01      	cmp	r3, #1
 8003374:	d11b      	bne.n	80033ae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003384:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003386:	2300      	movs	r3, #0
 8003388:	61fb      	str	r3, [r7, #28]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	61fb      	str	r3, [r7, #28]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	61fb      	str	r3, [r7, #28]
 800339a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	e170      	b.n	8003690 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d11b      	bne.n	80033ee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033d6:	2300      	movs	r3, #0
 80033d8:	61bb      	str	r3, [r7, #24]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	61bb      	str	r3, [r7, #24]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	61bb      	str	r3, [r7, #24]
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	e150      	b.n	8003690 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ee:	2300      	movs	r3, #0
 80033f0:	617b      	str	r3, [r7, #20]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	617b      	str	r3, [r7, #20]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	617b      	str	r3, [r7, #20]
 8003402:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003404:	e144      	b.n	8003690 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340a:	2b03      	cmp	r3, #3
 800340c:	f200 80f1 	bhi.w	80035f2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003414:	2b01      	cmp	r3, #1
 8003416:	d123      	bne.n	8003460 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800341a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 fcfb 	bl	8003e18 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e145      	b.n	80036b8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691a      	ldr	r2, [r3, #16]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	b2d2      	uxtb	r2, r2
 8003438:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	1c5a      	adds	r2, r3, #1
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003448:	3b01      	subs	r3, #1
 800344a:	b29a      	uxth	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003454:	b29b      	uxth	r3, r3
 8003456:	3b01      	subs	r3, #1
 8003458:	b29a      	uxth	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800345e:	e117      	b.n	8003690 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003464:	2b02      	cmp	r3, #2
 8003466:	d14e      	bne.n	8003506 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346e:	2200      	movs	r2, #0
 8003470:	4906      	ldr	r1, [pc, #24]	; (800348c <HAL_I2C_Mem_Read+0x22c>)
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 fb26 	bl	8003ac4 <I2C_WaitOnFlagUntilTimeout>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d008      	beq.n	8003490 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e11a      	b.n	80036b8 <HAL_I2C_Mem_Read+0x458>
 8003482:	bf00      	nop
 8003484:	00100002 	.word	0x00100002
 8003488:	ffff0000 	.word	0xffff0000
 800348c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800349e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	691a      	ldr	r2, [r3, #16]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	1c5a      	adds	r2, r3, #1
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034bc:	3b01      	subs	r3, #1
 80034be:	b29a      	uxth	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	3b01      	subs	r3, #1
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	691a      	ldr	r2, [r3, #16]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	b2d2      	uxtb	r2, r2
 80034de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	1c5a      	adds	r2, r3, #1
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ee:	3b01      	subs	r3, #1
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	3b01      	subs	r3, #1
 80034fe:	b29a      	uxth	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003504:	e0c4      	b.n	8003690 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800350c:	2200      	movs	r2, #0
 800350e:	496c      	ldr	r1, [pc, #432]	; (80036c0 <HAL_I2C_Mem_Read+0x460>)
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 fad7 	bl	8003ac4 <I2C_WaitOnFlagUntilTimeout>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e0cb      	b.n	80036b8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800352e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	691a      	ldr	r2, [r3, #16]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	1c5a      	adds	r2, r3, #1
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354c:	3b01      	subs	r3, #1
 800354e:	b29a      	uxth	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003558:	b29b      	uxth	r3, r3
 800355a:	3b01      	subs	r3, #1
 800355c:	b29a      	uxth	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003568:	2200      	movs	r2, #0
 800356a:	4955      	ldr	r1, [pc, #340]	; (80036c0 <HAL_I2C_Mem_Read+0x460>)
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f000 faa9 	bl	8003ac4 <I2C_WaitOnFlagUntilTimeout>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e09d      	b.n	80036b8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800358a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	691a      	ldr	r2, [r3, #16]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	1c5a      	adds	r2, r3, #1
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a8:	3b01      	subs	r3, #1
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	3b01      	subs	r3, #1
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	691a      	ldr	r2, [r3, #16]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035da:	3b01      	subs	r3, #1
 80035dc:	b29a      	uxth	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	3b01      	subs	r3, #1
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035f0:	e04e      	b.n	8003690 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 fc0e 	bl	8003e18 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e058      	b.n	80036b8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	691a      	ldr	r2, [r3, #16]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	b2d2      	uxtb	r2, r2
 8003612:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003622:	3b01      	subs	r3, #1
 8003624:	b29a      	uxth	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362e:	b29b      	uxth	r3, r3
 8003630:	3b01      	subs	r3, #1
 8003632:	b29a      	uxth	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	f003 0304 	and.w	r3, r3, #4
 8003642:	2b04      	cmp	r3, #4
 8003644:	d124      	bne.n	8003690 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364a:	2b03      	cmp	r3, #3
 800364c:	d107      	bne.n	800365e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800365c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	691a      	ldr	r2, [r3, #16]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367a:	3b01      	subs	r3, #1
 800367c:	b29a      	uxth	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003686:	b29b      	uxth	r3, r3
 8003688:	3b01      	subs	r3, #1
 800368a:	b29a      	uxth	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003694:	2b00      	cmp	r3, #0
 8003696:	f47f aeb6 	bne.w	8003406 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2220      	movs	r2, #32
 800369e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036b2:	2300      	movs	r3, #0
 80036b4:	e000      	b.n	80036b8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80036b6:	2302      	movs	r3, #2
  }
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3728      	adds	r7, #40	; 0x28
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	00010004 	.word	0x00010004

080036c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b088      	sub	sp, #32
 80036c8:	af02      	add	r7, sp, #8
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	607a      	str	r2, [r7, #4]
 80036ce:	603b      	str	r3, [r7, #0]
 80036d0:	460b      	mov	r3, r1
 80036d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	2b08      	cmp	r3, #8
 80036de:	d006      	beq.n	80036ee <I2C_MasterRequestWrite+0x2a>
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d003      	beq.n	80036ee <I2C_MasterRequestWrite+0x2a>
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036ec:	d108      	bne.n	8003700 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	e00b      	b.n	8003718 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003704:	2b12      	cmp	r3, #18
 8003706:	d107      	bne.n	8003718 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003716:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 f9cd 	bl	8003ac4 <I2C_WaitOnFlagUntilTimeout>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00d      	beq.n	800374c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800373e:	d103      	bne.n	8003748 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003746:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e035      	b.n	80037b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003754:	d108      	bne.n	8003768 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003756:	897b      	ldrh	r3, [r7, #10]
 8003758:	b2db      	uxtb	r3, r3
 800375a:	461a      	mov	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003764:	611a      	str	r2, [r3, #16]
 8003766:	e01b      	b.n	80037a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003768:	897b      	ldrh	r3, [r7, #10]
 800376a:	11db      	asrs	r3, r3, #7
 800376c:	b2db      	uxtb	r3, r3
 800376e:	f003 0306 	and.w	r3, r3, #6
 8003772:	b2db      	uxtb	r3, r3
 8003774:	f063 030f 	orn	r3, r3, #15
 8003778:	b2da      	uxtb	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	490e      	ldr	r1, [pc, #56]	; (80037c0 <I2C_MasterRequestWrite+0xfc>)
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 fa16 	bl	8003bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e010      	b.n	80037b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003796:	897b      	ldrh	r3, [r7, #10]
 8003798:	b2da      	uxtb	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	4907      	ldr	r1, [pc, #28]	; (80037c4 <I2C_MasterRequestWrite+0x100>)
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 fa06 	bl	8003bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e000      	b.n	80037b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3718      	adds	r7, #24
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	00010008 	.word	0x00010008
 80037c4:	00010002 	.word	0x00010002

080037c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b088      	sub	sp, #32
 80037cc:	af02      	add	r7, sp, #8
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	4608      	mov	r0, r1
 80037d2:	4611      	mov	r1, r2
 80037d4:	461a      	mov	r2, r3
 80037d6:	4603      	mov	r3, r0
 80037d8:	817b      	strh	r3, [r7, #10]
 80037da:	460b      	mov	r3, r1
 80037dc:	813b      	strh	r3, [r7, #8]
 80037de:	4613      	mov	r3, r2
 80037e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	6a3b      	ldr	r3, [r7, #32]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 f960 	bl	8003ac4 <I2C_WaitOnFlagUntilTimeout>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00d      	beq.n	8003826 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003814:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003818:	d103      	bne.n	8003822 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003820:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e05f      	b.n	80038e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003826:	897b      	ldrh	r3, [r7, #10]
 8003828:	b2db      	uxtb	r3, r3
 800382a:	461a      	mov	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003834:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	6a3a      	ldr	r2, [r7, #32]
 800383a:	492d      	ldr	r1, [pc, #180]	; (80038f0 <I2C_RequestMemoryWrite+0x128>)
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 f9bb 	bl	8003bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e04c      	b.n	80038e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800384c:	2300      	movs	r3, #0
 800384e:	617b      	str	r3, [r7, #20]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	617b      	str	r3, [r7, #20]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	617b      	str	r3, [r7, #20]
 8003860:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003864:	6a39      	ldr	r1, [r7, #32]
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f000 fa46 	bl	8003cf8 <I2C_WaitOnTXEFlagUntilTimeout>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00d      	beq.n	800388e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	2b04      	cmp	r3, #4
 8003878:	d107      	bne.n	800388a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003888:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e02b      	b.n	80038e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800388e:	88fb      	ldrh	r3, [r7, #6]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d105      	bne.n	80038a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003894:	893b      	ldrh	r3, [r7, #8]
 8003896:	b2da      	uxtb	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	611a      	str	r2, [r3, #16]
 800389e:	e021      	b.n	80038e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80038a0:	893b      	ldrh	r3, [r7, #8]
 80038a2:	0a1b      	lsrs	r3, r3, #8
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b0:	6a39      	ldr	r1, [r7, #32]
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 fa20 	bl	8003cf8 <I2C_WaitOnTXEFlagUntilTimeout>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00d      	beq.n	80038da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	d107      	bne.n	80038d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e005      	b.n	80038e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038da:	893b      	ldrh	r3, [r7, #8]
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3718      	adds	r7, #24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	00010002 	.word	0x00010002

080038f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b088      	sub	sp, #32
 80038f8:	af02      	add	r7, sp, #8
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	4608      	mov	r0, r1
 80038fe:	4611      	mov	r1, r2
 8003900:	461a      	mov	r2, r3
 8003902:	4603      	mov	r3, r0
 8003904:	817b      	strh	r3, [r7, #10]
 8003906:	460b      	mov	r3, r1
 8003908:	813b      	strh	r3, [r7, #8]
 800390a:	4613      	mov	r3, r2
 800390c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800391c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800392c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	2200      	movs	r2, #0
 8003936:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f000 f8c2 	bl	8003ac4 <I2C_WaitOnFlagUntilTimeout>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00d      	beq.n	8003962 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003950:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003954:	d103      	bne.n	800395e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f44f 7200 	mov.w	r2, #512	; 0x200
 800395c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e0aa      	b.n	8003ab8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003962:	897b      	ldrh	r3, [r7, #10]
 8003964:	b2db      	uxtb	r3, r3
 8003966:	461a      	mov	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003970:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	6a3a      	ldr	r2, [r7, #32]
 8003976:	4952      	ldr	r1, [pc, #328]	; (8003ac0 <I2C_RequestMemoryRead+0x1cc>)
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 f91d 	bl	8003bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e097      	b.n	8003ab8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003988:	2300      	movs	r3, #0
 800398a:	617b      	str	r3, [r7, #20]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	617b      	str	r3, [r7, #20]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	617b      	str	r3, [r7, #20]
 800399c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800399e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a0:	6a39      	ldr	r1, [r7, #32]
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 f9a8 	bl	8003cf8 <I2C_WaitOnTXEFlagUntilTimeout>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00d      	beq.n	80039ca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	d107      	bne.n	80039c6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e076      	b.n	8003ab8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039ca:	88fb      	ldrh	r3, [r7, #6]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d105      	bne.n	80039dc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039d0:	893b      	ldrh	r3, [r7, #8]
 80039d2:	b2da      	uxtb	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	611a      	str	r2, [r3, #16]
 80039da:	e021      	b.n	8003a20 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80039dc:	893b      	ldrh	r3, [r7, #8]
 80039de:	0a1b      	lsrs	r3, r3, #8
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ec:	6a39      	ldr	r1, [r7, #32]
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 f982 	bl	8003cf8 <I2C_WaitOnTXEFlagUntilTimeout>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00d      	beq.n	8003a16 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d107      	bne.n	8003a12 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e050      	b.n	8003ab8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a16:	893b      	ldrh	r3, [r7, #8]
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a22:	6a39      	ldr	r1, [r7, #32]
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 f967 	bl	8003cf8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00d      	beq.n	8003a4c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a34:	2b04      	cmp	r3, #4
 8003a36:	d107      	bne.n	8003a48 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a46:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e035      	b.n	8003ab8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a5a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	6a3b      	ldr	r3, [r7, #32]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f000 f82b 	bl	8003ac4 <I2C_WaitOnFlagUntilTimeout>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00d      	beq.n	8003a90 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a82:	d103      	bne.n	8003a8c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e013      	b.n	8003ab8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a90:	897b      	ldrh	r3, [r7, #10]
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	f043 0301 	orr.w	r3, r3, #1
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa2:	6a3a      	ldr	r2, [r7, #32]
 8003aa4:	4906      	ldr	r1, [pc, #24]	; (8003ac0 <I2C_RequestMemoryRead+0x1cc>)
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 f886 	bl	8003bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e000      	b.n	8003ab8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3718      	adds	r7, #24
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	00010002 	.word	0x00010002

08003ac4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	603b      	str	r3, [r7, #0]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ad4:	e048      	b.n	8003b68 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003adc:	d044      	beq.n	8003b68 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ade:	f7fe fd11 	bl	8002504 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d302      	bcc.n	8003af4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d139      	bne.n	8003b68 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	0c1b      	lsrs	r3, r3, #16
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d10d      	bne.n	8003b1a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	43da      	mvns	r2, r3
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	bf0c      	ite	eq
 8003b10:	2301      	moveq	r3, #1
 8003b12:	2300      	movne	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	461a      	mov	r2, r3
 8003b18:	e00c      	b.n	8003b34 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	43da      	mvns	r2, r3
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	4013      	ands	r3, r2
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	bf0c      	ite	eq
 8003b2c:	2301      	moveq	r3, #1
 8003b2e:	2300      	movne	r3, #0
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	461a      	mov	r2, r3
 8003b34:	79fb      	ldrb	r3, [r7, #7]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d116      	bne.n	8003b68 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2220      	movs	r2, #32
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b54:	f043 0220 	orr.w	r2, r3, #32
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e023      	b.n	8003bb0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	0c1b      	lsrs	r3, r3, #16
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d10d      	bne.n	8003b8e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	43da      	mvns	r2, r3
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	bf0c      	ite	eq
 8003b84:	2301      	moveq	r3, #1
 8003b86:	2300      	movne	r3, #0
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	e00c      	b.n	8003ba8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	43da      	mvns	r2, r3
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	bf0c      	ite	eq
 8003ba0:	2301      	moveq	r3, #1
 8003ba2:	2300      	movne	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	79fb      	ldrb	r3, [r7, #7]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d093      	beq.n	8003ad6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
 8003bc4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bc6:	e071      	b.n	8003cac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bd6:	d123      	bne.n	8003c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003be6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bf0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0c:	f043 0204 	orr.w	r2, r3, #4
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e067      	b.n	8003cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c26:	d041      	beq.n	8003cac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c28:	f7fe fc6c 	bl	8002504 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d302      	bcc.n	8003c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d136      	bne.n	8003cac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	0c1b      	lsrs	r3, r3, #16
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d10c      	bne.n	8003c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	43da      	mvns	r2, r3
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	4013      	ands	r3, r2
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	bf14      	ite	ne
 8003c5a:	2301      	movne	r3, #1
 8003c5c:	2300      	moveq	r3, #0
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	e00b      	b.n	8003c7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	43da      	mvns	r2, r3
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	bf14      	ite	ne
 8003c74:	2301      	movne	r3, #1
 8003c76:	2300      	moveq	r3, #0
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d016      	beq.n	8003cac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	f043 0220 	orr.w	r2, r3, #32
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e021      	b.n	8003cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	0c1b      	lsrs	r3, r3, #16
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d10c      	bne.n	8003cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	43da      	mvns	r2, r3
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	bf14      	ite	ne
 8003cc8:	2301      	movne	r3, #1
 8003cca:	2300      	moveq	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	e00b      	b.n	8003ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	43da      	mvns	r2, r3
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	bf14      	ite	ne
 8003ce2:	2301      	movne	r3, #1
 8003ce4:	2300      	moveq	r3, #0
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f47f af6d 	bne.w	8003bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d04:	e034      	b.n	8003d70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 f8e3 	bl	8003ed2 <I2C_IsAcknowledgeFailed>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e034      	b.n	8003d80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d1c:	d028      	beq.n	8003d70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d1e:	f7fe fbf1 	bl	8002504 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d302      	bcc.n	8003d34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d11d      	bne.n	8003d70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3e:	2b80      	cmp	r3, #128	; 0x80
 8003d40:	d016      	beq.n	8003d70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	f043 0220 	orr.w	r2, r3, #32
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e007      	b.n	8003d80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d7a:	2b80      	cmp	r3, #128	; 0x80
 8003d7c:	d1c3      	bne.n	8003d06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d94:	e034      	b.n	8003e00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f000 f89b 	bl	8003ed2 <I2C_IsAcknowledgeFailed>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e034      	b.n	8003e10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dac:	d028      	beq.n	8003e00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dae:	f7fe fba9 	bl	8002504 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d302      	bcc.n	8003dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d11d      	bne.n	8003e00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	f003 0304 	and.w	r3, r3, #4
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d016      	beq.n	8003e00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dec:	f043 0220 	orr.w	r2, r3, #32
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e007      	b.n	8003e10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	f003 0304 	and.w	r3, r3, #4
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	d1c3      	bne.n	8003d96 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e24:	e049      	b.n	8003eba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	f003 0310 	and.w	r3, r3, #16
 8003e30:	2b10      	cmp	r3, #16
 8003e32:	d119      	bne.n	8003e68 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f06f 0210 	mvn.w	r2, #16
 8003e3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e030      	b.n	8003eca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e68:	f7fe fb4c 	bl	8002504 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d302      	bcc.n	8003e7e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d11d      	bne.n	8003eba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e88:	2b40      	cmp	r3, #64	; 0x40
 8003e8a:	d016      	beq.n	8003eba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2220      	movs	r2, #32
 8003e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	f043 0220 	orr.w	r2, r3, #32
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e007      	b.n	8003eca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec4:	2b40      	cmp	r3, #64	; 0x40
 8003ec6:	d1ae      	bne.n	8003e26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b083      	sub	sp, #12
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee8:	d11b      	bne.n	8003f22 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ef2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2220      	movs	r2, #32
 8003efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	f043 0204 	orr.w	r2, r3, #4
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e000      	b.n	8003f24 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e267      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d075      	beq.n	800403a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f4e:	4b88      	ldr	r3, [pc, #544]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 030c 	and.w	r3, r3, #12
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	d00c      	beq.n	8003f74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f5a:	4b85      	ldr	r3, [pc, #532]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f62:	2b08      	cmp	r3, #8
 8003f64:	d112      	bne.n	8003f8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f66:	4b82      	ldr	r3, [pc, #520]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f72:	d10b      	bne.n	8003f8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f74:	4b7e      	ldr	r3, [pc, #504]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d05b      	beq.n	8004038 <HAL_RCC_OscConfig+0x108>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d157      	bne.n	8004038 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e242      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f94:	d106      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x74>
 8003f96:	4b76      	ldr	r3, [pc, #472]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a75      	ldr	r2, [pc, #468]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa0:	6013      	str	r3, [r2, #0]
 8003fa2:	e01d      	b.n	8003fe0 <HAL_RCC_OscConfig+0xb0>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fac:	d10c      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x98>
 8003fae:	4b70      	ldr	r3, [pc, #448]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a6f      	ldr	r2, [pc, #444]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fb8:	6013      	str	r3, [r2, #0]
 8003fba:	4b6d      	ldr	r3, [pc, #436]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a6c      	ldr	r2, [pc, #432]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc4:	6013      	str	r3, [r2, #0]
 8003fc6:	e00b      	b.n	8003fe0 <HAL_RCC_OscConfig+0xb0>
 8003fc8:	4b69      	ldr	r3, [pc, #420]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a68      	ldr	r2, [pc, #416]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fd2:	6013      	str	r3, [r2, #0]
 8003fd4:	4b66      	ldr	r3, [pc, #408]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a65      	ldr	r2, [pc, #404]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8003fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d013      	beq.n	8004010 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe8:	f7fe fa8c 	bl	8002504 <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ff0:	f7fe fa88 	bl	8002504 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b64      	cmp	r3, #100	; 0x64
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e207      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004002:	4b5b      	ldr	r3, [pc, #364]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0f0      	beq.n	8003ff0 <HAL_RCC_OscConfig+0xc0>
 800400e:	e014      	b.n	800403a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004010:	f7fe fa78 	bl	8002504 <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004018:	f7fe fa74 	bl	8002504 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b64      	cmp	r3, #100	; 0x64
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e1f3      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800402a:	4b51      	ldr	r3, [pc, #324]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1f0      	bne.n	8004018 <HAL_RCC_OscConfig+0xe8>
 8004036:	e000      	b.n	800403a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d063      	beq.n	800410e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004046:	4b4a      	ldr	r3, [pc, #296]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f003 030c 	and.w	r3, r3, #12
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00b      	beq.n	800406a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004052:	4b47      	ldr	r3, [pc, #284]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800405a:	2b08      	cmp	r3, #8
 800405c:	d11c      	bne.n	8004098 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800405e:	4b44      	ldr	r3, [pc, #272]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d116      	bne.n	8004098 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800406a:	4b41      	ldr	r3, [pc, #260]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d005      	beq.n	8004082 <HAL_RCC_OscConfig+0x152>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d001      	beq.n	8004082 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e1c7      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004082:	4b3b      	ldr	r3, [pc, #236]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	4937      	ldr	r1, [pc, #220]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8004092:	4313      	orrs	r3, r2
 8004094:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004096:	e03a      	b.n	800410e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d020      	beq.n	80040e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040a0:	4b34      	ldr	r3, [pc, #208]	; (8004174 <HAL_RCC_OscConfig+0x244>)
 80040a2:	2201      	movs	r2, #1
 80040a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a6:	f7fe fa2d 	bl	8002504 <HAL_GetTick>
 80040aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ac:	e008      	b.n	80040c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040ae:	f7fe fa29 	bl	8002504 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e1a8      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c0:	4b2b      	ldr	r3, [pc, #172]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d0f0      	beq.n	80040ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040cc:	4b28      	ldr	r3, [pc, #160]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	4925      	ldr	r1, [pc, #148]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	600b      	str	r3, [r1, #0]
 80040e0:	e015      	b.n	800410e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040e2:	4b24      	ldr	r3, [pc, #144]	; (8004174 <HAL_RCC_OscConfig+0x244>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e8:	f7fe fa0c 	bl	8002504 <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040f0:	f7fe fa08 	bl	8002504 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e187      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004102:	4b1b      	ldr	r3, [pc, #108]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1f0      	bne.n	80040f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0308 	and.w	r3, r3, #8
 8004116:	2b00      	cmp	r3, #0
 8004118:	d036      	beq.n	8004188 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d016      	beq.n	8004150 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004122:	4b15      	ldr	r3, [pc, #84]	; (8004178 <HAL_RCC_OscConfig+0x248>)
 8004124:	2201      	movs	r2, #1
 8004126:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004128:	f7fe f9ec 	bl	8002504 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004130:	f7fe f9e8 	bl	8002504 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e167      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004142:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <HAL_RCC_OscConfig+0x240>)
 8004144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d0f0      	beq.n	8004130 <HAL_RCC_OscConfig+0x200>
 800414e:	e01b      	b.n	8004188 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004150:	4b09      	ldr	r3, [pc, #36]	; (8004178 <HAL_RCC_OscConfig+0x248>)
 8004152:	2200      	movs	r2, #0
 8004154:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004156:	f7fe f9d5 	bl	8002504 <HAL_GetTick>
 800415a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800415c:	e00e      	b.n	800417c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800415e:	f7fe f9d1 	bl	8002504 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d907      	bls.n	800417c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e150      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
 8004170:	40023800 	.word	0x40023800
 8004174:	42470000 	.word	0x42470000
 8004178:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800417c:	4b88      	ldr	r3, [pc, #544]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 800417e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1ea      	bne.n	800415e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 8097 	beq.w	80042c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004196:	2300      	movs	r3, #0
 8004198:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800419a:	4b81      	ldr	r3, [pc, #516]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10f      	bne.n	80041c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041a6:	2300      	movs	r3, #0
 80041a8:	60bb      	str	r3, [r7, #8]
 80041aa:	4b7d      	ldr	r3, [pc, #500]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	4a7c      	ldr	r2, [pc, #496]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 80041b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b4:	6413      	str	r3, [r2, #64]	; 0x40
 80041b6:	4b7a      	ldr	r3, [pc, #488]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041be:	60bb      	str	r3, [r7, #8]
 80041c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041c2:	2301      	movs	r3, #1
 80041c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c6:	4b77      	ldr	r3, [pc, #476]	; (80043a4 <HAL_RCC_OscConfig+0x474>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d118      	bne.n	8004204 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041d2:	4b74      	ldr	r3, [pc, #464]	; (80043a4 <HAL_RCC_OscConfig+0x474>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a73      	ldr	r2, [pc, #460]	; (80043a4 <HAL_RCC_OscConfig+0x474>)
 80041d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041de:	f7fe f991 	bl	8002504 <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e4:	e008      	b.n	80041f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041e6:	f7fe f98d 	bl	8002504 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d901      	bls.n	80041f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e10c      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f8:	4b6a      	ldr	r3, [pc, #424]	; (80043a4 <HAL_RCC_OscConfig+0x474>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0f0      	beq.n	80041e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d106      	bne.n	800421a <HAL_RCC_OscConfig+0x2ea>
 800420c:	4b64      	ldr	r3, [pc, #400]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 800420e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004210:	4a63      	ldr	r2, [pc, #396]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 8004212:	f043 0301 	orr.w	r3, r3, #1
 8004216:	6713      	str	r3, [r2, #112]	; 0x70
 8004218:	e01c      	b.n	8004254 <HAL_RCC_OscConfig+0x324>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	2b05      	cmp	r3, #5
 8004220:	d10c      	bne.n	800423c <HAL_RCC_OscConfig+0x30c>
 8004222:	4b5f      	ldr	r3, [pc, #380]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 8004224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004226:	4a5e      	ldr	r2, [pc, #376]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 8004228:	f043 0304 	orr.w	r3, r3, #4
 800422c:	6713      	str	r3, [r2, #112]	; 0x70
 800422e:	4b5c      	ldr	r3, [pc, #368]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 8004230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004232:	4a5b      	ldr	r2, [pc, #364]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 8004234:	f043 0301 	orr.w	r3, r3, #1
 8004238:	6713      	str	r3, [r2, #112]	; 0x70
 800423a:	e00b      	b.n	8004254 <HAL_RCC_OscConfig+0x324>
 800423c:	4b58      	ldr	r3, [pc, #352]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 800423e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004240:	4a57      	ldr	r2, [pc, #348]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 8004242:	f023 0301 	bic.w	r3, r3, #1
 8004246:	6713      	str	r3, [r2, #112]	; 0x70
 8004248:	4b55      	ldr	r3, [pc, #340]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 800424a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424c:	4a54      	ldr	r2, [pc, #336]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 800424e:	f023 0304 	bic.w	r3, r3, #4
 8004252:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d015      	beq.n	8004288 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800425c:	f7fe f952 	bl	8002504 <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004262:	e00a      	b.n	800427a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004264:	f7fe f94e 	bl	8002504 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004272:	4293      	cmp	r3, r2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e0cb      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800427a:	4b49      	ldr	r3, [pc, #292]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 800427c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0ee      	beq.n	8004264 <HAL_RCC_OscConfig+0x334>
 8004286:	e014      	b.n	80042b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004288:	f7fe f93c 	bl	8002504 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800428e:	e00a      	b.n	80042a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004290:	f7fe f938 	bl	8002504 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	f241 3288 	movw	r2, #5000	; 0x1388
 800429e:	4293      	cmp	r3, r2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e0b5      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042a6:	4b3e      	ldr	r3, [pc, #248]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 80042a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1ee      	bne.n	8004290 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042b2:	7dfb      	ldrb	r3, [r7, #23]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d105      	bne.n	80042c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042b8:	4b39      	ldr	r3, [pc, #228]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 80042ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042bc:	4a38      	ldr	r2, [pc, #224]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 80042be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 80a1 	beq.w	8004410 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042ce:	4b34      	ldr	r3, [pc, #208]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 030c 	and.w	r3, r3, #12
 80042d6:	2b08      	cmp	r3, #8
 80042d8:	d05c      	beq.n	8004394 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d141      	bne.n	8004366 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042e2:	4b31      	ldr	r3, [pc, #196]	; (80043a8 <HAL_RCC_OscConfig+0x478>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e8:	f7fe f90c 	bl	8002504 <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042f0:	f7fe f908 	bl	8002504 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e087      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004302:	4b27      	ldr	r3, [pc, #156]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1f0      	bne.n	80042f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	69da      	ldr	r2, [r3, #28]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	431a      	orrs	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431c:	019b      	lsls	r3, r3, #6
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004324:	085b      	lsrs	r3, r3, #1
 8004326:	3b01      	subs	r3, #1
 8004328:	041b      	lsls	r3, r3, #16
 800432a:	431a      	orrs	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004330:	061b      	lsls	r3, r3, #24
 8004332:	491b      	ldr	r1, [pc, #108]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 8004334:	4313      	orrs	r3, r2
 8004336:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004338:	4b1b      	ldr	r3, [pc, #108]	; (80043a8 <HAL_RCC_OscConfig+0x478>)
 800433a:	2201      	movs	r2, #1
 800433c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433e:	f7fe f8e1 	bl	8002504 <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004344:	e008      	b.n	8004358 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004346:	f7fe f8dd 	bl	8002504 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d901      	bls.n	8004358 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e05c      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004358:	4b11      	ldr	r3, [pc, #68]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d0f0      	beq.n	8004346 <HAL_RCC_OscConfig+0x416>
 8004364:	e054      	b.n	8004410 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004366:	4b10      	ldr	r3, [pc, #64]	; (80043a8 <HAL_RCC_OscConfig+0x478>)
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800436c:	f7fe f8ca 	bl	8002504 <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004374:	f7fe f8c6 	bl	8002504 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e045      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004386:	4b06      	ldr	r3, [pc, #24]	; (80043a0 <HAL_RCC_OscConfig+0x470>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1f0      	bne.n	8004374 <HAL_RCC_OscConfig+0x444>
 8004392:	e03d      	b.n	8004410 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d107      	bne.n	80043ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e038      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
 80043a0:	40023800 	.word	0x40023800
 80043a4:	40007000 	.word	0x40007000
 80043a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043ac:	4b1b      	ldr	r3, [pc, #108]	; (800441c <HAL_RCC_OscConfig+0x4ec>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d028      	beq.n	800440c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d121      	bne.n	800440c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d11a      	bne.n	800440c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043dc:	4013      	ands	r3, r2
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d111      	bne.n	800440c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f2:	085b      	lsrs	r3, r3, #1
 80043f4:	3b01      	subs	r3, #1
 80043f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d107      	bne.n	800440c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004406:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004408:	429a      	cmp	r2, r3
 800440a:	d001      	beq.n	8004410 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e000      	b.n	8004412 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3718      	adds	r7, #24
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	40023800 	.word	0x40023800

08004420 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d101      	bne.n	8004434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e0cc      	b.n	80045ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004434:	4b68      	ldr	r3, [pc, #416]	; (80045d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	683a      	ldr	r2, [r7, #0]
 800443e:	429a      	cmp	r2, r3
 8004440:	d90c      	bls.n	800445c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004442:	4b65      	ldr	r3, [pc, #404]	; (80045d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800444a:	4b63      	ldr	r3, [pc, #396]	; (80045d8 <HAL_RCC_ClockConfig+0x1b8>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0307 	and.w	r3, r3, #7
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	429a      	cmp	r2, r3
 8004456:	d001      	beq.n	800445c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e0b8      	b.n	80045ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d020      	beq.n	80044aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	d005      	beq.n	8004480 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004474:	4b59      	ldr	r3, [pc, #356]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	4a58      	ldr	r2, [pc, #352]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 800447a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800447e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0308 	and.w	r3, r3, #8
 8004488:	2b00      	cmp	r3, #0
 800448a:	d005      	beq.n	8004498 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800448c:	4b53      	ldr	r3, [pc, #332]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	4a52      	ldr	r2, [pc, #328]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 8004492:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004496:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004498:	4b50      	ldr	r3, [pc, #320]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	494d      	ldr	r1, [pc, #308]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d044      	beq.n	8004540 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d107      	bne.n	80044ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044be:	4b47      	ldr	r3, [pc, #284]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d119      	bne.n	80044fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e07f      	b.n	80045ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d003      	beq.n	80044de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044da:	2b03      	cmp	r3, #3
 80044dc:	d107      	bne.n	80044ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044de:	4b3f      	ldr	r3, [pc, #252]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d109      	bne.n	80044fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e06f      	b.n	80045ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ee:	4b3b      	ldr	r3, [pc, #236]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e067      	b.n	80045ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044fe:	4b37      	ldr	r3, [pc, #220]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f023 0203 	bic.w	r2, r3, #3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	4934      	ldr	r1, [pc, #208]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 800450c:	4313      	orrs	r3, r2
 800450e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004510:	f7fd fff8 	bl	8002504 <HAL_GetTick>
 8004514:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004516:	e00a      	b.n	800452e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004518:	f7fd fff4 	bl	8002504 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	f241 3288 	movw	r2, #5000	; 0x1388
 8004526:	4293      	cmp	r3, r2
 8004528:	d901      	bls.n	800452e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e04f      	b.n	80045ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800452e:	4b2b      	ldr	r3, [pc, #172]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 020c 	and.w	r2, r3, #12
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	429a      	cmp	r2, r3
 800453e:	d1eb      	bne.n	8004518 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004540:	4b25      	ldr	r3, [pc, #148]	; (80045d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	429a      	cmp	r2, r3
 800454c:	d20c      	bcs.n	8004568 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800454e:	4b22      	ldr	r3, [pc, #136]	; (80045d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	b2d2      	uxtb	r2, r2
 8004554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004556:	4b20      	ldr	r3, [pc, #128]	; (80045d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	429a      	cmp	r2, r3
 8004562:	d001      	beq.n	8004568 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e032      	b.n	80045ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b00      	cmp	r3, #0
 8004572:	d008      	beq.n	8004586 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004574:	4b19      	ldr	r3, [pc, #100]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	4916      	ldr	r1, [pc, #88]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 8004582:	4313      	orrs	r3, r2
 8004584:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	2b00      	cmp	r3, #0
 8004590:	d009      	beq.n	80045a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004592:	4b12      	ldr	r3, [pc, #72]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	490e      	ldr	r1, [pc, #56]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045a6:	f000 f821 	bl	80045ec <HAL_RCC_GetSysClockFreq>
 80045aa:	4602      	mov	r2, r0
 80045ac:	4b0b      	ldr	r3, [pc, #44]	; (80045dc <HAL_RCC_ClockConfig+0x1bc>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	091b      	lsrs	r3, r3, #4
 80045b2:	f003 030f 	and.w	r3, r3, #15
 80045b6:	490a      	ldr	r1, [pc, #40]	; (80045e0 <HAL_RCC_ClockConfig+0x1c0>)
 80045b8:	5ccb      	ldrb	r3, [r1, r3]
 80045ba:	fa22 f303 	lsr.w	r3, r2, r3
 80045be:	4a09      	ldr	r2, [pc, #36]	; (80045e4 <HAL_RCC_ClockConfig+0x1c4>)
 80045c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045c2:	4b09      	ldr	r3, [pc, #36]	; (80045e8 <HAL_RCC_ClockConfig+0x1c8>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7fd ff58 	bl	800247c <HAL_InitTick>

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	40023c00 	.word	0x40023c00
 80045dc:	40023800 	.word	0x40023800
 80045e0:	08006948 	.word	0x08006948
 80045e4:	2000001c 	.word	0x2000001c
 80045e8:	20000020 	.word	0x20000020

080045ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045f0:	b090      	sub	sp, #64	; 0x40
 80045f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045f4:	2300      	movs	r3, #0
 80045f6:	637b      	str	r3, [r7, #52]	; 0x34
 80045f8:	2300      	movs	r3, #0
 80045fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045fc:	2300      	movs	r3, #0
 80045fe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004600:	2300      	movs	r3, #0
 8004602:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004604:	4b59      	ldr	r3, [pc, #356]	; (800476c <HAL_RCC_GetSysClockFreq+0x180>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f003 030c 	and.w	r3, r3, #12
 800460c:	2b08      	cmp	r3, #8
 800460e:	d00d      	beq.n	800462c <HAL_RCC_GetSysClockFreq+0x40>
 8004610:	2b08      	cmp	r3, #8
 8004612:	f200 80a1 	bhi.w	8004758 <HAL_RCC_GetSysClockFreq+0x16c>
 8004616:	2b00      	cmp	r3, #0
 8004618:	d002      	beq.n	8004620 <HAL_RCC_GetSysClockFreq+0x34>
 800461a:	2b04      	cmp	r3, #4
 800461c:	d003      	beq.n	8004626 <HAL_RCC_GetSysClockFreq+0x3a>
 800461e:	e09b      	b.n	8004758 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004620:	4b53      	ldr	r3, [pc, #332]	; (8004770 <HAL_RCC_GetSysClockFreq+0x184>)
 8004622:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004624:	e09b      	b.n	800475e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004626:	4b53      	ldr	r3, [pc, #332]	; (8004774 <HAL_RCC_GetSysClockFreq+0x188>)
 8004628:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800462a:	e098      	b.n	800475e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800462c:	4b4f      	ldr	r3, [pc, #316]	; (800476c <HAL_RCC_GetSysClockFreq+0x180>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004634:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004636:	4b4d      	ldr	r3, [pc, #308]	; (800476c <HAL_RCC_GetSysClockFreq+0x180>)
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d028      	beq.n	8004694 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004642:	4b4a      	ldr	r3, [pc, #296]	; (800476c <HAL_RCC_GetSysClockFreq+0x180>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	099b      	lsrs	r3, r3, #6
 8004648:	2200      	movs	r2, #0
 800464a:	623b      	str	r3, [r7, #32]
 800464c:	627a      	str	r2, [r7, #36]	; 0x24
 800464e:	6a3b      	ldr	r3, [r7, #32]
 8004650:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004654:	2100      	movs	r1, #0
 8004656:	4b47      	ldr	r3, [pc, #284]	; (8004774 <HAL_RCC_GetSysClockFreq+0x188>)
 8004658:	fb03 f201 	mul.w	r2, r3, r1
 800465c:	2300      	movs	r3, #0
 800465e:	fb00 f303 	mul.w	r3, r0, r3
 8004662:	4413      	add	r3, r2
 8004664:	4a43      	ldr	r2, [pc, #268]	; (8004774 <HAL_RCC_GetSysClockFreq+0x188>)
 8004666:	fba0 1202 	umull	r1, r2, r0, r2
 800466a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800466c:	460a      	mov	r2, r1
 800466e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004670:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004672:	4413      	add	r3, r2
 8004674:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004678:	2200      	movs	r2, #0
 800467a:	61bb      	str	r3, [r7, #24]
 800467c:	61fa      	str	r2, [r7, #28]
 800467e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004682:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004686:	f7fc fa6d 	bl	8000b64 <__aeabi_uldivmod>
 800468a:	4602      	mov	r2, r0
 800468c:	460b      	mov	r3, r1
 800468e:	4613      	mov	r3, r2
 8004690:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004692:	e053      	b.n	800473c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004694:	4b35      	ldr	r3, [pc, #212]	; (800476c <HAL_RCC_GetSysClockFreq+0x180>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	099b      	lsrs	r3, r3, #6
 800469a:	2200      	movs	r2, #0
 800469c:	613b      	str	r3, [r7, #16]
 800469e:	617a      	str	r2, [r7, #20]
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80046a6:	f04f 0b00 	mov.w	fp, #0
 80046aa:	4652      	mov	r2, sl
 80046ac:	465b      	mov	r3, fp
 80046ae:	f04f 0000 	mov.w	r0, #0
 80046b2:	f04f 0100 	mov.w	r1, #0
 80046b6:	0159      	lsls	r1, r3, #5
 80046b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046bc:	0150      	lsls	r0, r2, #5
 80046be:	4602      	mov	r2, r0
 80046c0:	460b      	mov	r3, r1
 80046c2:	ebb2 080a 	subs.w	r8, r2, sl
 80046c6:	eb63 090b 	sbc.w	r9, r3, fp
 80046ca:	f04f 0200 	mov.w	r2, #0
 80046ce:	f04f 0300 	mov.w	r3, #0
 80046d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80046d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80046da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80046de:	ebb2 0408 	subs.w	r4, r2, r8
 80046e2:	eb63 0509 	sbc.w	r5, r3, r9
 80046e6:	f04f 0200 	mov.w	r2, #0
 80046ea:	f04f 0300 	mov.w	r3, #0
 80046ee:	00eb      	lsls	r3, r5, #3
 80046f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046f4:	00e2      	lsls	r2, r4, #3
 80046f6:	4614      	mov	r4, r2
 80046f8:	461d      	mov	r5, r3
 80046fa:	eb14 030a 	adds.w	r3, r4, sl
 80046fe:	603b      	str	r3, [r7, #0]
 8004700:	eb45 030b 	adc.w	r3, r5, fp
 8004704:	607b      	str	r3, [r7, #4]
 8004706:	f04f 0200 	mov.w	r2, #0
 800470a:	f04f 0300 	mov.w	r3, #0
 800470e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004712:	4629      	mov	r1, r5
 8004714:	028b      	lsls	r3, r1, #10
 8004716:	4621      	mov	r1, r4
 8004718:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800471c:	4621      	mov	r1, r4
 800471e:	028a      	lsls	r2, r1, #10
 8004720:	4610      	mov	r0, r2
 8004722:	4619      	mov	r1, r3
 8004724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004726:	2200      	movs	r2, #0
 8004728:	60bb      	str	r3, [r7, #8]
 800472a:	60fa      	str	r2, [r7, #12]
 800472c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004730:	f7fc fa18 	bl	8000b64 <__aeabi_uldivmod>
 8004734:	4602      	mov	r2, r0
 8004736:	460b      	mov	r3, r1
 8004738:	4613      	mov	r3, r2
 800473a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800473c:	4b0b      	ldr	r3, [pc, #44]	; (800476c <HAL_RCC_GetSysClockFreq+0x180>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	0c1b      	lsrs	r3, r3, #16
 8004742:	f003 0303 	and.w	r3, r3, #3
 8004746:	3301      	adds	r3, #1
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800474c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800474e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004750:	fbb2 f3f3 	udiv	r3, r2, r3
 8004754:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004756:	e002      	b.n	800475e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004758:	4b05      	ldr	r3, [pc, #20]	; (8004770 <HAL_RCC_GetSysClockFreq+0x184>)
 800475a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800475c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800475e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004760:	4618      	mov	r0, r3
 8004762:	3740      	adds	r7, #64	; 0x40
 8004764:	46bd      	mov	sp, r7
 8004766:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800476a:	bf00      	nop
 800476c:	40023800 	.word	0x40023800
 8004770:	00f42400 	.word	0x00f42400
 8004774:	017d7840 	.word	0x017d7840

08004778 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800477c:	4b03      	ldr	r3, [pc, #12]	; (800478c <HAL_RCC_GetHCLKFreq+0x14>)
 800477e:	681b      	ldr	r3, [r3, #0]
}
 8004780:	4618      	mov	r0, r3
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	2000001c 	.word	0x2000001c

08004790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004794:	f7ff fff0 	bl	8004778 <HAL_RCC_GetHCLKFreq>
 8004798:	4602      	mov	r2, r0
 800479a:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	0a9b      	lsrs	r3, r3, #10
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	4903      	ldr	r1, [pc, #12]	; (80047b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047a6:	5ccb      	ldrb	r3, [r1, r3]
 80047a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	40023800 	.word	0x40023800
 80047b4:	08006958 	.word	0x08006958

080047b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047bc:	f7ff ffdc 	bl	8004778 <HAL_RCC_GetHCLKFreq>
 80047c0:	4602      	mov	r2, r0
 80047c2:	4b05      	ldr	r3, [pc, #20]	; (80047d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	0b5b      	lsrs	r3, r3, #13
 80047c8:	f003 0307 	and.w	r3, r3, #7
 80047cc:	4903      	ldr	r1, [pc, #12]	; (80047dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80047ce:	5ccb      	ldrb	r3, [r1, r3]
 80047d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	40023800 	.word	0x40023800
 80047dc:	08006958 	.word	0x08006958

080047e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e041      	b.n	8004876 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d106      	bne.n	800480c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f7fd fc3e 	bl	8002088 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2202      	movs	r2, #2
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	3304      	adds	r3, #4
 800481c:	4619      	mov	r1, r3
 800481e:	4610      	mov	r0, r2
 8004820:	f000 fbea 	bl	8004ff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b082      	sub	sp, #8
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e041      	b.n	8004914 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b00      	cmp	r3, #0
 800489a:	d106      	bne.n	80048aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7fd fb25 	bl	8001ef4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2202      	movs	r2, #2
 80048ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	3304      	adds	r3, #4
 80048ba:	4619      	mov	r1, r3
 80048bc:	4610      	mov	r0, r2
 80048be:	f000 fb9b 	bl	8004ff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3708      	adds	r7, #8
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d109      	bne.n	8004940 <HAL_TIM_PWM_Start+0x24>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004932:	b2db      	uxtb	r3, r3
 8004934:	2b01      	cmp	r3, #1
 8004936:	bf14      	ite	ne
 8004938:	2301      	movne	r3, #1
 800493a:	2300      	moveq	r3, #0
 800493c:	b2db      	uxtb	r3, r3
 800493e:	e022      	b.n	8004986 <HAL_TIM_PWM_Start+0x6a>
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	2b04      	cmp	r3, #4
 8004944:	d109      	bne.n	800495a <HAL_TIM_PWM_Start+0x3e>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b01      	cmp	r3, #1
 8004950:	bf14      	ite	ne
 8004952:	2301      	movne	r3, #1
 8004954:	2300      	moveq	r3, #0
 8004956:	b2db      	uxtb	r3, r3
 8004958:	e015      	b.n	8004986 <HAL_TIM_PWM_Start+0x6a>
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2b08      	cmp	r3, #8
 800495e:	d109      	bne.n	8004974 <HAL_TIM_PWM_Start+0x58>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b01      	cmp	r3, #1
 800496a:	bf14      	ite	ne
 800496c:	2301      	movne	r3, #1
 800496e:	2300      	moveq	r3, #0
 8004970:	b2db      	uxtb	r3, r3
 8004972:	e008      	b.n	8004986 <HAL_TIM_PWM_Start+0x6a>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b01      	cmp	r3, #1
 800497e:	bf14      	ite	ne
 8004980:	2301      	movne	r3, #1
 8004982:	2300      	moveq	r3, #0
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e068      	b.n	8004a60 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d104      	bne.n	800499e <HAL_TIM_PWM_Start+0x82>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2202      	movs	r2, #2
 8004998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800499c:	e013      	b.n	80049c6 <HAL_TIM_PWM_Start+0xaa>
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	2b04      	cmp	r3, #4
 80049a2:	d104      	bne.n	80049ae <HAL_TIM_PWM_Start+0x92>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2202      	movs	r2, #2
 80049a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049ac:	e00b      	b.n	80049c6 <HAL_TIM_PWM_Start+0xaa>
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	d104      	bne.n	80049be <HAL_TIM_PWM_Start+0xa2>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2202      	movs	r2, #2
 80049b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049bc:	e003      	b.n	80049c6 <HAL_TIM_PWM_Start+0xaa>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2202      	movs	r2, #2
 80049c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2201      	movs	r2, #1
 80049cc:	6839      	ldr	r1, [r7, #0]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 fdc4 	bl	800555c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a23      	ldr	r2, [pc, #140]	; (8004a68 <HAL_TIM_PWM_Start+0x14c>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d107      	bne.n	80049ee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a1d      	ldr	r2, [pc, #116]	; (8004a68 <HAL_TIM_PWM_Start+0x14c>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d018      	beq.n	8004a2a <HAL_TIM_PWM_Start+0x10e>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a00:	d013      	beq.n	8004a2a <HAL_TIM_PWM_Start+0x10e>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a19      	ldr	r2, [pc, #100]	; (8004a6c <HAL_TIM_PWM_Start+0x150>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d00e      	beq.n	8004a2a <HAL_TIM_PWM_Start+0x10e>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a17      	ldr	r2, [pc, #92]	; (8004a70 <HAL_TIM_PWM_Start+0x154>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d009      	beq.n	8004a2a <HAL_TIM_PWM_Start+0x10e>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a16      	ldr	r2, [pc, #88]	; (8004a74 <HAL_TIM_PWM_Start+0x158>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d004      	beq.n	8004a2a <HAL_TIM_PWM_Start+0x10e>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a14      	ldr	r2, [pc, #80]	; (8004a78 <HAL_TIM_PWM_Start+0x15c>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d111      	bne.n	8004a4e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2b06      	cmp	r3, #6
 8004a3a:	d010      	beq.n	8004a5e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0201 	orr.w	r2, r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a4c:	e007      	b.n	8004a5e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f042 0201 	orr.w	r2, r2, #1
 8004a5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	40010000 	.word	0x40010000
 8004a6c:	40000400 	.word	0x40000400
 8004a70:	40000800 	.word	0x40000800
 8004a74:	40000c00 	.word	0x40000c00
 8004a78:	40014000 	.word	0x40014000

08004a7c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d101      	bne.n	8004a90 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e097      	b.n	8004bc0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d106      	bne.n	8004aaa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f7fd fa71 	bl	8001f8c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2202      	movs	r2, #2
 8004aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6812      	ldr	r2, [r2, #0]
 8004abc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ac0:	f023 0307 	bic.w	r3, r3, #7
 8004ac4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	3304      	adds	r3, #4
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	f000 fa91 	bl	8004ff8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6a1b      	ldr	r3, [r3, #32]
 8004aec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004afe:	f023 0303 	bic.w	r3, r3, #3
 8004b02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	021b      	lsls	r3, r3, #8
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004b1c:	f023 030c 	bic.w	r3, r3, #12
 8004b20:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	68da      	ldr	r2, [r3, #12]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	021b      	lsls	r3, r3, #8
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	011a      	lsls	r2, r3, #4
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	031b      	lsls	r3, r3, #12
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004b5a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004b62:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	011b      	lsls	r3, r3, #4
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3718      	adds	r7, #24
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bd8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004be0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004be8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004bf0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d110      	bne.n	8004c1a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004bf8:	7bfb      	ldrb	r3, [r7, #15]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d102      	bne.n	8004c04 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004bfe:	7b7b      	ldrb	r3, [r7, #13]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d001      	beq.n	8004c08 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e069      	b.n	8004cdc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2202      	movs	r2, #2
 8004c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c18:	e031      	b.n	8004c7e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	d110      	bne.n	8004c42 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c20:	7bbb      	ldrb	r3, [r7, #14]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d102      	bne.n	8004c2c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c26:	7b3b      	ldrb	r3, [r7, #12]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d001      	beq.n	8004c30 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e055      	b.n	8004cdc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2202      	movs	r2, #2
 8004c34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c40:	e01d      	b.n	8004c7e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c42:	7bfb      	ldrb	r3, [r7, #15]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d108      	bne.n	8004c5a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c48:	7bbb      	ldrb	r3, [r7, #14]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d105      	bne.n	8004c5a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c4e:	7b7b      	ldrb	r3, [r7, #13]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d102      	bne.n	8004c5a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c54:	7b3b      	ldrb	r3, [r7, #12]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d001      	beq.n	8004c5e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e03e      	b.n	8004cdc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2202      	movs	r2, #2
 8004c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2202      	movs	r2, #2
 8004c6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2202      	movs	r2, #2
 8004c72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2202      	movs	r2, #2
 8004c7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d003      	beq.n	8004c8c <HAL_TIM_Encoder_Start+0xc4>
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	2b04      	cmp	r3, #4
 8004c88:	d008      	beq.n	8004c9c <HAL_TIM_Encoder_Start+0xd4>
 8004c8a:	e00f      	b.n	8004cac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2201      	movs	r2, #1
 8004c92:	2100      	movs	r1, #0
 8004c94:	4618      	mov	r0, r3
 8004c96:	f000 fc61 	bl	800555c <TIM_CCxChannelCmd>
      break;
 8004c9a:	e016      	b.n	8004cca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	2104      	movs	r1, #4
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f000 fc59 	bl	800555c <TIM_CCxChannelCmd>
      break;
 8004caa:	e00e      	b.n	8004cca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 fc51 	bl	800555c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	2104      	movs	r1, #4
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 fc4a 	bl	800555c <TIM_CCxChannelCmd>
      break;
 8004cc8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f042 0201 	orr.w	r2, r2, #1
 8004cd8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d101      	bne.n	8004d02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004cfe:	2302      	movs	r3, #2
 8004d00:	e0ae      	b.n	8004e60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b0c      	cmp	r3, #12
 8004d0e:	f200 809f 	bhi.w	8004e50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d12:	a201      	add	r2, pc, #4	; (adr r2, 8004d18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d18:	08004d4d 	.word	0x08004d4d
 8004d1c:	08004e51 	.word	0x08004e51
 8004d20:	08004e51 	.word	0x08004e51
 8004d24:	08004e51 	.word	0x08004e51
 8004d28:	08004d8d 	.word	0x08004d8d
 8004d2c:	08004e51 	.word	0x08004e51
 8004d30:	08004e51 	.word	0x08004e51
 8004d34:	08004e51 	.word	0x08004e51
 8004d38:	08004dcf 	.word	0x08004dcf
 8004d3c:	08004e51 	.word	0x08004e51
 8004d40:	08004e51 	.word	0x08004e51
 8004d44:	08004e51 	.word	0x08004e51
 8004d48:	08004e0f 	.word	0x08004e0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68b9      	ldr	r1, [r7, #8]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f000 f9dc 	bl	8005110 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	699a      	ldr	r2, [r3, #24]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f042 0208 	orr.w	r2, r2, #8
 8004d66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	699a      	ldr	r2, [r3, #24]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 0204 	bic.w	r2, r2, #4
 8004d76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6999      	ldr	r1, [r3, #24]
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	691a      	ldr	r2, [r3, #16]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	619a      	str	r2, [r3, #24]
      break;
 8004d8a:	e064      	b.n	8004e56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68b9      	ldr	r1, [r7, #8]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 fa22 	bl	80051dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	699a      	ldr	r2, [r3, #24]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004da6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	699a      	ldr	r2, [r3, #24]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004db6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6999      	ldr	r1, [r3, #24]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	021a      	lsls	r2, r3, #8
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	619a      	str	r2, [r3, #24]
      break;
 8004dcc:	e043      	b.n	8004e56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68b9      	ldr	r1, [r7, #8]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 fa6d 	bl	80052b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	69da      	ldr	r2, [r3, #28]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f042 0208 	orr.w	r2, r2, #8
 8004de8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	69da      	ldr	r2, [r3, #28]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0204 	bic.w	r2, r2, #4
 8004df8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	69d9      	ldr	r1, [r3, #28]
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	691a      	ldr	r2, [r3, #16]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	61da      	str	r2, [r3, #28]
      break;
 8004e0c:	e023      	b.n	8004e56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68b9      	ldr	r1, [r7, #8]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 fab7 	bl	8005388 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69da      	ldr	r2, [r3, #28]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	69da      	ldr	r2, [r3, #28]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	69d9      	ldr	r1, [r3, #28]
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	021a      	lsls	r2, r3, #8
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	61da      	str	r2, [r3, #28]
      break;
 8004e4e:	e002      	b.n	8004e56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	75fb      	strb	r3, [r7, #23]
      break;
 8004e54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3718      	adds	r7, #24
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e72:	2300      	movs	r3, #0
 8004e74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d101      	bne.n	8004e84 <HAL_TIM_ConfigClockSource+0x1c>
 8004e80:	2302      	movs	r3, #2
 8004e82:	e0b4      	b.n	8004fee <HAL_TIM_ConfigClockSource+0x186>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ea2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004eaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ebc:	d03e      	beq.n	8004f3c <HAL_TIM_ConfigClockSource+0xd4>
 8004ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ec2:	f200 8087 	bhi.w	8004fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eca:	f000 8086 	beq.w	8004fda <HAL_TIM_ConfigClockSource+0x172>
 8004ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed2:	d87f      	bhi.n	8004fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ed4:	2b70      	cmp	r3, #112	; 0x70
 8004ed6:	d01a      	beq.n	8004f0e <HAL_TIM_ConfigClockSource+0xa6>
 8004ed8:	2b70      	cmp	r3, #112	; 0x70
 8004eda:	d87b      	bhi.n	8004fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004edc:	2b60      	cmp	r3, #96	; 0x60
 8004ede:	d050      	beq.n	8004f82 <HAL_TIM_ConfigClockSource+0x11a>
 8004ee0:	2b60      	cmp	r3, #96	; 0x60
 8004ee2:	d877      	bhi.n	8004fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ee4:	2b50      	cmp	r3, #80	; 0x50
 8004ee6:	d03c      	beq.n	8004f62 <HAL_TIM_ConfigClockSource+0xfa>
 8004ee8:	2b50      	cmp	r3, #80	; 0x50
 8004eea:	d873      	bhi.n	8004fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004eec:	2b40      	cmp	r3, #64	; 0x40
 8004eee:	d058      	beq.n	8004fa2 <HAL_TIM_ConfigClockSource+0x13a>
 8004ef0:	2b40      	cmp	r3, #64	; 0x40
 8004ef2:	d86f      	bhi.n	8004fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ef4:	2b30      	cmp	r3, #48	; 0x30
 8004ef6:	d064      	beq.n	8004fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8004ef8:	2b30      	cmp	r3, #48	; 0x30
 8004efa:	d86b      	bhi.n	8004fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004efc:	2b20      	cmp	r3, #32
 8004efe:	d060      	beq.n	8004fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8004f00:	2b20      	cmp	r3, #32
 8004f02:	d867      	bhi.n	8004fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d05c      	beq.n	8004fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8004f08:	2b10      	cmp	r3, #16
 8004f0a:	d05a      	beq.n	8004fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8004f0c:	e062      	b.n	8004fd4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f1e:	f000 fafd 	bl	800551c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	609a      	str	r2, [r3, #8]
      break;
 8004f3a:	e04f      	b.n	8004fdc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f4c:	f000 fae6 	bl	800551c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689a      	ldr	r2, [r3, #8]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f5e:	609a      	str	r2, [r3, #8]
      break;
 8004f60:	e03c      	b.n	8004fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f6e:	461a      	mov	r2, r3
 8004f70:	f000 fa5a 	bl	8005428 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2150      	movs	r1, #80	; 0x50
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 fab3 	bl	80054e6 <TIM_ITRx_SetConfig>
      break;
 8004f80:	e02c      	b.n	8004fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f8e:	461a      	mov	r2, r3
 8004f90:	f000 fa79 	bl	8005486 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2160      	movs	r1, #96	; 0x60
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 faa3 	bl	80054e6 <TIM_ITRx_SetConfig>
      break;
 8004fa0:	e01c      	b.n	8004fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fae:	461a      	mov	r2, r3
 8004fb0:	f000 fa3a 	bl	8005428 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2140      	movs	r1, #64	; 0x40
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 fa93 	bl	80054e6 <TIM_ITRx_SetConfig>
      break;
 8004fc0:	e00c      	b.n	8004fdc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4619      	mov	r1, r3
 8004fcc:	4610      	mov	r0, r2
 8004fce:	f000 fa8a 	bl	80054e6 <TIM_ITRx_SetConfig>
      break;
 8004fd2:	e003      	b.n	8004fdc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8004fd8:	e000      	b.n	8004fdc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004fda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
	...

08004ff8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a3a      	ldr	r2, [pc, #232]	; (80050f4 <TIM_Base_SetConfig+0xfc>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d00f      	beq.n	8005030 <TIM_Base_SetConfig+0x38>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005016:	d00b      	beq.n	8005030 <TIM_Base_SetConfig+0x38>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a37      	ldr	r2, [pc, #220]	; (80050f8 <TIM_Base_SetConfig+0x100>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d007      	beq.n	8005030 <TIM_Base_SetConfig+0x38>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a36      	ldr	r2, [pc, #216]	; (80050fc <TIM_Base_SetConfig+0x104>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d003      	beq.n	8005030 <TIM_Base_SetConfig+0x38>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a35      	ldr	r2, [pc, #212]	; (8005100 <TIM_Base_SetConfig+0x108>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d108      	bne.n	8005042 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005036:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	4313      	orrs	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a2b      	ldr	r2, [pc, #172]	; (80050f4 <TIM_Base_SetConfig+0xfc>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d01b      	beq.n	8005082 <TIM_Base_SetConfig+0x8a>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005050:	d017      	beq.n	8005082 <TIM_Base_SetConfig+0x8a>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a28      	ldr	r2, [pc, #160]	; (80050f8 <TIM_Base_SetConfig+0x100>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d013      	beq.n	8005082 <TIM_Base_SetConfig+0x8a>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a27      	ldr	r2, [pc, #156]	; (80050fc <TIM_Base_SetConfig+0x104>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d00f      	beq.n	8005082 <TIM_Base_SetConfig+0x8a>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a26      	ldr	r2, [pc, #152]	; (8005100 <TIM_Base_SetConfig+0x108>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d00b      	beq.n	8005082 <TIM_Base_SetConfig+0x8a>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a25      	ldr	r2, [pc, #148]	; (8005104 <TIM_Base_SetConfig+0x10c>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d007      	beq.n	8005082 <TIM_Base_SetConfig+0x8a>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a24      	ldr	r2, [pc, #144]	; (8005108 <TIM_Base_SetConfig+0x110>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d003      	beq.n	8005082 <TIM_Base_SetConfig+0x8a>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a23      	ldr	r2, [pc, #140]	; (800510c <TIM_Base_SetConfig+0x114>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d108      	bne.n	8005094 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	4313      	orrs	r3, r2
 8005092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	4313      	orrs	r3, r2
 80050a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	689a      	ldr	r2, [r3, #8]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a0e      	ldr	r2, [pc, #56]	; (80050f4 <TIM_Base_SetConfig+0xfc>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d103      	bne.n	80050c8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	691a      	ldr	r2, [r3, #16]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d105      	bne.n	80050e6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	f023 0201 	bic.w	r2, r3, #1
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	611a      	str	r2, [r3, #16]
  }
}
 80050e6:	bf00      	nop
 80050e8:	3714      	adds	r7, #20
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	40010000 	.word	0x40010000
 80050f8:	40000400 	.word	0x40000400
 80050fc:	40000800 	.word	0x40000800
 8005100:	40000c00 	.word	0x40000c00
 8005104:	40014000 	.word	0x40014000
 8005108:	40014400 	.word	0x40014400
 800510c:	40014800 	.word	0x40014800

08005110 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005110:	b480      	push	{r7}
 8005112:	b087      	sub	sp, #28
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a1b      	ldr	r3, [r3, #32]
 8005124:	f023 0201 	bic.w	r2, r3, #1
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800513e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f023 0303 	bic.w	r3, r3, #3
 8005146:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	4313      	orrs	r3, r2
 8005150:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	f023 0302 	bic.w	r3, r3, #2
 8005158:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	4313      	orrs	r3, r2
 8005162:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a1c      	ldr	r2, [pc, #112]	; (80051d8 <TIM_OC1_SetConfig+0xc8>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d10c      	bne.n	8005186 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	f023 0308 	bic.w	r3, r3, #8
 8005172:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	4313      	orrs	r3, r2
 800517c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f023 0304 	bic.w	r3, r3, #4
 8005184:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a13      	ldr	r2, [pc, #76]	; (80051d8 <TIM_OC1_SetConfig+0xc8>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d111      	bne.n	80051b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005194:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800519c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	685a      	ldr	r2, [r3, #4]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	621a      	str	r2, [r3, #32]
}
 80051cc:	bf00      	nop
 80051ce:	371c      	adds	r7, #28
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr
 80051d8:	40010000 	.word	0x40010000

080051dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051dc:	b480      	push	{r7}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	f023 0210 	bic.w	r2, r3, #16
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800520a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	021b      	lsls	r3, r3, #8
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	4313      	orrs	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	f023 0320 	bic.w	r3, r3, #32
 8005226:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	011b      	lsls	r3, r3, #4
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	4313      	orrs	r3, r2
 8005232:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a1e      	ldr	r2, [pc, #120]	; (80052b0 <TIM_OC2_SetConfig+0xd4>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d10d      	bne.n	8005258 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005242:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	011b      	lsls	r3, r3, #4
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	4313      	orrs	r3, r2
 800524e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005256:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a15      	ldr	r2, [pc, #84]	; (80052b0 <TIM_OC2_SetConfig+0xd4>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d113      	bne.n	8005288 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005266:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800526e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	695b      	ldr	r3, [r3, #20]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	4313      	orrs	r3, r2
 800527a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	4313      	orrs	r3, r2
 8005286:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	621a      	str	r2, [r3, #32]
}
 80052a2:	bf00      	nop
 80052a4:	371c      	adds	r7, #28
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	40010000 	.word	0x40010000

080052b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b087      	sub	sp, #28
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a1b      	ldr	r3, [r3, #32]
 80052c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	69db      	ldr	r3, [r3, #28]
 80052da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f023 0303 	bic.w	r3, r3, #3
 80052ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	021b      	lsls	r3, r3, #8
 8005304:	697a      	ldr	r2, [r7, #20]
 8005306:	4313      	orrs	r3, r2
 8005308:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a1d      	ldr	r2, [pc, #116]	; (8005384 <TIM_OC3_SetConfig+0xd0>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d10d      	bne.n	800532e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005318:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	021b      	lsls	r3, r3, #8
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	4313      	orrs	r3, r2
 8005324:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800532c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a14      	ldr	r2, [pc, #80]	; (8005384 <TIM_OC3_SetConfig+0xd0>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d113      	bne.n	800535e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800533c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005344:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	011b      	lsls	r3, r3, #4
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	4313      	orrs	r3, r2
 8005350:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	4313      	orrs	r3, r2
 800535c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	685a      	ldr	r2, [r3, #4]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	621a      	str	r2, [r3, #32]
}
 8005378:	bf00      	nop
 800537a:	371c      	adds	r7, #28
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr
 8005384:	40010000 	.word	0x40010000

08005388 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005388:	b480      	push	{r7}
 800538a:	b087      	sub	sp, #28
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a1b      	ldr	r3, [r3, #32]
 800539c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	021b      	lsls	r3, r3, #8
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	031b      	lsls	r3, r3, #12
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	4313      	orrs	r3, r2
 80053de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a10      	ldr	r2, [pc, #64]	; (8005424 <TIM_OC4_SetConfig+0x9c>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d109      	bne.n	80053fc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	019b      	lsls	r3, r3, #6
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	693a      	ldr	r2, [r7, #16]
 8005414:	621a      	str	r2, [r3, #32]
}
 8005416:	bf00      	nop
 8005418:	371c      	adds	r7, #28
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	40010000 	.word	0x40010000

08005428 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005428:	b480      	push	{r7}
 800542a:	b087      	sub	sp, #28
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	f023 0201 	bic.w	r2, r3, #1
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005452:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	011b      	lsls	r3, r3, #4
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	4313      	orrs	r3, r2
 800545c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f023 030a 	bic.w	r3, r3, #10
 8005464:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	4313      	orrs	r3, r2
 800546c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	621a      	str	r2, [r3, #32]
}
 800547a:	bf00      	nop
 800547c:	371c      	adds	r7, #28
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005486:	b480      	push	{r7}
 8005488:	b087      	sub	sp, #28
 800548a:	af00      	add	r7, sp, #0
 800548c:	60f8      	str	r0, [r7, #12]
 800548e:	60b9      	str	r1, [r7, #8]
 8005490:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6a1b      	ldr	r3, [r3, #32]
 800549c:	f023 0210 	bic.w	r2, r3, #16
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	031b      	lsls	r3, r3, #12
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	011b      	lsls	r3, r3, #4
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	621a      	str	r2, [r3, #32]
}
 80054da:	bf00      	nop
 80054dc:	371c      	adds	r7, #28
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b085      	sub	sp, #20
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
 80054ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054fe:	683a      	ldr	r2, [r7, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4313      	orrs	r3, r2
 8005504:	f043 0307 	orr.w	r3, r3, #7
 8005508:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	609a      	str	r2, [r3, #8]
}
 8005510:	bf00      	nop
 8005512:	3714      	adds	r7, #20
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800551c:	b480      	push	{r7}
 800551e:	b087      	sub	sp, #28
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
 8005528:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005536:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	021a      	lsls	r2, r3, #8
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	431a      	orrs	r2, r3
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	4313      	orrs	r3, r2
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	4313      	orrs	r3, r2
 8005548:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	609a      	str	r2, [r3, #8]
}
 8005550:	bf00      	nop
 8005552:	371c      	adds	r7, #28
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800555c:	b480      	push	{r7}
 800555e:	b087      	sub	sp, #28
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	f003 031f 	and.w	r3, r3, #31
 800556e:	2201      	movs	r2, #1
 8005570:	fa02 f303 	lsl.w	r3, r2, r3
 8005574:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6a1a      	ldr	r2, [r3, #32]
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	43db      	mvns	r3, r3
 800557e:	401a      	ands	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6a1a      	ldr	r2, [r3, #32]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	f003 031f 	and.w	r3, r3, #31
 800558e:	6879      	ldr	r1, [r7, #4]
 8005590:	fa01 f303 	lsl.w	r3, r1, r3
 8005594:	431a      	orrs	r2, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	621a      	str	r2, [r3, #32]
}
 800559a:	bf00      	nop
 800559c:	371c      	adds	r7, #28
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
	...

080055a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d101      	bne.n	80055c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055bc:	2302      	movs	r3, #2
 80055be:	e050      	b.n	8005662 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a1c      	ldr	r2, [pc, #112]	; (8005670 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d018      	beq.n	8005636 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800560c:	d013      	beq.n	8005636 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a18      	ldr	r2, [pc, #96]	; (8005674 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d00e      	beq.n	8005636 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a16      	ldr	r2, [pc, #88]	; (8005678 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d009      	beq.n	8005636 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a15      	ldr	r2, [pc, #84]	; (800567c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d004      	beq.n	8005636 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a13      	ldr	r2, [pc, #76]	; (8005680 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d10c      	bne.n	8005650 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800563c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	4313      	orrs	r3, r2
 8005646:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68ba      	ldr	r2, [r7, #8]
 800564e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	40010000 	.word	0x40010000
 8005674:	40000400 	.word	0x40000400
 8005678:	40000800 	.word	0x40000800
 800567c:	40000c00 	.word	0x40000c00
 8005680:	40014000 	.word	0x40014000

08005684 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800568e:	2300      	movs	r3, #0
 8005690:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005698:	2b01      	cmp	r3, #1
 800569a:	d101      	bne.n	80056a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800569c:	2302      	movs	r3, #2
 800569e:	e03d      	b.n	800571c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4313      	orrs	r3, r2
 80056de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	695b      	ldr	r3, [r3, #20]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	4313      	orrs	r3, r2
 8005708:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3714      	adds	r7, #20
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d101      	bne.n	800573a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e042      	b.n	80057c0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d106      	bne.n	8005754 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7fc fdb2 	bl	80022b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2224      	movs	r2, #36	; 0x24
 8005758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68da      	ldr	r2, [r3, #12]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800576a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 fdbd 	bl	80062ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	691a      	ldr	r2, [r3, #16]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005780:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	695a      	ldr	r2, [r3, #20]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005790:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68da      	ldr	r2, [r3, #12]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2220      	movs	r2, #32
 80057ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2220      	movs	r2, #32
 80057b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b08a      	sub	sp, #40	; 0x28
 80057cc:	af02      	add	r7, sp, #8
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	603b      	str	r3, [r7, #0]
 80057d4:	4613      	mov	r3, r2
 80057d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057d8:	2300      	movs	r3, #0
 80057da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	2b20      	cmp	r3, #32
 80057e6:	d175      	bne.n	80058d4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d002      	beq.n	80057f4 <HAL_UART_Transmit+0x2c>
 80057ee:	88fb      	ldrh	r3, [r7, #6]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d101      	bne.n	80057f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e06e      	b.n	80058d6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2221      	movs	r2, #33	; 0x21
 8005802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005806:	f7fc fe7d 	bl	8002504 <HAL_GetTick>
 800580a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	88fa      	ldrh	r2, [r7, #6]
 8005810:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	88fa      	ldrh	r2, [r7, #6]
 8005816:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005820:	d108      	bne.n	8005834 <HAL_UART_Transmit+0x6c>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d104      	bne.n	8005834 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800582a:	2300      	movs	r3, #0
 800582c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	61bb      	str	r3, [r7, #24]
 8005832:	e003      	b.n	800583c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005838:	2300      	movs	r3, #0
 800583a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800583c:	e02e      	b.n	800589c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	2200      	movs	r2, #0
 8005846:	2180      	movs	r1, #128	; 0x80
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 fb1f 	bl	8005e8c <UART_WaitOnFlagUntilTimeout>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d005      	beq.n	8005860 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2220      	movs	r2, #32
 8005858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e03a      	b.n	80058d6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10b      	bne.n	800587e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	881b      	ldrh	r3, [r3, #0]
 800586a:	461a      	mov	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005874:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	3302      	adds	r3, #2
 800587a:	61bb      	str	r3, [r7, #24]
 800587c:	e007      	b.n	800588e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	781a      	ldrb	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	3301      	adds	r3, #1
 800588c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005892:	b29b      	uxth	r3, r3
 8005894:	3b01      	subs	r3, #1
 8005896:	b29a      	uxth	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1cb      	bne.n	800583e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	9300      	str	r3, [sp, #0]
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	2200      	movs	r2, #0
 80058ae:	2140      	movs	r1, #64	; 0x40
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f000 faeb 	bl	8005e8c <UART_WaitOnFlagUntilTimeout>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d005      	beq.n	80058c8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2220      	movs	r2, #32
 80058c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e006      	b.n	80058d6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2220      	movs	r2, #32
 80058cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80058d0:	2300      	movs	r3, #0
 80058d2:	e000      	b.n	80058d6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80058d4:	2302      	movs	r3, #2
  }
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3720      	adds	r7, #32
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b084      	sub	sp, #16
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	60f8      	str	r0, [r7, #12]
 80058e6:	60b9      	str	r1, [r7, #8]
 80058e8:	4613      	mov	r3, r2
 80058ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	2b20      	cmp	r3, #32
 80058f6:	d112      	bne.n	800591e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d002      	beq.n	8005904 <HAL_UART_Receive_IT+0x26>
 80058fe:	88fb      	ldrh	r3, [r7, #6]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d101      	bne.n	8005908 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e00b      	b.n	8005920 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800590e:	88fb      	ldrh	r3, [r7, #6]
 8005910:	461a      	mov	r2, r3
 8005912:	68b9      	ldr	r1, [r7, #8]
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f000 fb12 	bl	8005f3e <UART_Start_Receive_IT>
 800591a:	4603      	mov	r3, r0
 800591c:	e000      	b.n	8005920 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800591e:	2302      	movs	r3, #2
  }
}
 8005920:	4618      	mov	r0, r3
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b0ba      	sub	sp, #232	; 0xe8
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800594e:	2300      	movs	r3, #0
 8005950:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005954:	2300      	movs	r3, #0
 8005956:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800595a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800595e:	f003 030f 	and.w	r3, r3, #15
 8005962:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005966:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10f      	bne.n	800598e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800596e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005972:	f003 0320 	and.w	r3, r3, #32
 8005976:	2b00      	cmp	r3, #0
 8005978:	d009      	beq.n	800598e <HAL_UART_IRQHandler+0x66>
 800597a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800597e:	f003 0320 	and.w	r3, r3, #32
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 fbf2 	bl	8006170 <UART_Receive_IT>
      return;
 800598c:	e25b      	b.n	8005e46 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800598e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005992:	2b00      	cmp	r3, #0
 8005994:	f000 80de 	beq.w	8005b54 <HAL_UART_IRQHandler+0x22c>
 8005998:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d106      	bne.n	80059b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80059a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f000 80d1 	beq.w	8005b54 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00b      	beq.n	80059d6 <HAL_UART_IRQHandler+0xae>
 80059be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d005      	beq.n	80059d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ce:	f043 0201 	orr.w	r2, r3, #1
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059da:	f003 0304 	and.w	r3, r3, #4
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00b      	beq.n	80059fa <HAL_UART_IRQHandler+0xd2>
 80059e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d005      	beq.n	80059fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f2:	f043 0202 	orr.w	r2, r3, #2
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00b      	beq.n	8005a1e <HAL_UART_IRQHandler+0xf6>
 8005a06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d005      	beq.n	8005a1e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a16:	f043 0204 	orr.w	r2, r3, #4
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a22:	f003 0308 	and.w	r3, r3, #8
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d011      	beq.n	8005a4e <HAL_UART_IRQHandler+0x126>
 8005a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a2e:	f003 0320 	and.w	r3, r3, #32
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d105      	bne.n	8005a42 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d005      	beq.n	8005a4e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a46:	f043 0208 	orr.w	r2, r3, #8
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f000 81f2 	beq.w	8005e3c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a5c:	f003 0320 	and.w	r3, r3, #32
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d008      	beq.n	8005a76 <HAL_UART_IRQHandler+0x14e>
 8005a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a68:	f003 0320 	and.w	r3, r3, #32
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d002      	beq.n	8005a76 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 fb7d 	bl	8006170 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a80:	2b40      	cmp	r3, #64	; 0x40
 8005a82:	bf0c      	ite	eq
 8005a84:	2301      	moveq	r3, #1
 8005a86:	2300      	movne	r3, #0
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a92:	f003 0308 	and.w	r3, r3, #8
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d103      	bne.n	8005aa2 <HAL_UART_IRQHandler+0x17a>
 8005a9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d04f      	beq.n	8005b42 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fa85 	bl	8005fb2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab2:	2b40      	cmp	r3, #64	; 0x40
 8005ab4:	d141      	bne.n	8005b3a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	3314      	adds	r3, #20
 8005abc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ac4:	e853 3f00 	ldrex	r3, [r3]
 8005ac8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005acc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ad0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ad4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	3314      	adds	r3, #20
 8005ade:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ae2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005ae6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005aee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005af2:	e841 2300 	strex	r3, r2, [r1]
 8005af6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005afa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1d9      	bne.n	8005ab6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d013      	beq.n	8005b32 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b0e:	4a7e      	ldr	r2, [pc, #504]	; (8005d08 <HAL_UART_IRQHandler+0x3e0>)
 8005b10:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7fc fea5 	bl	8002866 <HAL_DMA_Abort_IT>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d016      	beq.n	8005b50 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005b2c:	4610      	mov	r0, r2
 8005b2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b30:	e00e      	b.n	8005b50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f994 	bl	8005e60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b38:	e00a      	b.n	8005b50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f990 	bl	8005e60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b40:	e006      	b.n	8005b50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f98c 	bl	8005e60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005b4e:	e175      	b.n	8005e3c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b50:	bf00      	nop
    return;
 8005b52:	e173      	b.n	8005e3c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	f040 814f 	bne.w	8005dfc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b62:	f003 0310 	and.w	r3, r3, #16
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f000 8148 	beq.w	8005dfc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b70:	f003 0310 	and.w	r3, r3, #16
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 8141 	beq.w	8005dfc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	60bb      	str	r3, [r7, #8]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	60bb      	str	r3, [r7, #8]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	60bb      	str	r3, [r7, #8]
 8005b8e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9a:	2b40      	cmp	r3, #64	; 0x40
 8005b9c:	f040 80b6 	bne.w	8005d0c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 8145 	beq.w	8005e40 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005bba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	f080 813e 	bcs.w	8005e40 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bd6:	f000 8088 	beq.w	8005cea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	330c      	adds	r3, #12
 8005be0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005be8:	e853 3f00 	ldrex	r3, [r3]
 8005bec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005bf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bf8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	330c      	adds	r3, #12
 8005c02:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005c06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c16:	e841 2300 	strex	r3, r2, [r1]
 8005c1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1d9      	bne.n	8005bda <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	3314      	adds	r3, #20
 8005c2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c30:	e853 3f00 	ldrex	r3, [r3]
 8005c34:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c38:	f023 0301 	bic.w	r3, r3, #1
 8005c3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	3314      	adds	r3, #20
 8005c46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c4a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c4e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c50:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c56:	e841 2300 	strex	r3, r2, [r1]
 8005c5a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1e1      	bne.n	8005c26 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	3314      	adds	r3, #20
 8005c68:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c6c:	e853 3f00 	ldrex	r3, [r3]
 8005c70:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	3314      	adds	r3, #20
 8005c82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c8e:	e841 2300 	strex	r3, r2, [r1]
 8005c92:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1e3      	bne.n	8005c62 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2220      	movs	r2, #32
 8005c9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	330c      	adds	r3, #12
 8005cae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cb2:	e853 3f00 	ldrex	r3, [r3]
 8005cb6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cba:	f023 0310 	bic.w	r3, r3, #16
 8005cbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	330c      	adds	r3, #12
 8005cc8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005ccc:	65ba      	str	r2, [r7, #88]	; 0x58
 8005cce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005cd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005cd4:	e841 2300 	strex	r3, r2, [r1]
 8005cd8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1e3      	bne.n	8005ca8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f7fc fd4e 	bl	8002786 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2202      	movs	r2, #2
 8005cee:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	4619      	mov	r1, r3
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 f8b7 	bl	8005e74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d06:	e09b      	b.n	8005e40 <HAL_UART_IRQHandler+0x518>
 8005d08:	08006079 	.word	0x08006079
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f000 808e 	beq.w	8005e44 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005d28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f000 8089 	beq.w	8005e44 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	330c      	adds	r3, #12
 8005d38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3c:	e853 3f00 	ldrex	r3, [r3]
 8005d40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	330c      	adds	r3, #12
 8005d52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005d56:	647a      	str	r2, [r7, #68]	; 0x44
 8005d58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d5e:	e841 2300 	strex	r3, r2, [r1]
 8005d62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1e3      	bne.n	8005d32 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	3314      	adds	r3, #20
 8005d70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	e853 3f00 	ldrex	r3, [r3]
 8005d78:	623b      	str	r3, [r7, #32]
   return(result);
 8005d7a:	6a3b      	ldr	r3, [r7, #32]
 8005d7c:	f023 0301 	bic.w	r3, r3, #1
 8005d80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3314      	adds	r3, #20
 8005d8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d8e:	633a      	str	r2, [r7, #48]	; 0x30
 8005d90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d96:	e841 2300 	strex	r3, r2, [r1]
 8005d9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1e3      	bne.n	8005d6a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2220      	movs	r2, #32
 8005da6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	330c      	adds	r3, #12
 8005db6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	e853 3f00 	ldrex	r3, [r3]
 8005dbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f023 0310 	bic.w	r3, r3, #16
 8005dc6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	330c      	adds	r3, #12
 8005dd0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005dd4:	61fa      	str	r2, [r7, #28]
 8005dd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd8:	69b9      	ldr	r1, [r7, #24]
 8005dda:	69fa      	ldr	r2, [r7, #28]
 8005ddc:	e841 2300 	strex	r3, r2, [r1]
 8005de0:	617b      	str	r3, [r7, #20]
   return(result);
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1e3      	bne.n	8005db0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005dee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005df2:	4619      	mov	r1, r3
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 f83d 	bl	8005e74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005dfa:	e023      	b.n	8005e44 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d009      	beq.n	8005e1c <HAL_UART_IRQHandler+0x4f4>
 8005e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d003      	beq.n	8005e1c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 f943 	bl	80060a0 <UART_Transmit_IT>
    return;
 8005e1a:	e014      	b.n	8005e46 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00e      	beq.n	8005e46 <HAL_UART_IRQHandler+0x51e>
 8005e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d008      	beq.n	8005e46 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 f983 	bl	8006140 <UART_EndTransmit_IT>
    return;
 8005e3a:	e004      	b.n	8005e46 <HAL_UART_IRQHandler+0x51e>
    return;
 8005e3c:	bf00      	nop
 8005e3e:	e002      	b.n	8005e46 <HAL_UART_IRQHandler+0x51e>
      return;
 8005e40:	bf00      	nop
 8005e42:	e000      	b.n	8005e46 <HAL_UART_IRQHandler+0x51e>
      return;
 8005e44:	bf00      	nop
  }
}
 8005e46:	37e8      	adds	r7, #232	; 0xe8
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e68:	bf00      	nop
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	603b      	str	r3, [r7, #0]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e9c:	e03b      	b.n	8005f16 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e9e:	6a3b      	ldr	r3, [r7, #32]
 8005ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea4:	d037      	beq.n	8005f16 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ea6:	f7fc fb2d 	bl	8002504 <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	6a3a      	ldr	r2, [r7, #32]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d302      	bcc.n	8005ebc <UART_WaitOnFlagUntilTimeout+0x30>
 8005eb6:	6a3b      	ldr	r3, [r7, #32]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d101      	bne.n	8005ec0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e03a      	b.n	8005f36 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	f003 0304 	and.w	r3, r3, #4
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d023      	beq.n	8005f16 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	2b80      	cmp	r3, #128	; 0x80
 8005ed2:	d020      	beq.n	8005f16 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	2b40      	cmp	r3, #64	; 0x40
 8005ed8:	d01d      	beq.n	8005f16 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0308 	and.w	r3, r3, #8
 8005ee4:	2b08      	cmp	r3, #8
 8005ee6:	d116      	bne.n	8005f16 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005ee8:	2300      	movs	r3, #0
 8005eea:	617b      	str	r3, [r7, #20]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	617b      	str	r3, [r7, #20]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	617b      	str	r3, [r7, #20]
 8005efc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f000 f857 	bl	8005fb2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2208      	movs	r2, #8
 8005f08:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e00f      	b.n	8005f36 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	4013      	ands	r3, r2
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	bf0c      	ite	eq
 8005f26:	2301      	moveq	r3, #1
 8005f28:	2300      	movne	r3, #0
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	79fb      	ldrb	r3, [r7, #7]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d0b4      	beq.n	8005e9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3718      	adds	r7, #24
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b085      	sub	sp, #20
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	60f8      	str	r0, [r7, #12]
 8005f46:	60b9      	str	r1, [r7, #8]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	68ba      	ldr	r2, [r7, #8]
 8005f50:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	88fa      	ldrh	r2, [r7, #6]
 8005f56:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	88fa      	ldrh	r2, [r7, #6]
 8005f5c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2222      	movs	r2, #34	; 0x22
 8005f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d007      	beq.n	8005f84 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68da      	ldr	r2, [r3, #12]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f82:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	695a      	ldr	r2, [r3, #20]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f042 0201 	orr.w	r2, r2, #1
 8005f92:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68da      	ldr	r2, [r3, #12]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f042 0220 	orr.w	r2, r2, #32
 8005fa2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3714      	adds	r7, #20
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b095      	sub	sp, #84	; 0x54
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	330c      	adds	r3, #12
 8005fc0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fc4:	e853 3f00 	ldrex	r3, [r3]
 8005fc8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	330c      	adds	r3, #12
 8005fd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fda:	643a      	str	r2, [r7, #64]	; 0x40
 8005fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fde:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fe0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fe2:	e841 2300 	strex	r3, r2, [r1]
 8005fe6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1e5      	bne.n	8005fba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	3314      	adds	r3, #20
 8005ff4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff6:	6a3b      	ldr	r3, [r7, #32]
 8005ff8:	e853 3f00 	ldrex	r3, [r3]
 8005ffc:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	f023 0301 	bic.w	r3, r3, #1
 8006004:	64bb      	str	r3, [r7, #72]	; 0x48
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	3314      	adds	r3, #20
 800600c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800600e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006010:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006012:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006014:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006016:	e841 2300 	strex	r3, r2, [r1]
 800601a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800601c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1e5      	bne.n	8005fee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006026:	2b01      	cmp	r3, #1
 8006028:	d119      	bne.n	800605e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	330c      	adds	r3, #12
 8006030:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	e853 3f00 	ldrex	r3, [r3]
 8006038:	60bb      	str	r3, [r7, #8]
   return(result);
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	f023 0310 	bic.w	r3, r3, #16
 8006040:	647b      	str	r3, [r7, #68]	; 0x44
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	330c      	adds	r3, #12
 8006048:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800604a:	61ba      	str	r2, [r7, #24]
 800604c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604e:	6979      	ldr	r1, [r7, #20]
 8006050:	69ba      	ldr	r2, [r7, #24]
 8006052:	e841 2300 	strex	r3, r2, [r1]
 8006056:	613b      	str	r3, [r7, #16]
   return(result);
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1e5      	bne.n	800602a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2220      	movs	r2, #32
 8006062:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800606c:	bf00      	nop
 800606e:	3754      	adds	r7, #84	; 0x54
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006084:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f7ff fee4 	bl	8005e60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006098:	bf00      	nop
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b21      	cmp	r3, #33	; 0x21
 80060b2:	d13e      	bne.n	8006132 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060bc:	d114      	bne.n	80060e8 <UART_Transmit_IT+0x48>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d110      	bne.n	80060e8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	881b      	ldrh	r3, [r3, #0]
 80060d0:	461a      	mov	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060da:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a1b      	ldr	r3, [r3, #32]
 80060e0:	1c9a      	adds	r2, r3, #2
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	621a      	str	r2, [r3, #32]
 80060e6:	e008      	b.n	80060fa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	1c59      	adds	r1, r3, #1
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	6211      	str	r1, [r2, #32]
 80060f2:	781a      	ldrb	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060fe:	b29b      	uxth	r3, r3
 8006100:	3b01      	subs	r3, #1
 8006102:	b29b      	uxth	r3, r3
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	4619      	mov	r1, r3
 8006108:	84d1      	strh	r1, [r2, #38]	; 0x26
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10f      	bne.n	800612e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68da      	ldr	r2, [r3, #12]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800611c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68da      	ldr	r2, [r3, #12]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800612c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800612e:	2300      	movs	r3, #0
 8006130:	e000      	b.n	8006134 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006132:	2302      	movs	r3, #2
  }
}
 8006134:	4618      	mov	r0, r3
 8006136:	3714      	adds	r7, #20
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68da      	ldr	r2, [r3, #12]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006156:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2220      	movs	r2, #32
 800615c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f7ff fe73 	bl	8005e4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3708      	adds	r7, #8
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b08c      	sub	sp, #48	; 0x30
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800617e:	b2db      	uxtb	r3, r3
 8006180:	2b22      	cmp	r3, #34	; 0x22
 8006182:	f040 80ae 	bne.w	80062e2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800618e:	d117      	bne.n	80061c0 <UART_Receive_IT+0x50>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d113      	bne.n	80061c0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006198:	2300      	movs	r3, #0
 800619a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b8:	1c9a      	adds	r2, r3, #2
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	629a      	str	r2, [r3, #40]	; 0x28
 80061be:	e026      	b.n	800620e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80061c6:	2300      	movs	r3, #0
 80061c8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061d2:	d007      	beq.n	80061e4 <UART_Receive_IT+0x74>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10a      	bne.n	80061f2 <UART_Receive_IT+0x82>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d106      	bne.n	80061f2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ee:	701a      	strb	r2, [r3, #0]
 80061f0:	e008      	b.n	8006204 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061fe:	b2da      	uxtb	r2, r3
 8006200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006202:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006208:	1c5a      	adds	r2, r3, #1
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006212:	b29b      	uxth	r3, r3
 8006214:	3b01      	subs	r3, #1
 8006216:	b29b      	uxth	r3, r3
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	4619      	mov	r1, r3
 800621c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800621e:	2b00      	cmp	r3, #0
 8006220:	d15d      	bne.n	80062de <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68da      	ldr	r2, [r3, #12]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f022 0220 	bic.w	r2, r2, #32
 8006230:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68da      	ldr	r2, [r3, #12]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006240:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	695a      	ldr	r2, [r3, #20]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f022 0201 	bic.w	r2, r2, #1
 8006250:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2220      	movs	r2, #32
 8006256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006264:	2b01      	cmp	r3, #1
 8006266:	d135      	bne.n	80062d4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	330c      	adds	r3, #12
 8006274:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	e853 3f00 	ldrex	r3, [r3]
 800627c:	613b      	str	r3, [r7, #16]
   return(result);
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	f023 0310 	bic.w	r3, r3, #16
 8006284:	627b      	str	r3, [r7, #36]	; 0x24
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	330c      	adds	r3, #12
 800628c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800628e:	623a      	str	r2, [r7, #32]
 8006290:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006292:	69f9      	ldr	r1, [r7, #28]
 8006294:	6a3a      	ldr	r2, [r7, #32]
 8006296:	e841 2300 	strex	r3, r2, [r1]
 800629a:	61bb      	str	r3, [r7, #24]
   return(result);
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1e5      	bne.n	800626e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0310 	and.w	r3, r3, #16
 80062ac:	2b10      	cmp	r3, #16
 80062ae:	d10a      	bne.n	80062c6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062b0:	2300      	movs	r3, #0
 80062b2:	60fb      	str	r3, [r7, #12]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	60fb      	str	r3, [r7, #12]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	60fb      	str	r3, [r7, #12]
 80062c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062ca:	4619      	mov	r1, r3
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f7ff fdd1 	bl	8005e74 <HAL_UARTEx_RxEventCallback>
 80062d2:	e002      	b.n	80062da <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f7fb fa2d 	bl	8001734 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80062da:	2300      	movs	r3, #0
 80062dc:	e002      	b.n	80062e4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80062de:	2300      	movs	r3, #0
 80062e0:	e000      	b.n	80062e4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80062e2:	2302      	movs	r3, #2
  }
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3730      	adds	r7, #48	; 0x30
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062f0:	b0c0      	sub	sp, #256	; 0x100
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006308:	68d9      	ldr	r1, [r3, #12]
 800630a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	ea40 0301 	orr.w	r3, r0, r1
 8006314:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800631a:	689a      	ldr	r2, [r3, #8]
 800631c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	431a      	orrs	r2, r3
 8006324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	431a      	orrs	r2, r3
 800632c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	4313      	orrs	r3, r2
 8006334:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006344:	f021 010c 	bic.w	r1, r1, #12
 8006348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006352:	430b      	orrs	r3, r1
 8006354:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006366:	6999      	ldr	r1, [r3, #24]
 8006368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	ea40 0301 	orr.w	r3, r0, r1
 8006372:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	4b8f      	ldr	r3, [pc, #572]	; (80065b8 <UART_SetConfig+0x2cc>)
 800637c:	429a      	cmp	r2, r3
 800637e:	d005      	beq.n	800638c <UART_SetConfig+0xa0>
 8006380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	4b8d      	ldr	r3, [pc, #564]	; (80065bc <UART_SetConfig+0x2d0>)
 8006388:	429a      	cmp	r2, r3
 800638a:	d104      	bne.n	8006396 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800638c:	f7fe fa14 	bl	80047b8 <HAL_RCC_GetPCLK2Freq>
 8006390:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006394:	e003      	b.n	800639e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006396:	f7fe f9fb 	bl	8004790 <HAL_RCC_GetPCLK1Freq>
 800639a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800639e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063a2:	69db      	ldr	r3, [r3, #28]
 80063a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063a8:	f040 810c 	bne.w	80065c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80063ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063b0:	2200      	movs	r2, #0
 80063b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80063b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80063ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80063be:	4622      	mov	r2, r4
 80063c0:	462b      	mov	r3, r5
 80063c2:	1891      	adds	r1, r2, r2
 80063c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80063c6:	415b      	adcs	r3, r3
 80063c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80063ce:	4621      	mov	r1, r4
 80063d0:	eb12 0801 	adds.w	r8, r2, r1
 80063d4:	4629      	mov	r1, r5
 80063d6:	eb43 0901 	adc.w	r9, r3, r1
 80063da:	f04f 0200 	mov.w	r2, #0
 80063de:	f04f 0300 	mov.w	r3, #0
 80063e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063ee:	4690      	mov	r8, r2
 80063f0:	4699      	mov	r9, r3
 80063f2:	4623      	mov	r3, r4
 80063f4:	eb18 0303 	adds.w	r3, r8, r3
 80063f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063fc:	462b      	mov	r3, r5
 80063fe:	eb49 0303 	adc.w	r3, r9, r3
 8006402:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006412:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006416:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800641a:	460b      	mov	r3, r1
 800641c:	18db      	adds	r3, r3, r3
 800641e:	653b      	str	r3, [r7, #80]	; 0x50
 8006420:	4613      	mov	r3, r2
 8006422:	eb42 0303 	adc.w	r3, r2, r3
 8006426:	657b      	str	r3, [r7, #84]	; 0x54
 8006428:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800642c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006430:	f7fa fb98 	bl	8000b64 <__aeabi_uldivmod>
 8006434:	4602      	mov	r2, r0
 8006436:	460b      	mov	r3, r1
 8006438:	4b61      	ldr	r3, [pc, #388]	; (80065c0 <UART_SetConfig+0x2d4>)
 800643a:	fba3 2302 	umull	r2, r3, r3, r2
 800643e:	095b      	lsrs	r3, r3, #5
 8006440:	011c      	lsls	r4, r3, #4
 8006442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006446:	2200      	movs	r2, #0
 8006448:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800644c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006450:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006454:	4642      	mov	r2, r8
 8006456:	464b      	mov	r3, r9
 8006458:	1891      	adds	r1, r2, r2
 800645a:	64b9      	str	r1, [r7, #72]	; 0x48
 800645c:	415b      	adcs	r3, r3
 800645e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006460:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006464:	4641      	mov	r1, r8
 8006466:	eb12 0a01 	adds.w	sl, r2, r1
 800646a:	4649      	mov	r1, r9
 800646c:	eb43 0b01 	adc.w	fp, r3, r1
 8006470:	f04f 0200 	mov.w	r2, #0
 8006474:	f04f 0300 	mov.w	r3, #0
 8006478:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800647c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006480:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006484:	4692      	mov	sl, r2
 8006486:	469b      	mov	fp, r3
 8006488:	4643      	mov	r3, r8
 800648a:	eb1a 0303 	adds.w	r3, sl, r3
 800648e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006492:	464b      	mov	r3, r9
 8006494:	eb4b 0303 	adc.w	r3, fp, r3
 8006498:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800649c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80064ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80064b0:	460b      	mov	r3, r1
 80064b2:	18db      	adds	r3, r3, r3
 80064b4:	643b      	str	r3, [r7, #64]	; 0x40
 80064b6:	4613      	mov	r3, r2
 80064b8:	eb42 0303 	adc.w	r3, r2, r3
 80064bc:	647b      	str	r3, [r7, #68]	; 0x44
 80064be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80064c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80064c6:	f7fa fb4d 	bl	8000b64 <__aeabi_uldivmod>
 80064ca:	4602      	mov	r2, r0
 80064cc:	460b      	mov	r3, r1
 80064ce:	4611      	mov	r1, r2
 80064d0:	4b3b      	ldr	r3, [pc, #236]	; (80065c0 <UART_SetConfig+0x2d4>)
 80064d2:	fba3 2301 	umull	r2, r3, r3, r1
 80064d6:	095b      	lsrs	r3, r3, #5
 80064d8:	2264      	movs	r2, #100	; 0x64
 80064da:	fb02 f303 	mul.w	r3, r2, r3
 80064de:	1acb      	subs	r3, r1, r3
 80064e0:	00db      	lsls	r3, r3, #3
 80064e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80064e6:	4b36      	ldr	r3, [pc, #216]	; (80065c0 <UART_SetConfig+0x2d4>)
 80064e8:	fba3 2302 	umull	r2, r3, r3, r2
 80064ec:	095b      	lsrs	r3, r3, #5
 80064ee:	005b      	lsls	r3, r3, #1
 80064f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064f4:	441c      	add	r4, r3
 80064f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064fa:	2200      	movs	r2, #0
 80064fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006500:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006504:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006508:	4642      	mov	r2, r8
 800650a:	464b      	mov	r3, r9
 800650c:	1891      	adds	r1, r2, r2
 800650e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006510:	415b      	adcs	r3, r3
 8006512:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006514:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006518:	4641      	mov	r1, r8
 800651a:	1851      	adds	r1, r2, r1
 800651c:	6339      	str	r1, [r7, #48]	; 0x30
 800651e:	4649      	mov	r1, r9
 8006520:	414b      	adcs	r3, r1
 8006522:	637b      	str	r3, [r7, #52]	; 0x34
 8006524:	f04f 0200 	mov.w	r2, #0
 8006528:	f04f 0300 	mov.w	r3, #0
 800652c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006530:	4659      	mov	r1, fp
 8006532:	00cb      	lsls	r3, r1, #3
 8006534:	4651      	mov	r1, sl
 8006536:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800653a:	4651      	mov	r1, sl
 800653c:	00ca      	lsls	r2, r1, #3
 800653e:	4610      	mov	r0, r2
 8006540:	4619      	mov	r1, r3
 8006542:	4603      	mov	r3, r0
 8006544:	4642      	mov	r2, r8
 8006546:	189b      	adds	r3, r3, r2
 8006548:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800654c:	464b      	mov	r3, r9
 800654e:	460a      	mov	r2, r1
 8006550:	eb42 0303 	adc.w	r3, r2, r3
 8006554:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006564:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006568:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800656c:	460b      	mov	r3, r1
 800656e:	18db      	adds	r3, r3, r3
 8006570:	62bb      	str	r3, [r7, #40]	; 0x28
 8006572:	4613      	mov	r3, r2
 8006574:	eb42 0303 	adc.w	r3, r2, r3
 8006578:	62fb      	str	r3, [r7, #44]	; 0x2c
 800657a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800657e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006582:	f7fa faef 	bl	8000b64 <__aeabi_uldivmod>
 8006586:	4602      	mov	r2, r0
 8006588:	460b      	mov	r3, r1
 800658a:	4b0d      	ldr	r3, [pc, #52]	; (80065c0 <UART_SetConfig+0x2d4>)
 800658c:	fba3 1302 	umull	r1, r3, r3, r2
 8006590:	095b      	lsrs	r3, r3, #5
 8006592:	2164      	movs	r1, #100	; 0x64
 8006594:	fb01 f303 	mul.w	r3, r1, r3
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	00db      	lsls	r3, r3, #3
 800659c:	3332      	adds	r3, #50	; 0x32
 800659e:	4a08      	ldr	r2, [pc, #32]	; (80065c0 <UART_SetConfig+0x2d4>)
 80065a0:	fba2 2303 	umull	r2, r3, r2, r3
 80065a4:	095b      	lsrs	r3, r3, #5
 80065a6:	f003 0207 	and.w	r2, r3, #7
 80065aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4422      	add	r2, r4
 80065b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80065b4:	e106      	b.n	80067c4 <UART_SetConfig+0x4d8>
 80065b6:	bf00      	nop
 80065b8:	40011000 	.word	0x40011000
 80065bc:	40011400 	.word	0x40011400
 80065c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065c8:	2200      	movs	r2, #0
 80065ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80065ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80065d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80065d6:	4642      	mov	r2, r8
 80065d8:	464b      	mov	r3, r9
 80065da:	1891      	adds	r1, r2, r2
 80065dc:	6239      	str	r1, [r7, #32]
 80065de:	415b      	adcs	r3, r3
 80065e0:	627b      	str	r3, [r7, #36]	; 0x24
 80065e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065e6:	4641      	mov	r1, r8
 80065e8:	1854      	adds	r4, r2, r1
 80065ea:	4649      	mov	r1, r9
 80065ec:	eb43 0501 	adc.w	r5, r3, r1
 80065f0:	f04f 0200 	mov.w	r2, #0
 80065f4:	f04f 0300 	mov.w	r3, #0
 80065f8:	00eb      	lsls	r3, r5, #3
 80065fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065fe:	00e2      	lsls	r2, r4, #3
 8006600:	4614      	mov	r4, r2
 8006602:	461d      	mov	r5, r3
 8006604:	4643      	mov	r3, r8
 8006606:	18e3      	adds	r3, r4, r3
 8006608:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800660c:	464b      	mov	r3, r9
 800660e:	eb45 0303 	adc.w	r3, r5, r3
 8006612:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006622:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006626:	f04f 0200 	mov.w	r2, #0
 800662a:	f04f 0300 	mov.w	r3, #0
 800662e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006632:	4629      	mov	r1, r5
 8006634:	008b      	lsls	r3, r1, #2
 8006636:	4621      	mov	r1, r4
 8006638:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800663c:	4621      	mov	r1, r4
 800663e:	008a      	lsls	r2, r1, #2
 8006640:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006644:	f7fa fa8e 	bl	8000b64 <__aeabi_uldivmod>
 8006648:	4602      	mov	r2, r0
 800664a:	460b      	mov	r3, r1
 800664c:	4b60      	ldr	r3, [pc, #384]	; (80067d0 <UART_SetConfig+0x4e4>)
 800664e:	fba3 2302 	umull	r2, r3, r3, r2
 8006652:	095b      	lsrs	r3, r3, #5
 8006654:	011c      	lsls	r4, r3, #4
 8006656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800665a:	2200      	movs	r2, #0
 800665c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006660:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006664:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006668:	4642      	mov	r2, r8
 800666a:	464b      	mov	r3, r9
 800666c:	1891      	adds	r1, r2, r2
 800666e:	61b9      	str	r1, [r7, #24]
 8006670:	415b      	adcs	r3, r3
 8006672:	61fb      	str	r3, [r7, #28]
 8006674:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006678:	4641      	mov	r1, r8
 800667a:	1851      	adds	r1, r2, r1
 800667c:	6139      	str	r1, [r7, #16]
 800667e:	4649      	mov	r1, r9
 8006680:	414b      	adcs	r3, r1
 8006682:	617b      	str	r3, [r7, #20]
 8006684:	f04f 0200 	mov.w	r2, #0
 8006688:	f04f 0300 	mov.w	r3, #0
 800668c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006690:	4659      	mov	r1, fp
 8006692:	00cb      	lsls	r3, r1, #3
 8006694:	4651      	mov	r1, sl
 8006696:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800669a:	4651      	mov	r1, sl
 800669c:	00ca      	lsls	r2, r1, #3
 800669e:	4610      	mov	r0, r2
 80066a0:	4619      	mov	r1, r3
 80066a2:	4603      	mov	r3, r0
 80066a4:	4642      	mov	r2, r8
 80066a6:	189b      	adds	r3, r3, r2
 80066a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80066ac:	464b      	mov	r3, r9
 80066ae:	460a      	mov	r2, r1
 80066b0:	eb42 0303 	adc.w	r3, r2, r3
 80066b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80066b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80066c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80066c4:	f04f 0200 	mov.w	r2, #0
 80066c8:	f04f 0300 	mov.w	r3, #0
 80066cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80066d0:	4649      	mov	r1, r9
 80066d2:	008b      	lsls	r3, r1, #2
 80066d4:	4641      	mov	r1, r8
 80066d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066da:	4641      	mov	r1, r8
 80066dc:	008a      	lsls	r2, r1, #2
 80066de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80066e2:	f7fa fa3f 	bl	8000b64 <__aeabi_uldivmod>
 80066e6:	4602      	mov	r2, r0
 80066e8:	460b      	mov	r3, r1
 80066ea:	4611      	mov	r1, r2
 80066ec:	4b38      	ldr	r3, [pc, #224]	; (80067d0 <UART_SetConfig+0x4e4>)
 80066ee:	fba3 2301 	umull	r2, r3, r3, r1
 80066f2:	095b      	lsrs	r3, r3, #5
 80066f4:	2264      	movs	r2, #100	; 0x64
 80066f6:	fb02 f303 	mul.w	r3, r2, r3
 80066fa:	1acb      	subs	r3, r1, r3
 80066fc:	011b      	lsls	r3, r3, #4
 80066fe:	3332      	adds	r3, #50	; 0x32
 8006700:	4a33      	ldr	r2, [pc, #204]	; (80067d0 <UART_SetConfig+0x4e4>)
 8006702:	fba2 2303 	umull	r2, r3, r2, r3
 8006706:	095b      	lsrs	r3, r3, #5
 8006708:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800670c:	441c      	add	r4, r3
 800670e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006712:	2200      	movs	r2, #0
 8006714:	673b      	str	r3, [r7, #112]	; 0x70
 8006716:	677a      	str	r2, [r7, #116]	; 0x74
 8006718:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800671c:	4642      	mov	r2, r8
 800671e:	464b      	mov	r3, r9
 8006720:	1891      	adds	r1, r2, r2
 8006722:	60b9      	str	r1, [r7, #8]
 8006724:	415b      	adcs	r3, r3
 8006726:	60fb      	str	r3, [r7, #12]
 8006728:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800672c:	4641      	mov	r1, r8
 800672e:	1851      	adds	r1, r2, r1
 8006730:	6039      	str	r1, [r7, #0]
 8006732:	4649      	mov	r1, r9
 8006734:	414b      	adcs	r3, r1
 8006736:	607b      	str	r3, [r7, #4]
 8006738:	f04f 0200 	mov.w	r2, #0
 800673c:	f04f 0300 	mov.w	r3, #0
 8006740:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006744:	4659      	mov	r1, fp
 8006746:	00cb      	lsls	r3, r1, #3
 8006748:	4651      	mov	r1, sl
 800674a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800674e:	4651      	mov	r1, sl
 8006750:	00ca      	lsls	r2, r1, #3
 8006752:	4610      	mov	r0, r2
 8006754:	4619      	mov	r1, r3
 8006756:	4603      	mov	r3, r0
 8006758:	4642      	mov	r2, r8
 800675a:	189b      	adds	r3, r3, r2
 800675c:	66bb      	str	r3, [r7, #104]	; 0x68
 800675e:	464b      	mov	r3, r9
 8006760:	460a      	mov	r2, r1
 8006762:	eb42 0303 	adc.w	r3, r2, r3
 8006766:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	663b      	str	r3, [r7, #96]	; 0x60
 8006772:	667a      	str	r2, [r7, #100]	; 0x64
 8006774:	f04f 0200 	mov.w	r2, #0
 8006778:	f04f 0300 	mov.w	r3, #0
 800677c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006780:	4649      	mov	r1, r9
 8006782:	008b      	lsls	r3, r1, #2
 8006784:	4641      	mov	r1, r8
 8006786:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800678a:	4641      	mov	r1, r8
 800678c:	008a      	lsls	r2, r1, #2
 800678e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006792:	f7fa f9e7 	bl	8000b64 <__aeabi_uldivmod>
 8006796:	4602      	mov	r2, r0
 8006798:	460b      	mov	r3, r1
 800679a:	4b0d      	ldr	r3, [pc, #52]	; (80067d0 <UART_SetConfig+0x4e4>)
 800679c:	fba3 1302 	umull	r1, r3, r3, r2
 80067a0:	095b      	lsrs	r3, r3, #5
 80067a2:	2164      	movs	r1, #100	; 0x64
 80067a4:	fb01 f303 	mul.w	r3, r1, r3
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	011b      	lsls	r3, r3, #4
 80067ac:	3332      	adds	r3, #50	; 0x32
 80067ae:	4a08      	ldr	r2, [pc, #32]	; (80067d0 <UART_SetConfig+0x4e4>)
 80067b0:	fba2 2303 	umull	r2, r3, r2, r3
 80067b4:	095b      	lsrs	r3, r3, #5
 80067b6:	f003 020f 	and.w	r2, r3, #15
 80067ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4422      	add	r2, r4
 80067c2:	609a      	str	r2, [r3, #8]
}
 80067c4:	bf00      	nop
 80067c6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80067ca:	46bd      	mov	sp, r7
 80067cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067d0:	51eb851f 	.word	0x51eb851f

080067d4 <memset>:
 80067d4:	4402      	add	r2, r0
 80067d6:	4603      	mov	r3, r0
 80067d8:	4293      	cmp	r3, r2
 80067da:	d100      	bne.n	80067de <memset+0xa>
 80067dc:	4770      	bx	lr
 80067de:	f803 1b01 	strb.w	r1, [r3], #1
 80067e2:	e7f9      	b.n	80067d8 <memset+0x4>

080067e4 <__libc_init_array>:
 80067e4:	b570      	push	{r4, r5, r6, lr}
 80067e6:	4d0d      	ldr	r5, [pc, #52]	; (800681c <__libc_init_array+0x38>)
 80067e8:	4c0d      	ldr	r4, [pc, #52]	; (8006820 <__libc_init_array+0x3c>)
 80067ea:	1b64      	subs	r4, r4, r5
 80067ec:	10a4      	asrs	r4, r4, #2
 80067ee:	2600      	movs	r6, #0
 80067f0:	42a6      	cmp	r6, r4
 80067f2:	d109      	bne.n	8006808 <__libc_init_array+0x24>
 80067f4:	4d0b      	ldr	r5, [pc, #44]	; (8006824 <__libc_init_array+0x40>)
 80067f6:	4c0c      	ldr	r4, [pc, #48]	; (8006828 <__libc_init_array+0x44>)
 80067f8:	f000 f89a 	bl	8006930 <_init>
 80067fc:	1b64      	subs	r4, r4, r5
 80067fe:	10a4      	asrs	r4, r4, #2
 8006800:	2600      	movs	r6, #0
 8006802:	42a6      	cmp	r6, r4
 8006804:	d105      	bne.n	8006812 <__libc_init_array+0x2e>
 8006806:	bd70      	pop	{r4, r5, r6, pc}
 8006808:	f855 3b04 	ldr.w	r3, [r5], #4
 800680c:	4798      	blx	r3
 800680e:	3601      	adds	r6, #1
 8006810:	e7ee      	b.n	80067f0 <__libc_init_array+0xc>
 8006812:	f855 3b04 	ldr.w	r3, [r5], #4
 8006816:	4798      	blx	r3
 8006818:	3601      	adds	r6, #1
 800681a:	e7f2      	b.n	8006802 <__libc_init_array+0x1e>
 800681c:	08006968 	.word	0x08006968
 8006820:	08006968 	.word	0x08006968
 8006824:	08006968 	.word	0x08006968
 8006828:	0800696c 	.word	0x0800696c
 800682c:	00000000 	.word	0x00000000

08006830 <floor>:
 8006830:	ec51 0b10 	vmov	r0, r1, d0
 8006834:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800683c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8006840:	2e13      	cmp	r6, #19
 8006842:	ee10 5a10 	vmov	r5, s0
 8006846:	ee10 8a10 	vmov	r8, s0
 800684a:	460c      	mov	r4, r1
 800684c:	dc31      	bgt.n	80068b2 <floor+0x82>
 800684e:	2e00      	cmp	r6, #0
 8006850:	da14      	bge.n	800687c <floor+0x4c>
 8006852:	a333      	add	r3, pc, #204	; (adr r3, 8006920 <floor+0xf0>)
 8006854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006858:	f7f9 fcc4 	bl	80001e4 <__adddf3>
 800685c:	2200      	movs	r2, #0
 800685e:	2300      	movs	r3, #0
 8006860:	f7fa f906 	bl	8000a70 <__aeabi_dcmpgt>
 8006864:	b138      	cbz	r0, 8006876 <floor+0x46>
 8006866:	2c00      	cmp	r4, #0
 8006868:	da53      	bge.n	8006912 <floor+0xe2>
 800686a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800686e:	4325      	orrs	r5, r4
 8006870:	d052      	beq.n	8006918 <floor+0xe8>
 8006872:	4c2d      	ldr	r4, [pc, #180]	; (8006928 <floor+0xf8>)
 8006874:	2500      	movs	r5, #0
 8006876:	4621      	mov	r1, r4
 8006878:	4628      	mov	r0, r5
 800687a:	e024      	b.n	80068c6 <floor+0x96>
 800687c:	4f2b      	ldr	r7, [pc, #172]	; (800692c <floor+0xfc>)
 800687e:	4137      	asrs	r7, r6
 8006880:	ea01 0307 	and.w	r3, r1, r7
 8006884:	4303      	orrs	r3, r0
 8006886:	d01e      	beq.n	80068c6 <floor+0x96>
 8006888:	a325      	add	r3, pc, #148	; (adr r3, 8006920 <floor+0xf0>)
 800688a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688e:	f7f9 fca9 	bl	80001e4 <__adddf3>
 8006892:	2200      	movs	r2, #0
 8006894:	2300      	movs	r3, #0
 8006896:	f7fa f8eb 	bl	8000a70 <__aeabi_dcmpgt>
 800689a:	2800      	cmp	r0, #0
 800689c:	d0eb      	beq.n	8006876 <floor+0x46>
 800689e:	2c00      	cmp	r4, #0
 80068a0:	bfbe      	ittt	lt
 80068a2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80068a6:	4133      	asrlt	r3, r6
 80068a8:	18e4      	addlt	r4, r4, r3
 80068aa:	ea24 0407 	bic.w	r4, r4, r7
 80068ae:	2500      	movs	r5, #0
 80068b0:	e7e1      	b.n	8006876 <floor+0x46>
 80068b2:	2e33      	cmp	r6, #51	; 0x33
 80068b4:	dd0b      	ble.n	80068ce <floor+0x9e>
 80068b6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80068ba:	d104      	bne.n	80068c6 <floor+0x96>
 80068bc:	ee10 2a10 	vmov	r2, s0
 80068c0:	460b      	mov	r3, r1
 80068c2:	f7f9 fc8f 	bl	80001e4 <__adddf3>
 80068c6:	ec41 0b10 	vmov	d0, r0, r1
 80068ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068ce:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80068d2:	f04f 37ff 	mov.w	r7, #4294967295
 80068d6:	40df      	lsrs	r7, r3
 80068d8:	4238      	tst	r0, r7
 80068da:	d0f4      	beq.n	80068c6 <floor+0x96>
 80068dc:	a310      	add	r3, pc, #64	; (adr r3, 8006920 <floor+0xf0>)
 80068de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e2:	f7f9 fc7f 	bl	80001e4 <__adddf3>
 80068e6:	2200      	movs	r2, #0
 80068e8:	2300      	movs	r3, #0
 80068ea:	f7fa f8c1 	bl	8000a70 <__aeabi_dcmpgt>
 80068ee:	2800      	cmp	r0, #0
 80068f0:	d0c1      	beq.n	8006876 <floor+0x46>
 80068f2:	2c00      	cmp	r4, #0
 80068f4:	da0a      	bge.n	800690c <floor+0xdc>
 80068f6:	2e14      	cmp	r6, #20
 80068f8:	d101      	bne.n	80068fe <floor+0xce>
 80068fa:	3401      	adds	r4, #1
 80068fc:	e006      	b.n	800690c <floor+0xdc>
 80068fe:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006902:	2301      	movs	r3, #1
 8006904:	40b3      	lsls	r3, r6
 8006906:	441d      	add	r5, r3
 8006908:	45a8      	cmp	r8, r5
 800690a:	d8f6      	bhi.n	80068fa <floor+0xca>
 800690c:	ea25 0507 	bic.w	r5, r5, r7
 8006910:	e7b1      	b.n	8006876 <floor+0x46>
 8006912:	2500      	movs	r5, #0
 8006914:	462c      	mov	r4, r5
 8006916:	e7ae      	b.n	8006876 <floor+0x46>
 8006918:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800691c:	e7ab      	b.n	8006876 <floor+0x46>
 800691e:	bf00      	nop
 8006920:	8800759c 	.word	0x8800759c
 8006924:	7e37e43c 	.word	0x7e37e43c
 8006928:	bff00000 	.word	0xbff00000
 800692c:	000fffff 	.word	0x000fffff

08006930 <_init>:
 8006930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006932:	bf00      	nop
 8006934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006936:	bc08      	pop	{r3}
 8006938:	469e      	mov	lr, r3
 800693a:	4770      	bx	lr

0800693c <_fini>:
 800693c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800693e:	bf00      	nop
 8006940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006942:	bc08      	pop	{r3}
 8006944:	469e      	mov	lr, r3
 8006946:	4770      	bx	lr
