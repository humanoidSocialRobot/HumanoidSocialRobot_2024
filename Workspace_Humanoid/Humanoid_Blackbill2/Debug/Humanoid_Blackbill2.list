
Humanoid_Blackbill2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006958  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08006af0  08006af0  00016af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b08  08006b08  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  08006b08  08006b08  00016b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b10  08006b10  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b10  08006b10  00016b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b14  08006b14  00016b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08006b18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  20000030  08006b48  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  08006b48  00020338  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010c56  00000000  00000000  000200a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002326  00000000  00000000  00030cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001008  00000000  00000000  00033020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cc0  00000000  00000000  00034028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016c83  00000000  00000000  00034ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013407  00000000  00000000  0004b96b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000906ac  00000000  00000000  0005ed72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000046d8  00000000  00000000  000ef420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  000f3af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000030 	.word	0x20000030
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006ad8 	.word	0x08006ad8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000034 	.word	0x20000034
 80001d4:	08006ad8 	.word	0x08006ad8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2uiz>:
 8000a84:	004a      	lsls	r2, r1, #1
 8000a86:	d211      	bcs.n	8000aac <__aeabi_d2uiz+0x28>
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d211      	bcs.n	8000ab2 <__aeabi_d2uiz+0x2e>
 8000a8e:	d50d      	bpl.n	8000aac <__aeabi_d2uiz+0x28>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d40e      	bmi.n	8000ab8 <__aeabi_d2uiz+0x34>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_d2uiz+0x3a>
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b970 	b.w	8000e5c <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9e08      	ldr	r6, [sp, #32]
 8000b9a:	460d      	mov	r5, r1
 8000b9c:	4604      	mov	r4, r0
 8000b9e:	460f      	mov	r7, r1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d14a      	bne.n	8000c3a <__udivmoddi4+0xa6>
 8000ba4:	428a      	cmp	r2, r1
 8000ba6:	4694      	mov	ip, r2
 8000ba8:	d965      	bls.n	8000c76 <__udivmoddi4+0xe2>
 8000baa:	fab2 f382 	clz	r3, r2
 8000bae:	b143      	cbz	r3, 8000bc2 <__udivmoddi4+0x2e>
 8000bb0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bb4:	f1c3 0220 	rsb	r2, r3, #32
 8000bb8:	409f      	lsls	r7, r3
 8000bba:	fa20 f202 	lsr.w	r2, r0, r2
 8000bbe:	4317      	orrs	r7, r2
 8000bc0:	409c      	lsls	r4, r3
 8000bc2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bc6:	fa1f f58c 	uxth.w	r5, ip
 8000bca:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bce:	0c22      	lsrs	r2, r4, #16
 8000bd0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bd4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bd8:	fb01 f005 	mul.w	r0, r1, r5
 8000bdc:	4290      	cmp	r0, r2
 8000bde:	d90a      	bls.n	8000bf6 <__udivmoddi4+0x62>
 8000be0:	eb1c 0202 	adds.w	r2, ip, r2
 8000be4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000be8:	f080 811c 	bcs.w	8000e24 <__udivmoddi4+0x290>
 8000bec:	4290      	cmp	r0, r2
 8000bee:	f240 8119 	bls.w	8000e24 <__udivmoddi4+0x290>
 8000bf2:	3902      	subs	r1, #2
 8000bf4:	4462      	add	r2, ip
 8000bf6:	1a12      	subs	r2, r2, r0
 8000bf8:	b2a4      	uxth	r4, r4
 8000bfa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bfe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c02:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c06:	fb00 f505 	mul.w	r5, r0, r5
 8000c0a:	42a5      	cmp	r5, r4
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x90>
 8000c0e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c12:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c16:	f080 8107 	bcs.w	8000e28 <__udivmoddi4+0x294>
 8000c1a:	42a5      	cmp	r5, r4
 8000c1c:	f240 8104 	bls.w	8000e28 <__udivmoddi4+0x294>
 8000c20:	4464      	add	r4, ip
 8000c22:	3802      	subs	r0, #2
 8000c24:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c28:	1b64      	subs	r4, r4, r5
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	b11e      	cbz	r6, 8000c36 <__udivmoddi4+0xa2>
 8000c2e:	40dc      	lsrs	r4, r3
 8000c30:	2300      	movs	r3, #0
 8000c32:	e9c6 4300 	strd	r4, r3, [r6]
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d908      	bls.n	8000c50 <__udivmoddi4+0xbc>
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	f000 80ed 	beq.w	8000e1e <__udivmoddi4+0x28a>
 8000c44:	2100      	movs	r1, #0
 8000c46:	e9c6 0500 	strd	r0, r5, [r6]
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c50:	fab3 f183 	clz	r1, r3
 8000c54:	2900      	cmp	r1, #0
 8000c56:	d149      	bne.n	8000cec <__udivmoddi4+0x158>
 8000c58:	42ab      	cmp	r3, r5
 8000c5a:	d302      	bcc.n	8000c62 <__udivmoddi4+0xce>
 8000c5c:	4282      	cmp	r2, r0
 8000c5e:	f200 80f8 	bhi.w	8000e52 <__udivmoddi4+0x2be>
 8000c62:	1a84      	subs	r4, r0, r2
 8000c64:	eb65 0203 	sbc.w	r2, r5, r3
 8000c68:	2001      	movs	r0, #1
 8000c6a:	4617      	mov	r7, r2
 8000c6c:	2e00      	cmp	r6, #0
 8000c6e:	d0e2      	beq.n	8000c36 <__udivmoddi4+0xa2>
 8000c70:	e9c6 4700 	strd	r4, r7, [r6]
 8000c74:	e7df      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000c76:	b902      	cbnz	r2, 8000c7a <__udivmoddi4+0xe6>
 8000c78:	deff      	udf	#255	; 0xff
 8000c7a:	fab2 f382 	clz	r3, r2
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f040 8090 	bne.w	8000da4 <__udivmoddi4+0x210>
 8000c84:	1a8a      	subs	r2, r1, r2
 8000c86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c8a:	fa1f fe8c 	uxth.w	lr, ip
 8000c8e:	2101      	movs	r1, #1
 8000c90:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c94:	fb07 2015 	mls	r0, r7, r5, r2
 8000c98:	0c22      	lsrs	r2, r4, #16
 8000c9a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c9e:	fb0e f005 	mul.w	r0, lr, r5
 8000ca2:	4290      	cmp	r0, r2
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x124>
 8000ca6:	eb1c 0202 	adds.w	r2, ip, r2
 8000caa:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x122>
 8000cb0:	4290      	cmp	r0, r2
 8000cb2:	f200 80cb 	bhi.w	8000e4c <__udivmoddi4+0x2b8>
 8000cb6:	4645      	mov	r5, r8
 8000cb8:	1a12      	subs	r2, r2, r0
 8000cba:	b2a4      	uxth	r4, r4
 8000cbc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cc0:	fb07 2210 	mls	r2, r7, r0, r2
 8000cc4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000ccc:	45a6      	cmp	lr, r4
 8000cce:	d908      	bls.n	8000ce2 <__udivmoddi4+0x14e>
 8000cd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cd8:	d202      	bcs.n	8000ce0 <__udivmoddi4+0x14c>
 8000cda:	45a6      	cmp	lr, r4
 8000cdc:	f200 80bb 	bhi.w	8000e56 <__udivmoddi4+0x2c2>
 8000ce0:	4610      	mov	r0, r2
 8000ce2:	eba4 040e 	sub.w	r4, r4, lr
 8000ce6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cea:	e79f      	b.n	8000c2c <__udivmoddi4+0x98>
 8000cec:	f1c1 0720 	rsb	r7, r1, #32
 8000cf0:	408b      	lsls	r3, r1
 8000cf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cfa:	fa05 f401 	lsl.w	r4, r5, r1
 8000cfe:	fa20 f307 	lsr.w	r3, r0, r7
 8000d02:	40fd      	lsrs	r5, r7
 8000d04:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d08:	4323      	orrs	r3, r4
 8000d0a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	fb09 5518 	mls	r5, r9, r8, r5
 8000d16:	0c1c      	lsrs	r4, r3, #16
 8000d18:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d1c:	fb08 f50e 	mul.w	r5, r8, lr
 8000d20:	42a5      	cmp	r5, r4
 8000d22:	fa02 f201 	lsl.w	r2, r2, r1
 8000d26:	fa00 f001 	lsl.w	r0, r0, r1
 8000d2a:	d90b      	bls.n	8000d44 <__udivmoddi4+0x1b0>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d34:	f080 8088 	bcs.w	8000e48 <__udivmoddi4+0x2b4>
 8000d38:	42a5      	cmp	r5, r4
 8000d3a:	f240 8085 	bls.w	8000e48 <__udivmoddi4+0x2b4>
 8000d3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d42:	4464      	add	r4, ip
 8000d44:	1b64      	subs	r4, r4, r5
 8000d46:	b29d      	uxth	r5, r3
 8000d48:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d4c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d50:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d54:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x1da>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d64:	d26c      	bcs.n	8000e40 <__udivmoddi4+0x2ac>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	d96a      	bls.n	8000e40 <__udivmoddi4+0x2ac>
 8000d6a:	3b02      	subs	r3, #2
 8000d6c:	4464      	add	r4, ip
 8000d6e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d72:	fba3 9502 	umull	r9, r5, r3, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	42ac      	cmp	r4, r5
 8000d7c:	46c8      	mov	r8, r9
 8000d7e:	46ae      	mov	lr, r5
 8000d80:	d356      	bcc.n	8000e30 <__udivmoddi4+0x29c>
 8000d82:	d053      	beq.n	8000e2c <__udivmoddi4+0x298>
 8000d84:	b156      	cbz	r6, 8000d9c <__udivmoddi4+0x208>
 8000d86:	ebb0 0208 	subs.w	r2, r0, r8
 8000d8a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d8e:	fa04 f707 	lsl.w	r7, r4, r7
 8000d92:	40ca      	lsrs	r2, r1
 8000d94:	40cc      	lsrs	r4, r1
 8000d96:	4317      	orrs	r7, r2
 8000d98:	e9c6 7400 	strd	r7, r4, [r6]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	2100      	movs	r1, #0
 8000da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da4:	f1c3 0120 	rsb	r1, r3, #32
 8000da8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dac:	fa20 f201 	lsr.w	r2, r0, r1
 8000db0:	fa25 f101 	lsr.w	r1, r5, r1
 8000db4:	409d      	lsls	r5, r3
 8000db6:	432a      	orrs	r2, r5
 8000db8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbc:	fa1f fe8c 	uxth.w	lr, ip
 8000dc0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc4:	fb07 1510 	mls	r5, r7, r0, r1
 8000dc8:	0c11      	lsrs	r1, r2, #16
 8000dca:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dce:	fb00 f50e 	mul.w	r5, r0, lr
 8000dd2:	428d      	cmp	r5, r1
 8000dd4:	fa04 f403 	lsl.w	r4, r4, r3
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x258>
 8000dda:	eb1c 0101 	adds.w	r1, ip, r1
 8000dde:	f100 38ff 	add.w	r8, r0, #4294967295
 8000de2:	d22f      	bcs.n	8000e44 <__udivmoddi4+0x2b0>
 8000de4:	428d      	cmp	r5, r1
 8000de6:	d92d      	bls.n	8000e44 <__udivmoddi4+0x2b0>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4461      	add	r1, ip
 8000dec:	1b49      	subs	r1, r1, r5
 8000dee:	b292      	uxth	r2, r2
 8000df0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000df4:	fb07 1115 	mls	r1, r7, r5, r1
 8000df8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dfc:	fb05 f10e 	mul.w	r1, r5, lr
 8000e00:	4291      	cmp	r1, r2
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x282>
 8000e04:	eb1c 0202 	adds.w	r2, ip, r2
 8000e08:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e0c:	d216      	bcs.n	8000e3c <__udivmoddi4+0x2a8>
 8000e0e:	4291      	cmp	r1, r2
 8000e10:	d914      	bls.n	8000e3c <__udivmoddi4+0x2a8>
 8000e12:	3d02      	subs	r5, #2
 8000e14:	4462      	add	r2, ip
 8000e16:	1a52      	subs	r2, r2, r1
 8000e18:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e1c:	e738      	b.n	8000c90 <__udivmoddi4+0xfc>
 8000e1e:	4631      	mov	r1, r6
 8000e20:	4630      	mov	r0, r6
 8000e22:	e708      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000e24:	4639      	mov	r1, r7
 8000e26:	e6e6      	b.n	8000bf6 <__udivmoddi4+0x62>
 8000e28:	4610      	mov	r0, r2
 8000e2a:	e6fb      	b.n	8000c24 <__udivmoddi4+0x90>
 8000e2c:	4548      	cmp	r0, r9
 8000e2e:	d2a9      	bcs.n	8000d84 <__udivmoddi4+0x1f0>
 8000e30:	ebb9 0802 	subs.w	r8, r9, r2
 8000e34:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	e7a3      	b.n	8000d84 <__udivmoddi4+0x1f0>
 8000e3c:	4645      	mov	r5, r8
 8000e3e:	e7ea      	b.n	8000e16 <__udivmoddi4+0x282>
 8000e40:	462b      	mov	r3, r5
 8000e42:	e794      	b.n	8000d6e <__udivmoddi4+0x1da>
 8000e44:	4640      	mov	r0, r8
 8000e46:	e7d1      	b.n	8000dec <__udivmoddi4+0x258>
 8000e48:	46d0      	mov	r8, sl
 8000e4a:	e77b      	b.n	8000d44 <__udivmoddi4+0x1b0>
 8000e4c:	3d02      	subs	r5, #2
 8000e4e:	4462      	add	r2, ip
 8000e50:	e732      	b.n	8000cb8 <__udivmoddi4+0x124>
 8000e52:	4608      	mov	r0, r1
 8000e54:	e70a      	b.n	8000c6c <__udivmoddi4+0xd8>
 8000e56:	4464      	add	r4, ip
 8000e58:	3802      	subs	r0, #2
 8000e5a:	e742      	b.n	8000ce2 <__udivmoddi4+0x14e>

08000e5c <__aeabi_idiv0>:
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop

08000e60 <MotorDriver_ReleaseObject_OneHand_Right>:
  * @param  Motor: Pointer to the MotorConfig_t struct representing the Servo motor to control.
  * @param  CCRX_Value: Value of capture compare registers.
  * @note   This function sets the angles of servo motors connected to the PCA9685 device to simulate an open hand gesture.
  *         Each servo motor corresponds to a finger of the hand, and the angles are adjusted accordingly to open the hand.
  */
void MotorDriver_ReleaseObject_OneHand_Right(MotorConfig_t *Motor, uint16_t CCRX_Value) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	460b      	mov	r3, r1
 8000e6a:	807b      	strh	r3, [r7, #2]
	//open
		  //Pinky Right hand (1)
		   PCA9685_SetServoAngle(PINKY_FINGER_RIGHT_CHANNEL ,  140);
 8000e6c:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8000f28 <MotorDriver_ReleaseObject_OneHand_Right+0xc8>
 8000e70:	2001      	movs	r0, #1
 8000e72:	f001 f831 	bl	8001ed8 <PCA9685_SetServoAngle>
		  //Ring Right hand (2)
		  PCA9685_SetServoAngle(RING_FINGER_RIGHT_CHANNEL,  140);
 8000e76:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8000f28 <MotorDriver_ReleaseObject_OneHand_Right+0xc8>
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f001 f82c 	bl	8001ed8 <PCA9685_SetServoAngle>
		  //middle Right hand (3)
		  PCA9685_SetServoAngle(MIDDLE_FINGER_RIGHT_CHANNEL,  140);
 8000e80:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8000f28 <MotorDriver_ReleaseObject_OneHand_Right+0xc8>
 8000e84:	2002      	movs	r0, #2
 8000e86:	f001 f827 	bl	8001ed8 <PCA9685_SetServoAngle>
		  //index Right hand (4)
		  PCA9685_SetServoAngle(INDEX_FINGER_RIGHT_CHANNEL,  170);
 8000e8a:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8000f2c <MotorDriver_ReleaseObject_OneHand_Right+0xcc>
 8000e8e:	2003      	movs	r0, #3
 8000e90:	f001 f822 	bl	8001ed8 <PCA9685_SetServoAngle>
		  //thumb Right hand (5)
		  PCA9685_SetServoAngle(THUMB_FINGER_RIGHT_CHANNEL,  15);
 8000e94:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8000e98:	2004      	movs	r0, #4
 8000e9a:	f001 f81d 	bl	8001ed8 <PCA9685_SetServoAngle>
		  HAL_Delay(4000);
 8000e9e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000ea2:	f001 fc0f 	bl	80026c4 <HAL_Delay>
		  // C elbow right
		 PCA9685_SetServoAngle(12,  80);
 8000ea6:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8000f30 <MotorDriver_ReleaseObject_OneHand_Right+0xd0>
 8000eaa:	200c      	movs	r0, #12
 8000eac:	f001 f814 	bl	8001ed8 <PCA9685_SetServoAngle>
		// D rest right
		  PCA9685_SetServoAngle(10,  10);
 8000eb0:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8000eb4:	200a      	movs	r0, #10
 8000eb6:	f001 f80f 	bl	8001ed8 <PCA9685_SetServoAngle>
		  HAL_Delay(1500);
 8000eba:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000ebe:	f001 fc01 	bl	80026c4 <HAL_Delay>
		  //shoulder release

    // A Shoulder IN Right, value =60
    if (Motor->channel == TIM_CHANNEL_1) {
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d105      	bne.n	8000ed6 <MotorDriver_ReleaseObject_OneHand_Right+0x76>
        Motor->timer->Instance->CCR1 = CCRX_Value;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	887a      	ldrh	r2, [r7, #2]
 8000ed2:	635a      	str	r2, [r3, #52]	; 0x34
 8000ed4:	e01c      	b.n	8000f10 <MotorDriver_ReleaseObject_OneHand_Right+0xb0>
    } else if (Motor->channel == TIM_CHANNEL_2) {
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	2b04      	cmp	r3, #4
 8000edc:	d105      	bne.n	8000eea <MotorDriver_ReleaseObject_OneHand_Right+0x8a>
        Motor->timer->Instance->CCR2 = CCRX_Value;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	887a      	ldrh	r2, [r7, #2]
 8000ee6:	639a      	str	r2, [r3, #56]	; 0x38
 8000ee8:	e012      	b.n	8000f10 <MotorDriver_ReleaseObject_OneHand_Right+0xb0>
    } else if (Motor->channel == TIM_CHANNEL_3) {
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	2b08      	cmp	r3, #8
 8000ef0:	d105      	bne.n	8000efe <MotorDriver_ReleaseObject_OneHand_Right+0x9e>
        Motor->timer->Instance->CCR3 = CCRX_Value;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	887a      	ldrh	r2, [r7, #2]
 8000efa:	63da      	str	r2, [r3, #60]	; 0x3c
 8000efc:	e008      	b.n	8000f10 <MotorDriver_ReleaseObject_OneHand_Right+0xb0>
    } else if (Motor->channel == TIM_CHANNEL_4) {
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b0c      	cmp	r3, #12
 8000f04:	d104      	bne.n	8000f10 <MotorDriver_ReleaseObject_OneHand_Right+0xb0>
        Motor->timer->Instance->CCR4 = CCRX_Value;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	887a      	ldrh	r2, [r7, #2]
 8000f0e:	641a      	str	r2, [r3, #64]	; 0x40
    } else {
        // Handle invalid channel if necessary
    }
    HAL_TIM_PWM_Start(Motor->timer, Motor->channel);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4610      	mov	r0, r2
 8000f1c:	f003 fdd2 	bl	8004ac4 <HAL_TIM_PWM_Start>
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	430c0000 	.word	0x430c0000
 8000f2c:	432a0000 	.word	0x432a0000
 8000f30:	42a00000 	.word	0x42a00000

08000f34 <MotorDriver_ShakeHand>:
  *           - Sets servo angles for the fingers of the right hand to simulate an open hand gesture.
  *           - Sets servo angles for other parts of the right arm to a specific position.
  *           - Sets the PWM duty cycle for the Servo motor to a predefined value based on the specified motor channel.
  *           - Starts the PWM output for the specified Servo motor channel.
  */
void MotorDriver_ShakeHand(MotorConfig_t *Motor, uint16_t CCRX_Value) {
 8000f34:	b590      	push	{r4, r7, lr}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	807b      	strh	r3, [r7, #2]
    // A Shoulder IN Right
    if (Motor->channel == TIM_CHANNEL_1) {
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d105      	bne.n	8000f54 <MotorDriver_ShakeHand+0x20>
        Motor->timer->Instance->CCR1 = CCRX_Value; //90 duty cycle
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	887a      	ldrh	r2, [r7, #2]
 8000f50:	635a      	str	r2, [r3, #52]	; 0x34
 8000f52:	e01c      	b.n	8000f8e <MotorDriver_ShakeHand+0x5a>
    } else if (Motor->channel == TIM_CHANNEL_2) {
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	2b04      	cmp	r3, #4
 8000f5a:	d105      	bne.n	8000f68 <MotorDriver_ShakeHand+0x34>
        Motor->timer->Instance->CCR2 = CCRX_Value;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	887a      	ldrh	r2, [r7, #2]
 8000f64:	639a      	str	r2, [r3, #56]	; 0x38
 8000f66:	e012      	b.n	8000f8e <MotorDriver_ShakeHand+0x5a>
    } else if (Motor->channel == TIM_CHANNEL_3) {
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	2b08      	cmp	r3, #8
 8000f6e:	d105      	bne.n	8000f7c <MotorDriver_ShakeHand+0x48>
        Motor->timer->Instance->CCR3 = CCRX_Value;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	887a      	ldrh	r2, [r7, #2]
 8000f78:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f7a:	e008      	b.n	8000f8e <MotorDriver_ShakeHand+0x5a>
    } else if (Motor->channel == TIM_CHANNEL_4) {
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	2b0c      	cmp	r3, #12
 8000f82:	d104      	bne.n	8000f8e <MotorDriver_ShakeHand+0x5a>
        Motor->timer->Instance->CCR4 = CCRX_Value;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	887a      	ldrh	r2, [r7, #2]
 8000f8c:	641a      	str	r2, [r3, #64]	; 0x40
    } else {
        // Handle invalid channel if necessary
    }
    HAL_TIM_PWM_Start(Motor->timer, Motor->channel);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	4619      	mov	r1, r3
 8000f98:	4610      	mov	r0, r2
 8000f9a:	f003 fd93 	bl	8004ac4 <HAL_TIM_PWM_Start>
    	HAL_Delay(5000);
 8000f9e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000fa2:	f001 fb8f 	bl	80026c4 <HAL_Delay>
	  //open
	  //Pinky Right hand (1)
	  PCA9685_SetServoAngle( PINKY_FINGER_RIGHT_CHANNEL  ,  140);
 8000fa6:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8001104 <MotorDriver_ShakeHand+0x1d0>
 8000faa:	2001      	movs	r0, #1
 8000fac:	f000 ff94 	bl	8001ed8 <PCA9685_SetServoAngle>
	  //Ring Right hand (2)
	  PCA9685_SetServoAngle(RING_FINGER_RIGHT_CHANNEL,  140);
 8000fb0:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8001104 <MotorDriver_ShakeHand+0x1d0>
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f000 ff8f 	bl	8001ed8 <PCA9685_SetServoAngle>
	  //middle Right hand (3)
	  PCA9685_SetServoAngle(MIDDLE_FINGER_RIGHT_CHANNEL,  140);
 8000fba:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8001104 <MotorDriver_ShakeHand+0x1d0>
 8000fbe:	2002      	movs	r0, #2
 8000fc0:	f000 ff8a 	bl	8001ed8 <PCA9685_SetServoAngle>
	  //index Right hand (4)
	  PCA9685_SetServoAngle(INDEX_FINGER_RIGHT_CHANNEL,  170);
 8000fc4:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8001108 <MotorDriver_ShakeHand+0x1d4>
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f000 ff85 	bl	8001ed8 <PCA9685_SetServoAngle>
	  //thumb Right hand (5)
	  PCA9685_SetServoAngle(THUMB_FINGER_RIGHT_CHANNEL,  15);
 8000fce:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8000fd2:	2004      	movs	r0, #4
 8000fd4:	f000 ff80 	bl	8001ed8 <PCA9685_SetServoAngle>
	  HAL_Delay(1000);
 8000fd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fdc:	f001 fb72 	bl	80026c4 <HAL_Delay>
	 //close
	 //pinky Right hand (1)
	 PCA9685_SetServoAngle(1,  10);
 8000fe0:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f000 ff77 	bl	8001ed8 <PCA9685_SetServoAngle>
	 //Ring Right hand (2)
	 PCA9685_SetServoAngle(0,  0);
 8000fea:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800110c <MotorDriver_ShakeHand+0x1d8>
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f000 ff72 	bl	8001ed8 <PCA9685_SetServoAngle>
	 //middle Right hand (3)
	 PCA9685_SetServoAngle(2,  0);
 8000ff4:	ed9f 0a45 	vldr	s0, [pc, #276]	; 800110c <MotorDriver_ShakeHand+0x1d8>
 8000ff8:	2002      	movs	r0, #2
 8000ffa:	f000 ff6d 	bl	8001ed8 <PCA9685_SetServoAngle>
	 //index Right hand (4)
	 PCA9685_SetServoAngle(3,  75);
 8000ffe:	ed9f 0a44 	vldr	s0, [pc, #272]	; 8001110 <MotorDriver_ShakeHand+0x1dc>
 8001002:	2003      	movs	r0, #3
 8001004:	f000 ff68 	bl	8001ed8 <PCA9685_SetServoAngle>
	 //thumb Right hand (5)
	 PCA9685_SetServoAngle(4,  75);
 8001008:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8001110 <MotorDriver_ShakeHand+0x1dc>
 800100c:	2004      	movs	r0, #4
 800100e:	f000 ff63 	bl	8001ed8 <PCA9685_SetServoAngle>
	 HAL_Delay(3000);
 8001012:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001016:	f001 fb55 	bl	80026c4 <HAL_Delay>
	 //open
	  //Pinky Right hand (1)
		  PCA9685_SetServoAngle( PINKY_FINGER_RIGHT_CHANNEL  ,  140);
 800101a:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8001104 <MotorDriver_ShakeHand+0x1d0>
 800101e:	2001      	movs	r0, #1
 8001020:	f000 ff5a 	bl	8001ed8 <PCA9685_SetServoAngle>
		  //Ring Right hand (2)
		  PCA9685_SetServoAngle(RING_FINGER_RIGHT_CHANNEL,  140);
 8001024:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8001104 <MotorDriver_ShakeHand+0x1d0>
 8001028:	2000      	movs	r0, #0
 800102a:	f000 ff55 	bl	8001ed8 <PCA9685_SetServoAngle>
		  //middle Right hand (3)
		  PCA9685_SetServoAngle(MIDDLE_FINGER_RIGHT_CHANNEL,  140);
 800102e:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8001104 <MotorDriver_ShakeHand+0x1d0>
 8001032:	2002      	movs	r0, #2
 8001034:	f000 ff50 	bl	8001ed8 <PCA9685_SetServoAngle>
		  //index Right hand (4)
		  PCA9685_SetServoAngle(INDEX_FINGER_RIGHT_CHANNEL,  170);
 8001038:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8001108 <MotorDriver_ShakeHand+0x1d4>
 800103c:	2003      	movs	r0, #3
 800103e:	f000 ff4b 	bl	8001ed8 <PCA9685_SetServoAngle>
		  //thumb Right hand (5)
		  PCA9685_SetServoAngle(THUMB_FINGER_RIGHT_CHANNEL,  15);
 8001042:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8001046:	2004      	movs	r0, #4
 8001048:	f000 ff46 	bl	8001ed8 <PCA9685_SetServoAngle>
	  HAL_Delay(4000);
 800104c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001050:	f001 fb38 	bl	80026c4 <HAL_Delay>
	  //shoulder release
	    if (Motor->channel == TIM_CHANNEL_1) {
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d114      	bne.n	8001086 <MotorDriver_ShakeHand+0x152>
	        Motor->timer->Instance->CCR1 = CCRX_Value-30.00; //60 duty cycle
 800105c:	887b      	ldrh	r3, [r7, #2]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fa0c 	bl	800047c <__aeabi_i2d>
 8001064:	f04f 0200 	mov.w	r2, #0
 8001068:	4b2a      	ldr	r3, [pc, #168]	; (8001114 <MotorDriver_ShakeHand+0x1e0>)
 800106a:	f7ff f8b9 	bl	80001e0 <__aeabi_dsub>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	4610      	mov	r0, r2
 8001074:	4619      	mov	r1, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681c      	ldr	r4, [r3, #0]
 800107c:	f7ff fd02 	bl	8000a84 <__aeabi_d2uiz>
 8001080:	4603      	mov	r3, r0
 8001082:	6363      	str	r3, [r4, #52]	; 0x34
 8001084:	e02d      	b.n	80010e2 <MotorDriver_ShakeHand+0x1ae>
	    } else if (Motor->channel == TIM_CHANNEL_2) {
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2b04      	cmp	r3, #4
 800108c:	d114      	bne.n	80010b8 <MotorDriver_ShakeHand+0x184>
	        Motor->timer->Instance->CCR2 = CCRX_Value-30.00;
 800108e:	887b      	ldrh	r3, [r7, #2]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff f9f3 	bl	800047c <__aeabi_i2d>
 8001096:	f04f 0200 	mov.w	r2, #0
 800109a:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <MotorDriver_ShakeHand+0x1e0>)
 800109c:	f7ff f8a0 	bl	80001e0 <__aeabi_dsub>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4610      	mov	r0, r2
 80010a6:	4619      	mov	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681c      	ldr	r4, [r3, #0]
 80010ae:	f7ff fce9 	bl	8000a84 <__aeabi_d2uiz>
 80010b2:	4603      	mov	r3, r0
 80010b4:	63a3      	str	r3, [r4, #56]	; 0x38
 80010b6:	e014      	b.n	80010e2 <MotorDriver_ShakeHand+0x1ae>
	    } else if (Motor->channel == TIM_CHANNEL_3) {
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2b08      	cmp	r3, #8
 80010be:	d105      	bne.n	80010cc <MotorDriver_ShakeHand+0x198>
	        Motor->timer->Instance->CCR3 = CCRX_Value;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	887a      	ldrh	r2, [r7, #2]
 80010c8:	63da      	str	r2, [r3, #60]	; 0x3c
 80010ca:	e00a      	b.n	80010e2 <MotorDriver_ShakeHand+0x1ae>
	    } else if (Motor->channel == TIM_CHANNEL_4) {
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	2b0c      	cmp	r3, #12
 80010d2:	d106      	bne.n	80010e2 <MotorDriver_ShakeHand+0x1ae>
	        Motor->timer->Instance->CCR4 = CCRX_Value=30.00;
 80010d4:	231e      	movs	r3, #30
 80010d6:	807b      	strh	r3, [r7, #2]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	221e      	movs	r2, #30
 80010e0:	641a      	str	r2, [r3, #64]	; 0x40
	    } else {
	        // Handle invalid channel if necessary
	    }
	    HAL_TIM_PWM_Start(Motor->timer, Motor->channel);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	4619      	mov	r1, r3
 80010ec:	4610      	mov	r0, r2
 80010ee:	f003 fce9 	bl	8004ac4 <HAL_TIM_PWM_Start>

	  HAL_Delay(4000);
 80010f2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80010f6:	f001 fae5 	bl	80026c4 <HAL_Delay>
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd90      	pop	{r4, r7, pc}
 8001102:	bf00      	nop
 8001104:	430c0000 	.word	0x430c0000
 8001108:	432a0000 	.word	0x432a0000
 800110c:	00000000 	.word	0x00000000
 8001110:	42960000 	.word	0x42960000
 8001114:	403e0000 	.word	0x403e0000

08001118 <MotorDriver_HoldObject_OneHand_Right>:
  *           - Sets servo angles for the fingers of the left hand to release the object.
  *           - Sets servo angles for other parts of the arms to specific positions.
  *           - Sets the PWM duty cycle for the specified Servo motor channel to a predefined value.
  *           - Starts the PWM output for the specified Servo motor channel.
  */
void MotorDriver_HoldObject_OneHand_Right(MotorConfig_t *Motor, uint16_t CCRX_Value) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	460b      	mov	r3, r1
 8001122:	807b      	strh	r3, [r7, #2]
    // A Shoulder IN Right
    if (Motor->channel == TIM_CHANNEL_1) {
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d105      	bne.n	8001138 <MotorDriver_HoldObject_OneHand_Right+0x20>
        Motor->timer->Instance->CCR1 = CCRX_Value;  //90 duty cycle
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	887a      	ldrh	r2, [r7, #2]
 8001134:	635a      	str	r2, [r3, #52]	; 0x34
 8001136:	e01c      	b.n	8001172 <MotorDriver_HoldObject_OneHand_Right+0x5a>
    } else if (Motor->channel == TIM_CHANNEL_2) {
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b04      	cmp	r3, #4
 800113e:	d105      	bne.n	800114c <MotorDriver_HoldObject_OneHand_Right+0x34>
        Motor->timer->Instance->CCR2 = CCRX_Value;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	887a      	ldrh	r2, [r7, #2]
 8001148:	639a      	str	r2, [r3, #56]	; 0x38
 800114a:	e012      	b.n	8001172 <MotorDriver_HoldObject_OneHand_Right+0x5a>
    } else if (Motor->channel == TIM_CHANNEL_3) {
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	2b08      	cmp	r3, #8
 8001152:	d105      	bne.n	8001160 <MotorDriver_HoldObject_OneHand_Right+0x48>
        Motor->timer->Instance->CCR3 = CCRX_Value;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	887a      	ldrh	r2, [r7, #2]
 800115c:	63da      	str	r2, [r3, #60]	; 0x3c
 800115e:	e008      	b.n	8001172 <MotorDriver_HoldObject_OneHand_Right+0x5a>
    } else if (Motor->channel == TIM_CHANNEL_4) {
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	2b0c      	cmp	r3, #12
 8001166:	d104      	bne.n	8001172 <MotorDriver_HoldObject_OneHand_Right+0x5a>
        Motor->timer->Instance->CCR4 = CCRX_Value;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	887a      	ldrh	r2, [r7, #2]
 8001170:	641a      	str	r2, [r3, #64]	; 0x40
    } else {
        // Handle invalid channel if necessary
    }
    HAL_TIM_PWM_Start(Motor->timer, Motor->channel);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	4619      	mov	r1, r3
 800117c:	4610      	mov	r0, r2
 800117e:	f003 fca1 	bl	8004ac4 <HAL_TIM_PWM_Start>


    HAL_Delay(3000);
 8001182:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001186:	f001 fa9d 	bl	80026c4 <HAL_Delay>
    // C elbow right
	  PCA9685_SetServoAngle(12,  10);
 800118a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800118e:	200c      	movs	r0, #12
 8001190:	f000 fea2 	bl	8001ed8 <PCA9685_SetServoAngle>
	  // D rest right
	  PCA9685_SetServoAngle(10,  100);
 8001194:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800121c <MotorDriver_HoldObject_OneHand_Right+0x104>
 8001198:	200a      	movs	r0, #10
 800119a:	f000 fe9d 	bl	8001ed8 <PCA9685_SetServoAngle>
	  HAL_Delay(4000);
 800119e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80011a2:	f001 fa8f 	bl	80026c4 <HAL_Delay>
    	  //open
    	  //Pinky Right hand (1)
    		  PCA9685_SetServoAngle( PINKY_FINGER_RIGHT_CHANNEL  ,  140);
 80011a6:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8001220 <MotorDriver_HoldObject_OneHand_Right+0x108>
 80011aa:	2001      	movs	r0, #1
 80011ac:	f000 fe94 	bl	8001ed8 <PCA9685_SetServoAngle>
    		  //Ring Right hand (2)
    		  PCA9685_SetServoAngle(RING_FINGER_RIGHT_CHANNEL,  140);
 80011b0:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8001220 <MotorDriver_HoldObject_OneHand_Right+0x108>
 80011b4:	2000      	movs	r0, #0
 80011b6:	f000 fe8f 	bl	8001ed8 <PCA9685_SetServoAngle>
    		  //middle Right hand (3)
    		  PCA9685_SetServoAngle(MIDDLE_FINGER_RIGHT_CHANNEL,  140);
 80011ba:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8001220 <MotorDriver_HoldObject_OneHand_Right+0x108>
 80011be:	2002      	movs	r0, #2
 80011c0:	f000 fe8a 	bl	8001ed8 <PCA9685_SetServoAngle>
    		  //index Right hand (4)
    		  PCA9685_SetServoAngle(INDEX_FINGER_RIGHT_CHANNEL,  170);
 80011c4:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8001224 <MotorDriver_HoldObject_OneHand_Right+0x10c>
 80011c8:	2003      	movs	r0, #3
 80011ca:	f000 fe85 	bl	8001ed8 <PCA9685_SetServoAngle>
    		  //thumb Right hand (5)
    		  PCA9685_SetServoAngle(THUMB_FINGER_RIGHT_CHANNEL,  15);
 80011ce:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 80011d2:	2004      	movs	r0, #4
 80011d4:	f000 fe80 	bl	8001ed8 <PCA9685_SetServoAngle>
    	  HAL_Delay(2000);
 80011d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011dc:	f001 fa72 	bl	80026c4 <HAL_Delay>
       //close
    	 //pinky Right hand (1)
    	 PCA9685_SetServoAngle(1,  10);
 80011e0:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80011e4:	2001      	movs	r0, #1
 80011e6:	f000 fe77 	bl	8001ed8 <PCA9685_SetServoAngle>
    	 //Ring Right hand (2)
    	 PCA9685_SetServoAngle(0,  0);
 80011ea:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8001228 <MotorDriver_HoldObject_OneHand_Right+0x110>
 80011ee:	2000      	movs	r0, #0
 80011f0:	f000 fe72 	bl	8001ed8 <PCA9685_SetServoAngle>
    	 //middle Right hand (3)
    	 PCA9685_SetServoAngle(2,  0);
 80011f4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8001228 <MotorDriver_HoldObject_OneHand_Right+0x110>
 80011f8:	2002      	movs	r0, #2
 80011fa:	f000 fe6d 	bl	8001ed8 <PCA9685_SetServoAngle>
    	 //index Right hand (4)
    	 PCA9685_SetServoAngle(3,  75);
 80011fe:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800122c <MotorDriver_HoldObject_OneHand_Right+0x114>
 8001202:	2003      	movs	r0, #3
 8001204:	f000 fe68 	bl	8001ed8 <PCA9685_SetServoAngle>
    	 //thumb Right hand (5)
    	 PCA9685_SetServoAngle(4,  75);
 8001208:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800122c <MotorDriver_HoldObject_OneHand_Right+0x114>
 800120c:	2004      	movs	r0, #4
 800120e:	f000 fe63 	bl	8001ed8 <PCA9685_SetServoAngle>

}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	42c80000 	.word	0x42c80000
 8001220:	430c0000 	.word	0x430c0000
 8001224:	432a0000 	.word	0x432a0000
 8001228:	00000000 	.word	0x00000000
 800122c:	42960000 	.word	0x42960000

08001230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001234:	f001 f9d4 	bl	80025e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001238:	f000 f87c 	bl	8001334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800123c:	f000 fbf6 	bl	8001a2c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001240:	f000 f8e2 	bl	8001408 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001244:	f000 f90e 	bl	8001464 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001248:	f000 f9fe 	bl	8001648 <MX_TIM3_Init>
  MX_TIM5_Init();
 800124c:	f000 faa8 	bl	80017a0 <MX_TIM5_Init>
  MX_TIM9_Init();
 8001250:	f000 fb34 	bl	80018bc <MX_TIM9_Init>
  MX_TIM10_Init();
 8001254:	f000 fb78 	bl	8001948 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001258:	f000 fb9a 	bl	8001990 <MX_TIM11_Init>
  MX_TIM4_Init();
 800125c:	f000 fa4c 	bl	80016f8 <MX_TIM4_Init>
  MX_TIM2_Init();
 8001260:	f000 f98e 	bl	8001580 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001264:	f000 fbb8 	bl	80019d8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  PCA9685_Init(&hi2c1);
 8001268:	482c      	ldr	r0, [pc, #176]	; (800131c <main+0xec>)
 800126a:	f000 fe91 	bl	8001f90 <PCA9685_Init>

    /* USER CODE BEGIN 3 */


  //TODO  CRC to check that data received right, parity check
  HAL_UART_Receive_IT(&huart1, rxDataGArrU8, 1);
 800126e:	2201      	movs	r2, #1
 8001270:	492b      	ldr	r1, [pc, #172]	; (8001320 <main+0xf0>)
 8001272:	482c      	ldr	r0, [pc, #176]	; (8001324 <main+0xf4>)
 8001274:	f004 fc07 	bl	8005a86 <HAL_UART_Receive_IT>
	  if(UART1_flag_gb == 1){
 8001278:	4b2b      	ldr	r3, [pc, #172]	; (8001328 <main+0xf8>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b01      	cmp	r3, #1
 8001280:	d1f5      	bne.n	800126e <main+0x3e>
			UART1_flag_gb = 0;
 8001282:	4b29      	ldr	r3, [pc, #164]	; (8001328 <main+0xf8>)
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]
			switch (rxDataGArrU8[0]){
 8001288:	4b25      	ldr	r3, [pc, #148]	; (8001320 <main+0xf0>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b03      	cmp	r3, #3
 800128e:	d02e      	beq.n	80012ee <main+0xbe>
 8001290:	2b03      	cmp	r3, #3
 8001292:	dc40      	bgt.n	8001316 <main+0xe6>
 8001294:	2b01      	cmp	r3, #1
 8001296:	d002      	beq.n	800129e <main+0x6e>
 8001298:	2b02      	cmp	r3, #2
 800129a:	d014      	beq.n	80012c6 <main+0x96>
				while(rxDataGArrU8[0] == 3){}
				break;
		  	    }
		  	    default:
		  	    {
		  	    	break;
 800129c:	e03b      	b.n	8001316 <main+0xe6>
				HAL_UART_Transmit(&huart1, txBufferGArrU8, 27, 10); //send received to ROS
 800129e:	230a      	movs	r3, #10
 80012a0:	221b      	movs	r2, #27
 80012a2:	4922      	ldr	r1, [pc, #136]	; (800132c <main+0xfc>)
 80012a4:	481f      	ldr	r0, [pc, #124]	; (8001324 <main+0xf4>)
 80012a6:	f004 fb63 	bl	8005970 <HAL_UART_Transmit>
		  	    MotorDriver_HoldObject_OneHand_Right(&motorShoulderInRight_gt, 90);
 80012aa:	215a      	movs	r1, #90	; 0x5a
 80012ac:	4820      	ldr	r0, [pc, #128]	; (8001330 <main+0x100>)
 80012ae:	f7ff ff33 	bl	8001118 <MotorDriver_HoldObject_OneHand_Right>
				HAL_Delay(1000);
 80012b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012b6:	f001 fa05 	bl	80026c4 <HAL_Delay>
				while(rxDataGArrU8[0] == 1){}
 80012ba:	bf00      	nop
 80012bc:	4b18      	ldr	r3, [pc, #96]	; (8001320 <main+0xf0>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d0fb      	beq.n	80012bc <main+0x8c>
				break;
 80012c4:	e028      	b.n	8001318 <main+0xe8>
		  	    MotorDriver_ReleaseObject_OneHand_Right(&motorShoulderInRight_gt, 60);
 80012c6:	213c      	movs	r1, #60	; 0x3c
 80012c8:	4819      	ldr	r0, [pc, #100]	; (8001330 <main+0x100>)
 80012ca:	f7ff fdc9 	bl	8000e60 <MotorDriver_ReleaseObject_OneHand_Right>
				HAL_UART_Transmit(&huart1, txBufferGArrU8, 27, 10); //send received to ROS
 80012ce:	230a      	movs	r3, #10
 80012d0:	221b      	movs	r2, #27
 80012d2:	4916      	ldr	r1, [pc, #88]	; (800132c <main+0xfc>)
 80012d4:	4813      	ldr	r0, [pc, #76]	; (8001324 <main+0xf4>)
 80012d6:	f004 fb4b 	bl	8005970 <HAL_UART_Transmit>
				HAL_Delay(1000);
 80012da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012de:	f001 f9f1 	bl	80026c4 <HAL_Delay>
				while(rxDataGArrU8[0] == 2){}
 80012e2:	bf00      	nop
 80012e4:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <main+0xf0>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d0fb      	beq.n	80012e4 <main+0xb4>
				break;
 80012ec:	e014      	b.n	8001318 <main+0xe8>
		  	    MotorDriver_ShakeHand(&motorShoulderInRight_gt, 90);
 80012ee:	215a      	movs	r1, #90	; 0x5a
 80012f0:	480f      	ldr	r0, [pc, #60]	; (8001330 <main+0x100>)
 80012f2:	f7ff fe1f 	bl	8000f34 <MotorDriver_ShakeHand>
				HAL_UART_Transmit(&huart1, txBufferGArrU8, 27, 10); //send received to ROS
 80012f6:	230a      	movs	r3, #10
 80012f8:	221b      	movs	r2, #27
 80012fa:	490c      	ldr	r1, [pc, #48]	; (800132c <main+0xfc>)
 80012fc:	4809      	ldr	r0, [pc, #36]	; (8001324 <main+0xf4>)
 80012fe:	f004 fb37 	bl	8005970 <HAL_UART_Transmit>
				HAL_Delay(1000);
 8001302:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001306:	f001 f9dd 	bl	80026c4 <HAL_Delay>
				while(rxDataGArrU8[0] == 3){}
 800130a:	bf00      	nop
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <main+0xf0>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b03      	cmp	r3, #3
 8001312:	d0fb      	beq.n	800130c <main+0xdc>
				break;
 8001314:	e000      	b.n	8001318 <main+0xe8>
		  	    	break;
 8001316:	bf00      	nop
  HAL_UART_Receive_IT(&huart1, rxDataGArrU8, 1);
 8001318:	e7a9      	b.n	800126e <main+0x3e>
 800131a:	bf00      	nop
 800131c:	2000004c 	.word	0x2000004c
 8001320:	20000328 	.word	0x20000328
 8001324:	200002e0 	.word	0x200002e0
 8001328:	2000032d 	.word	0x2000032d
 800132c:	20000000 	.word	0x20000000
 8001330:	2000001c 	.word	0x2000001c

08001334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b094      	sub	sp, #80	; 0x50
 8001338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133a:	f107 0320 	add.w	r3, r7, #32
 800133e:	2230      	movs	r2, #48	; 0x30
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f005 fb1a 	bl	800697c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001348:	f107 030c 	add.w	r3, r7, #12
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001358:	2300      	movs	r3, #0
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	4b28      	ldr	r3, [pc, #160]	; (8001400 <SystemClock_Config+0xcc>)
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	4a27      	ldr	r2, [pc, #156]	; (8001400 <SystemClock_Config+0xcc>)
 8001362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001366:	6413      	str	r3, [r2, #64]	; 0x40
 8001368:	4b25      	ldr	r3, [pc, #148]	; (8001400 <SystemClock_Config+0xcc>)
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001374:	2300      	movs	r3, #0
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	4b22      	ldr	r3, [pc, #136]	; (8001404 <SystemClock_Config+0xd0>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001380:	4a20      	ldr	r2, [pc, #128]	; (8001404 <SystemClock_Config+0xd0>)
 8001382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001386:	6013      	str	r3, [r2, #0]
 8001388:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <SystemClock_Config+0xd0>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001390:	607b      	str	r3, [r7, #4]
 8001392:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001394:	2302      	movs	r3, #2
 8001396:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001398:	2301      	movs	r3, #1
 800139a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800139c:	2310      	movs	r3, #16
 800139e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a0:	2302      	movs	r3, #2
 80013a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013a4:	2300      	movs	r3, #0
 80013a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013a8:	2308      	movs	r3, #8
 80013aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80013ac:	2348      	movs	r3, #72	; 0x48
 80013ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013b0:	2302      	movs	r3, #2
 80013b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013b4:	2304      	movs	r3, #4
 80013b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b8:	f107 0320 	add.w	r3, r7, #32
 80013bc:	4618      	mov	r0, r3
 80013be:	f002 fe8b 	bl	80040d8 <HAL_RCC_OscConfig>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013c8:	f000 fbc6 	bl	8001b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013cc:	230f      	movs	r3, #15
 80013ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d0:	2302      	movs	r3, #2
 80013d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013e2:	f107 030c 	add.w	r3, r7, #12
 80013e6:	2102      	movs	r1, #2
 80013e8:	4618      	mov	r0, r3
 80013ea:	f003 f8ed 	bl	80045c8 <HAL_RCC_ClockConfig>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80013f4:	f000 fbb0 	bl	8001b58 <Error_Handler>
  }
}
 80013f8:	bf00      	nop
 80013fa:	3750      	adds	r7, #80	; 0x50
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40023800 	.word	0x40023800
 8001404:	40007000 	.word	0x40007000

08001408 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <MX_I2C1_Init+0x50>)
 800140e:	4a13      	ldr	r2, [pc, #76]	; (800145c <MX_I2C1_Init+0x54>)
 8001410:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001412:	4b11      	ldr	r3, [pc, #68]	; (8001458 <MX_I2C1_Init+0x50>)
 8001414:	4a12      	ldr	r2, [pc, #72]	; (8001460 <MX_I2C1_Init+0x58>)
 8001416:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001418:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <MX_I2C1_Init+0x50>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800141e:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <MX_I2C1_Init+0x50>)
 8001420:	2200      	movs	r2, #0
 8001422:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <MX_I2C1_Init+0x50>)
 8001426:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800142a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800142c:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <MX_I2C1_Init+0x50>)
 800142e:	2200      	movs	r2, #0
 8001430:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001432:	4b09      	ldr	r3, [pc, #36]	; (8001458 <MX_I2C1_Init+0x50>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <MX_I2C1_Init+0x50>)
 800143a:	2200      	movs	r2, #0
 800143c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <MX_I2C1_Init+0x50>)
 8001440:	2200      	movs	r2, #0
 8001442:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001444:	4804      	ldr	r0, [pc, #16]	; (8001458 <MX_I2C1_Init+0x50>)
 8001446:	f001 fca3 	bl	8002d90 <HAL_I2C_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001450:	f000 fb82 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}
 8001458:	2000004c 	.word	0x2000004c
 800145c:	40005400 	.word	0x40005400
 8001460:	000186a0 	.word	0x000186a0

08001464 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b092      	sub	sp, #72	; 0x48
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800146a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
 8001484:	615a      	str	r2, [r3, #20]
 8001486:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	2220      	movs	r2, #32
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f005 fa74 	bl	800697c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001494:	4b38      	ldr	r3, [pc, #224]	; (8001578 <MX_TIM1_Init+0x114>)
 8001496:	4a39      	ldr	r2, [pc, #228]	; (800157c <MX_TIM1_Init+0x118>)
 8001498:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800149a:	4b37      	ldr	r3, [pc, #220]	; (8001578 <MX_TIM1_Init+0x114>)
 800149c:	2247      	movs	r2, #71	; 0x47
 800149e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a0:	4b35      	ldr	r3, [pc, #212]	; (8001578 <MX_TIM1_Init+0x114>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80014a6:	4b34      	ldr	r3, [pc, #208]	; (8001578 <MX_TIM1_Init+0x114>)
 80014a8:	2263      	movs	r2, #99	; 0x63
 80014aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ac:	4b32      	ldr	r3, [pc, #200]	; (8001578 <MX_TIM1_Init+0x114>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014b2:	4b31      	ldr	r3, [pc, #196]	; (8001578 <MX_TIM1_Init+0x114>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b8:	4b2f      	ldr	r3, [pc, #188]	; (8001578 <MX_TIM1_Init+0x114>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014be:	482e      	ldr	r0, [pc, #184]	; (8001578 <MX_TIM1_Init+0x114>)
 80014c0:	f003 fab1 	bl	8004a26 <HAL_TIM_PWM_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80014ca:	f000 fb45 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ce:	2300      	movs	r3, #0
 80014d0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d2:	2300      	movs	r3, #0
 80014d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014da:	4619      	mov	r1, r3
 80014dc:	4826      	ldr	r0, [pc, #152]	; (8001578 <MX_TIM1_Init+0x114>)
 80014de:	f004 f937 	bl	8005750 <HAL_TIMEx_MasterConfigSynchronization>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80014e8:	f000 fb36 	bl	8001b58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ec:	2360      	movs	r3, #96	; 0x60
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014f8:	2300      	movs	r3, #0
 80014fa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001500:	2300      	movs	r3, #0
 8001502:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001504:	2300      	movs	r3, #0
 8001506:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150c:	2200      	movs	r2, #0
 800150e:	4619      	mov	r1, r3
 8001510:	4819      	ldr	r0, [pc, #100]	; (8001578 <MX_TIM1_Init+0x114>)
 8001512:	f003 fcbb 	bl	8004e8c <HAL_TIM_PWM_ConfigChannel>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 800151c:	f000 fb1c 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001524:	220c      	movs	r2, #12
 8001526:	4619      	mov	r1, r3
 8001528:	4813      	ldr	r0, [pc, #76]	; (8001578 <MX_TIM1_Init+0x114>)
 800152a:	f003 fcaf 	bl	8004e8c <HAL_TIM_PWM_ConfigChannel>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8001534:	f000 fb10 	bl	8001b58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800153c:	2300      	movs	r3, #0
 800153e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800154c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001550:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001552:	2300      	movs	r3, #0
 8001554:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	4619      	mov	r1, r3
 800155a:	4807      	ldr	r0, [pc, #28]	; (8001578 <MX_TIM1_Init+0x114>)
 800155c:	f004 f966 	bl	800582c <HAL_TIMEx_ConfigBreakDeadTime>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001566:	f000 faf7 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800156a:	4803      	ldr	r0, [pc, #12]	; (8001578 <MX_TIM1_Init+0x114>)
 800156c:	f000 feae 	bl	80022cc <HAL_TIM_MspPostInit>

}
 8001570:	bf00      	nop
 8001572:	3748      	adds	r7, #72	; 0x48
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	200000a0 	.word	0x200000a0
 800157c:	40010000 	.word	0x40010000

08001580 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08a      	sub	sp, #40	; 0x28
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001586:	f107 0320 	add.w	r3, r7, #32
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
 800159c:	611a      	str	r2, [r3, #16]
 800159e:	615a      	str	r2, [r3, #20]
 80015a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015a2:	4b28      	ldr	r3, [pc, #160]	; (8001644 <MX_TIM2_Init+0xc4>)
 80015a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015aa:	4b26      	ldr	r3, [pc, #152]	; (8001644 <MX_TIM2_Init+0xc4>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b0:	4b24      	ldr	r3, [pc, #144]	; (8001644 <MX_TIM2_Init+0xc4>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80015b6:	4b23      	ldr	r3, [pc, #140]	; (8001644 <MX_TIM2_Init+0xc4>)
 80015b8:	f04f 32ff 	mov.w	r2, #4294967295
 80015bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015be:	4b21      	ldr	r3, [pc, #132]	; (8001644 <MX_TIM2_Init+0xc4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c4:	4b1f      	ldr	r3, [pc, #124]	; (8001644 <MX_TIM2_Init+0xc4>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015ca:	481e      	ldr	r0, [pc, #120]	; (8001644 <MX_TIM2_Init+0xc4>)
 80015cc:	f003 fa2b 	bl	8004a26 <HAL_TIM_PWM_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80015d6:	f000 fabf 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015da:	2300      	movs	r3, #0
 80015dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015e2:	f107 0320 	add.w	r3, r7, #32
 80015e6:	4619      	mov	r1, r3
 80015e8:	4816      	ldr	r0, [pc, #88]	; (8001644 <MX_TIM2_Init+0xc4>)
 80015ea:	f004 f8b1 	bl	8005750 <HAL_TIMEx_MasterConfigSynchronization>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80015f4:	f000 fab0 	bl	8001b58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015f8:	2360      	movs	r3, #96	; 0x60
 80015fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001600:	2300      	movs	r3, #0
 8001602:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	2200      	movs	r2, #0
 800160c:	4619      	mov	r1, r3
 800160e:	480d      	ldr	r0, [pc, #52]	; (8001644 <MX_TIM2_Init+0xc4>)
 8001610:	f003 fc3c 	bl	8004e8c <HAL_TIM_PWM_ConfigChannel>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800161a:	f000 fa9d 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	2204      	movs	r2, #4
 8001622:	4619      	mov	r1, r3
 8001624:	4807      	ldr	r0, [pc, #28]	; (8001644 <MX_TIM2_Init+0xc4>)
 8001626:	f003 fc31 	bl	8004e8c <HAL_TIM_PWM_ConfigChannel>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001630:	f000 fa92 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001634:	4803      	ldr	r0, [pc, #12]	; (8001644 <MX_TIM2_Init+0xc4>)
 8001636:	f000 fe49 	bl	80022cc <HAL_TIM_MspPostInit>

}
 800163a:	bf00      	nop
 800163c:	3728      	adds	r7, #40	; 0x28
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	200000e8 	.word	0x200000e8

08001648 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08c      	sub	sp, #48	; 0x30
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800164e:	f107 030c 	add.w	r3, r7, #12
 8001652:	2224      	movs	r2, #36	; 0x24
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f005 f990 	bl	800697c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001664:	4b22      	ldr	r3, [pc, #136]	; (80016f0 <MX_TIM3_Init+0xa8>)
 8001666:	4a23      	ldr	r2, [pc, #140]	; (80016f4 <MX_TIM3_Init+0xac>)
 8001668:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 800166a:	4b21      	ldr	r3, [pc, #132]	; (80016f0 <MX_TIM3_Init+0xa8>)
 800166c:	2263      	movs	r2, #99	; 0x63
 800166e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001670:	4b1f      	ldr	r3, [pc, #124]	; (80016f0 <MX_TIM3_Init+0xa8>)
 8001672:	2210      	movs	r2, #16
 8001674:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001676:	4b1e      	ldr	r3, [pc, #120]	; (80016f0 <MX_TIM3_Init+0xa8>)
 8001678:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800167c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167e:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <MX_TIM3_Init+0xa8>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001684:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <MX_TIM3_Init+0xa8>)
 8001686:	2200      	movs	r2, #0
 8001688:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800168a:	2303      	movs	r3, #3
 800168c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800168e:	2302      	movs	r3, #2
 8001690:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001692:	2301      	movs	r3, #1
 8001694:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001696:	2300      	movs	r3, #0
 8001698:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800169a:	230a      	movs	r3, #10
 800169c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800169e:	2302      	movs	r3, #2
 80016a0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016a2:	2301      	movs	r3, #1
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016a6:	2300      	movs	r3, #0
 80016a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80016aa:	230a      	movs	r3, #10
 80016ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80016ae:	f107 030c 	add.w	r3, r7, #12
 80016b2:	4619      	mov	r1, r3
 80016b4:	480e      	ldr	r0, [pc, #56]	; (80016f0 <MX_TIM3_Init+0xa8>)
 80016b6:	f003 fab5 	bl	8004c24 <HAL_TIM_Encoder_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80016c0:	f000 fa4a 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c4:	2300      	movs	r3, #0
 80016c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	4619      	mov	r1, r3
 80016d0:	4807      	ldr	r0, [pc, #28]	; (80016f0 <MX_TIM3_Init+0xa8>)
 80016d2:	f004 f83d 	bl	8005750 <HAL_TIMEx_MasterConfigSynchronization>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80016dc:	f000 fa3c 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 80016e0:	213c      	movs	r1, #60	; 0x3c
 80016e2:	4803      	ldr	r0, [pc, #12]	; (80016f0 <MX_TIM3_Init+0xa8>)
 80016e4:	f003 fb44 	bl	8004d70 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM3_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	3730      	adds	r7, #48	; 0x30
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000130 	.word	0x20000130
 80016f4:	40000400 	.word	0x40000400

080016f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08c      	sub	sp, #48	; 0x30
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016fe:	f107 030c 	add.w	r3, r7, #12
 8001702:	2224      	movs	r2, #36	; 0x24
 8001704:	2100      	movs	r1, #0
 8001706:	4618      	mov	r0, r3
 8001708:	f005 f938 	bl	800697c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001714:	4b20      	ldr	r3, [pc, #128]	; (8001798 <MX_TIM4_Init+0xa0>)
 8001716:	4a21      	ldr	r2, [pc, #132]	; (800179c <MX_TIM4_Init+0xa4>)
 8001718:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800171a:	4b1f      	ldr	r3, [pc, #124]	; (8001798 <MX_TIM4_Init+0xa0>)
 800171c:	2200      	movs	r2, #0
 800171e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001720:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <MX_TIM4_Init+0xa0>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001726:	4b1c      	ldr	r3, [pc, #112]	; (8001798 <MX_TIM4_Init+0xa0>)
 8001728:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800172c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800172e:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <MX_TIM4_Init+0xa0>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001734:	4b18      	ldr	r3, [pc, #96]	; (8001798 <MX_TIM4_Init+0xa0>)
 8001736:	2200      	movs	r2, #0
 8001738:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800173a:	2303      	movs	r3, #3
 800173c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800173e:	2302      	movs	r3, #2
 8001740:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001742:	2301      	movs	r3, #1
 8001744:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001746:	2300      	movs	r3, #0
 8001748:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800174a:	230a      	movs	r3, #10
 800174c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800174e:	2302      	movs	r3, #2
 8001750:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001752:	2301      	movs	r3, #1
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001756:	2300      	movs	r3, #0
 8001758:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800175a:	230a      	movs	r3, #10
 800175c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800175e:	f107 030c 	add.w	r3, r7, #12
 8001762:	4619      	mov	r1, r3
 8001764:	480c      	ldr	r0, [pc, #48]	; (8001798 <MX_TIM4_Init+0xa0>)
 8001766:	f003 fa5d 	bl	8004c24 <HAL_TIM_Encoder_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001770:	f000 f9f2 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001774:	2300      	movs	r3, #0
 8001776:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001778:	2300      	movs	r3, #0
 800177a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	4619      	mov	r1, r3
 8001780:	4805      	ldr	r0, [pc, #20]	; (8001798 <MX_TIM4_Init+0xa0>)
 8001782:	f003 ffe5 	bl	8005750 <HAL_TIMEx_MasterConfigSynchronization>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800178c:	f000 f9e4 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
//  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
  /* USER CODE END TIM4_Init 2 */

}
 8001790:	bf00      	nop
 8001792:	3730      	adds	r7, #48	; 0x30
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000178 	.word	0x20000178
 800179c:	40000800 	.word	0x40000800

080017a0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08e      	sub	sp, #56	; 0x38
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b4:	f107 0320 	add.w	r3, r7, #32
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
 80017cc:	615a      	str	r2, [r3, #20]
 80017ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80017d0:	4b38      	ldr	r3, [pc, #224]	; (80018b4 <MX_TIM5_Init+0x114>)
 80017d2:	4a39      	ldr	r2, [pc, #228]	; (80018b8 <MX_TIM5_Init+0x118>)
 80017d4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1440-1;
 80017d6:	4b37      	ldr	r3, [pc, #220]	; (80018b4 <MX_TIM5_Init+0x114>)
 80017d8:	f240 529f 	movw	r2, #1439	; 0x59f
 80017dc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017de:	4b35      	ldr	r3, [pc, #212]	; (80018b4 <MX_TIM5_Init+0x114>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 80017e4:	4b33      	ldr	r3, [pc, #204]	; (80018b4 <MX_TIM5_Init+0x114>)
 80017e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017ea:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ec:	4b31      	ldr	r3, [pc, #196]	; (80018b4 <MX_TIM5_Init+0x114>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f2:	4b30      	ldr	r3, [pc, #192]	; (80018b4 <MX_TIM5_Init+0x114>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80017f8:	482e      	ldr	r0, [pc, #184]	; (80018b4 <MX_TIM5_Init+0x114>)
 80017fa:	f003 f8c5 	bl	8004988 <HAL_TIM_Base_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001804:	f000 f9a8 	bl	8001b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800180c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800180e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001812:	4619      	mov	r1, r3
 8001814:	4827      	ldr	r0, [pc, #156]	; (80018b4 <MX_TIM5_Init+0x114>)
 8001816:	f003 fbfb 	bl	8005010 <HAL_TIM_ConfigClockSource>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001820:	f000 f99a 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001824:	4823      	ldr	r0, [pc, #140]	; (80018b4 <MX_TIM5_Init+0x114>)
 8001826:	f003 f8fe 	bl	8004a26 <HAL_TIM_PWM_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001830:	f000 f992 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001834:	2300      	movs	r3, #0
 8001836:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001838:	2300      	movs	r3, #0
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800183c:	f107 0320 	add.w	r3, r7, #32
 8001840:	4619      	mov	r1, r3
 8001842:	481c      	ldr	r0, [pc, #112]	; (80018b4 <MX_TIM5_Init+0x114>)
 8001844:	f003 ff84 	bl	8005750 <HAL_TIMEx_MasterConfigSynchronization>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800184e:	f000 f983 	bl	8001b58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001852:	2360      	movs	r3, #96	; 0x60
 8001854:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800185e:	2300      	movs	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001862:	1d3b      	adds	r3, r7, #4
 8001864:	2200      	movs	r2, #0
 8001866:	4619      	mov	r1, r3
 8001868:	4812      	ldr	r0, [pc, #72]	; (80018b4 <MX_TIM5_Init+0x114>)
 800186a:	f003 fb0f 	bl	8004e8c <HAL_TIM_PWM_ConfigChannel>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001874:	f000 f970 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	2204      	movs	r2, #4
 800187c:	4619      	mov	r1, r3
 800187e:	480d      	ldr	r0, [pc, #52]	; (80018b4 <MX_TIM5_Init+0x114>)
 8001880:	f003 fb04 	bl	8004e8c <HAL_TIM_PWM_ConfigChannel>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 800188a:	f000 f965 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	2208      	movs	r2, #8
 8001892:	4619      	mov	r1, r3
 8001894:	4807      	ldr	r0, [pc, #28]	; (80018b4 <MX_TIM5_Init+0x114>)
 8001896:	f003 faf9 	bl	8004e8c <HAL_TIM_PWM_ConfigChannel>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM5_Init+0x104>
  {
    Error_Handler();
 80018a0:	f000 f95a 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80018a4:	4803      	ldr	r0, [pc, #12]	; (80018b4 <MX_TIM5_Init+0x114>)
 80018a6:	f000 fd11 	bl	80022cc <HAL_TIM_MspPostInit>

}
 80018aa:	bf00      	nop
 80018ac:	3738      	adds	r7, #56	; 0x38
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200001c0 	.word	0x200001c0
 80018b8:	40000c00 	.word	0x40000c00

080018bc <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b088      	sub	sp, #32
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
 80018d0:	615a      	str	r2, [r3, #20]
 80018d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80018d4:	4b1a      	ldr	r3, [pc, #104]	; (8001940 <MX_TIM9_Init+0x84>)
 80018d6:	4a1b      	ldr	r2, [pc, #108]	; (8001944 <MX_TIM9_Init+0x88>)
 80018d8:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1440-1;
 80018da:	4b19      	ldr	r3, [pc, #100]	; (8001940 <MX_TIM9_Init+0x84>)
 80018dc:	f240 529f 	movw	r2, #1439	; 0x59f
 80018e0:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e2:	4b17      	ldr	r3, [pc, #92]	; (8001940 <MX_TIM9_Init+0x84>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 80018e8:	4b15      	ldr	r3, [pc, #84]	; (8001940 <MX_TIM9_Init+0x84>)
 80018ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018ee:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f0:	4b13      	ldr	r3, [pc, #76]	; (8001940 <MX_TIM9_Init+0x84>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f6:	4b12      	ldr	r3, [pc, #72]	; (8001940 <MX_TIM9_Init+0x84>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80018fc:	4810      	ldr	r0, [pc, #64]	; (8001940 <MX_TIM9_Init+0x84>)
 80018fe:	f003 f892 	bl	8004a26 <HAL_TIM_PWM_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM9_Init+0x50>
  {
    Error_Handler();
 8001908:	f000 f926 	bl	8001b58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800190c:	2360      	movs	r3, #96	; 0x60
 800190e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001914:	2300      	movs	r3, #0
 8001916:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	2204      	movs	r2, #4
 8001920:	4619      	mov	r1, r3
 8001922:	4807      	ldr	r0, [pc, #28]	; (8001940 <MX_TIM9_Init+0x84>)
 8001924:	f003 fab2 	bl	8004e8c <HAL_TIM_PWM_ConfigChannel>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 800192e:	f000 f913 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001932:	4803      	ldr	r0, [pc, #12]	; (8001940 <MX_TIM9_Init+0x84>)
 8001934:	f000 fcca 	bl	80022cc <HAL_TIM_MspPostInit>

}
 8001938:	bf00      	nop
 800193a:	3720      	adds	r7, #32
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000208 	.word	0x20000208
 8001944:	40014000 	.word	0x40014000

08001948 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800194c:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <MX_TIM10_Init+0x40>)
 800194e:	4a0f      	ldr	r2, [pc, #60]	; (800198c <MX_TIM10_Init+0x44>)
 8001950:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001952:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <MX_TIM10_Init+0x40>)
 8001954:	2200      	movs	r2, #0
 8001956:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001958:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <MX_TIM10_Init+0x40>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800195e:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <MX_TIM10_Init+0x40>)
 8001960:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001964:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001966:	4b08      	ldr	r3, [pc, #32]	; (8001988 <MX_TIM10_Init+0x40>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <MX_TIM10_Init+0x40>)
 800196e:	2200      	movs	r2, #0
 8001970:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001972:	4805      	ldr	r0, [pc, #20]	; (8001988 <MX_TIM10_Init+0x40>)
 8001974:	f003 f808 	bl	8004988 <HAL_TIM_Base_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800197e:	f000 f8eb 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000250 	.word	0x20000250
 800198c:	40014400 	.word	0x40014400

08001990 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001994:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <MX_TIM11_Init+0x40>)
 8001996:	4a0f      	ldr	r2, [pc, #60]	; (80019d4 <MX_TIM11_Init+0x44>)
 8001998:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800199a:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <MX_TIM11_Init+0x40>)
 800199c:	2200      	movs	r2, #0
 800199e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a0:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <MX_TIM11_Init+0x40>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <MX_TIM11_Init+0x40>)
 80019a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019ac:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ae:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <MX_TIM11_Init+0x40>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <MX_TIM11_Init+0x40>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80019ba:	4805      	ldr	r0, [pc, #20]	; (80019d0 <MX_TIM11_Init+0x40>)
 80019bc:	f002 ffe4 	bl	8004988 <HAL_TIM_Base_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80019c6:	f000 f8c7 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000298 	.word	0x20000298
 80019d4:	40014800 	.word	0x40014800

080019d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <MX_USART1_UART_Init+0x4c>)
 80019de:	4a12      	ldr	r2, [pc, #72]	; (8001a28 <MX_USART1_UART_Init+0x50>)
 80019e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <MX_USART1_UART_Init+0x4c>)
 80019e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019ea:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <MX_USART1_UART_Init+0x4c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <MX_USART1_UART_Init+0x4c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <MX_USART1_UART_Init+0x4c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019fc:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <MX_USART1_UART_Init+0x4c>)
 80019fe:	220c      	movs	r2, #12
 8001a00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a02:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <MX_USART1_UART_Init+0x4c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <MX_USART1_UART_Init+0x4c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a0e:	4805      	ldr	r0, [pc, #20]	; (8001a24 <MX_USART1_UART_Init+0x4c>)
 8001a10:	f003 ff5e 	bl	80058d0 <HAL_UART_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a1a:	f000 f89d 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	200002e0 	.word	0x200002e0
 8001a28:	40011000 	.word	0x40011000

08001a2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	60da      	str	r2, [r3, #12]
 8001a40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	4b32      	ldr	r3, [pc, #200]	; (8001b10 <MX_GPIO_Init+0xe4>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a31      	ldr	r2, [pc, #196]	; (8001b10 <MX_GPIO_Init+0xe4>)
 8001a4c:	f043 0304 	orr.w	r3, r3, #4
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b2f      	ldr	r3, [pc, #188]	; (8001b10 <MX_GPIO_Init+0xe4>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0304 	and.w	r3, r3, #4
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	4b2b      	ldr	r3, [pc, #172]	; (8001b10 <MX_GPIO_Init+0xe4>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a2a      	ldr	r2, [pc, #168]	; (8001b10 <MX_GPIO_Init+0xe4>)
 8001a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4b28      	ldr	r3, [pc, #160]	; (8001b10 <MX_GPIO_Init+0xe4>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	4b24      	ldr	r3, [pc, #144]	; (8001b10 <MX_GPIO_Init+0xe4>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a23      	ldr	r2, [pc, #140]	; (8001b10 <MX_GPIO_Init+0xe4>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b21      	ldr	r3, [pc, #132]	; (8001b10 <MX_GPIO_Init+0xe4>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	607b      	str	r3, [r7, #4]
 8001a9a:	4b1d      	ldr	r3, [pc, #116]	; (8001b10 <MX_GPIO_Init+0xe4>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a1c      	ldr	r2, [pc, #112]	; (8001b10 <MX_GPIO_Init+0xe4>)
 8001aa0:	f043 0302 	orr.w	r3, r3, #2
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <MX_GPIO_Init+0xe4>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	607b      	str	r3, [r7, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MotorR_ER_Pin|MotorR_EL_Pin|GPIO_OUTPUT_for_UART_Pin, GPIO_PIN_RESET);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f44f 41c2 	mov.w	r1, #24832	; 0x6100
 8001ab8:	4816      	ldr	r0, [pc, #88]	; (8001b14 <MX_GPIO_Init+0xe8>)
 8001aba:	f001 f94f 	bl	8002d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|MotorL_isL_Pin|MotorL_isR_Pin|MotorL_EL_Pin
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f24f 0132 	movw	r1, #61490	; 0xf032
 8001ac4:	4814      	ldr	r0, [pc, #80]	; (8001b18 <MX_GPIO_Init+0xec>)
 8001ac6:	f001 f949 	bl	8002d5c <HAL_GPIO_WritePin>
                          |MotorL_ER_Pin|MotorR_isL_Pin|MotorR_isR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : MotorR_ER_Pin MotorR_EL_Pin GPIO_OUTPUT_for_UART_Pin */
  GPIO_InitStruct.Pin = MotorR_ER_Pin|MotorR_EL_Pin|GPIO_OUTPUT_for_UART_Pin;
 8001aca:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 8001ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	480c      	ldr	r0, [pc, #48]	; (8001b14 <MX_GPIO_Init+0xe8>)
 8001ae4:	f000 ffb6 	bl	8002a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 MotorL_isL_Pin MotorL_isR_Pin MotorL_EL_Pin
                           MotorL_ER_Pin MotorR_isL_Pin MotorR_isR_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|MotorL_isL_Pin|MotorL_isR_Pin|MotorL_EL_Pin
 8001ae8:	f24f 0332 	movw	r3, #61490	; 0xf032
 8001aec:	617b      	str	r3, [r7, #20]
                          |MotorL_ER_Pin|MotorR_isL_Pin|MotorR_isR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aee:	2301      	movs	r3, #1
 8001af0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af6:	2300      	movs	r3, #0
 8001af8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	4619      	mov	r1, r3
 8001b00:	4805      	ldr	r0, [pc, #20]	; (8001b18 <MX_GPIO_Init+0xec>)
 8001b02:	f000 ffa7 	bl	8002a54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b06:	bf00      	nop
 8001b08:	3728      	adds	r7, #40	; 0x28
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40020800 	.word	0x40020800
 8001b18:	40020400 	.word	0x40020400

08001b1c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
  */
	if(huart->Instance == USART1){
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a08      	ldr	r2, [pc, #32]	; (8001b4c <HAL_UART_RxCpltCallback+0x30>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d108      	bne.n	8001b40 <HAL_UART_RxCpltCallback+0x24>
		rxBufferGArrU8[0] = huart->Instance->DR;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <HAL_UART_RxCpltCallback+0x34>)
 8001b38:	701a      	strb	r2, [r3, #0]
		UART1_flag_gb = 1;
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_UART_RxCpltCallback+0x38>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	701a      	strb	r2, [r3, #0]
	}
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	40011000 	.word	0x40011000
 8001b50:	2000032c 	.word	0x2000032c
 8001b54:	2000032d 	.word	0x2000032d

08001b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b5c:	b672      	cpsid	i
}
 8001b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b60:	e7fe      	b.n	8001b60 <Error_Handler+0x8>
	...

08001b64 <PCA9685_SetBit>:
  * @param  Bit: The position of the bit to set (0 to 7).
  * @param  Value: The value to set the bit (0 or 1).
  * @retval PCA9685_STATUS: PCA9685_OK if the operation is successful, PCA9685_ERROR otherwise.
  */
PCA9685_STATUS PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b088      	sub	sp, #32
 8001b68:	af04      	add	r7, sp, #16
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
 8001b6e:	460b      	mov	r3, r1
 8001b70:	71bb      	strb	r3, [r7, #6]
 8001b72:	4613      	mov	r3, r2
 8001b74:	717b      	strb	r3, [r7, #5]
	uint8_t tmp;
    // Convert any non-zero value to 1
	if(Value) Value = 1;
 8001b76:	797b      	ldrb	r3, [r7, #5]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <PCA9685_SetBit+0x1c>
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	717b      	strb	r3, [r7, #5]
    // Read the current value from the register
	if(HAL_OK != HAL_I2C_Mem_Read(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 8001b80:	4b24      	ldr	r3, [pc, #144]	; (8001c14 <PCA9685_SetBit+0xb0>)
 8001b82:	6818      	ldr	r0, [r3, #0]
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	230a      	movs	r3, #10
 8001b8a:	9302      	str	r3, [sp, #8]
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	9301      	str	r3, [sp, #4]
 8001b90:	f107 030f 	add.w	r3, r7, #15
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	2301      	movs	r3, #1
 8001b98:	21a0      	movs	r1, #160	; 0xa0
 8001b9a:	f001 fc35 	bl	8003408 <HAL_I2C_Mem_Read>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <PCA9685_SetBit+0x44>
	{
		return PCA9685_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e031      	b.n	8001c0c <PCA9685_SetBit+0xa8>
	}
    // Clear the bit position
	tmp &= ~((1<<PCA9685_MODE1_RESTART_BIT)|(1<<Bit));
 8001ba8:	79bb      	ldrb	r3, [r7, #6]
 8001baa:	2201      	movs	r2, #1
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	b25b      	sxtb	r3, r3
 8001bb2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bb6:	b25b      	sxtb	r3, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	b25a      	sxtb	r2, r3
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	b25b      	sxtb	r3, r3
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	b25b      	sxtb	r3, r3
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	73fb      	strb	r3, [r7, #15]
    // Set the bit to the specified value
	tmp |= (Value&1)<<Bit;
 8001bc8:	797b      	ldrb	r3, [r7, #5]
 8001bca:	f003 0201 	and.w	r2, r3, #1
 8001bce:	79bb      	ldrb	r3, [r7, #6]
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	b25a      	sxtb	r2, r3
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	b25b      	sxtb	r3, r3
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	b25b      	sxtb	r3, r3
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	73fb      	strb	r3, [r7, #15]
    // Write the modified value back to the register
	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 8001be2:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <PCA9685_SetBit+0xb0>)
 8001be4:	6818      	ldr	r0, [r3, #0]
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	230a      	movs	r3, #10
 8001bec:	9302      	str	r3, [sp, #8]
 8001bee:	2301      	movs	r3, #1
 8001bf0:	9301      	str	r3, [sp, #4]
 8001bf2:	f107 030f 	add.w	r3, r7, #15
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	21a0      	movs	r1, #160	; 0xa0
 8001bfc:	f001 fb0a 	bl	8003214 <HAL_I2C_Mem_Write>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <PCA9685_SetBit+0xa6>
	{
		return PCA9685_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <PCA9685_SetBit+0xa8>
	}

	return PCA9685_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000330 	.word	0x20000330

08001c18 <PCA9685_SoftwareReset>:
  * @brief  Performs a software reset on the PCA9685 device.
  * @note   This function sends a software reset command to the PCA9685 device, which resets all internal registers to their default values.
  * @retval PCA9685_STATUS: PCA9685_OK if the software reset operation is successful, PCA9685_ERROR otherwise.
  */
PCA9685_STATUS PCA9685_SoftwareReset(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af02      	add	r7, sp, #8
	uint8_t cmd = 0x6;
 8001c1e:	2306      	movs	r3, #6
 8001c20:	71fb      	strb	r3, [r7, #7]
	// Send the software reset command via I2C
	if(HAL_OK == HAL_I2C_Master_Transmit(pca9685_i2c, 0x00, &cmd, 1, 10))
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <PCA9685_SoftwareReset+0x30>)
 8001c24:	6818      	ldr	r0, [r3, #0]
 8001c26:	1dfa      	adds	r2, r7, #7
 8001c28:	230a      	movs	r3, #10
 8001c2a:	9300      	str	r3, [sp, #0]
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	2100      	movs	r1, #0
 8001c30:	f001 f9f2 	bl	8003018 <HAL_I2C_Master_Transmit>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <PCA9685_SoftwareReset+0x26>
	{
		return PCA9685_OK;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	e000      	b.n	8001c40 <PCA9685_SoftwareReset+0x28>
	}
	// Return error status if the transmission fails
	return PCA9685_ERROR;
 8001c3e:	2301      	movs	r3, #1
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000330 	.word	0x20000330

08001c4c <PCA9685_SleepMode>:
  *             @arg 0: Disable sleep mode (normal operation).
  *             @arg 1: Enable sleep mode.
  * @retval PCA9685_STATUS: PCA9685_OK if the sleep mode setting is successful, PCA9685_ERROR otherwise.
  */
PCA9685_STATUS PCA9685_SleepMode(uint8_t Enable)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
    // Call PCA9685_SetBit function to set or clear the sleep mode bit in MODE1 register
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, Enable);
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	2104      	movs	r1, #4
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	f7ff ff81 	bl	8001b64 <PCA9685_SetBit>
 8001c62:	4603      	mov	r3, r0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <PCA9685_RestartMode>:
  *             @arg 0: Disable restart mode (PWM outputs are not restarted immediately).
  *             @arg 1: Enable restart mode (PWM outputs are restarted immediately upon receiving new values in LEDn_ON registers).
  * @retval PCA9685_STATUS: PCA9685_OK if the restart mode setting is successful, PCA9685_ERROR otherwise.
  */
PCA9685_STATUS PCA9685_RestartMode(uint8_t Enable)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	71fb      	strb	r3, [r7, #7]
    // Call PCA9685_SetBit function to set or clear the restart mode bit in MODE1 register
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, Enable);
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	2107      	movs	r1, #7
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	f7ff ff71 	bl	8001b64 <PCA9685_SetBit>
 8001c82:	4603      	mov	r3, r0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <PCA9685_AutoIncrement>:
  *             @arg 0: Disable auto-increment mode (consecutive register accesses are not automatically incremented).
  *             @arg 1: Enable auto-increment mode (consecutive register accesses are automatically incremented).
  * @retval PCA9685_STATUS: PCA9685_OK if the auto-increment mode setting is successful, PCA9685_ERROR otherwise.
  */
PCA9685_STATUS PCA9685_AutoIncrement(uint8_t Enable)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
    // Call PCA9685_SetBit function to set or clear the auto-increment mode bit in MODE1 register
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, Enable);
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	2105      	movs	r1, #5
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	f7ff ff61 	bl	8001b64 <PCA9685_SetBit>
 8001ca2:	4603      	mov	r3, r0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	0000      	movs	r0, r0
	...

08001cb0 <PCA9685_SetPwmFrequency>:
  * @param  Frequency: The desired PWM frequency to be set (in Hz).
  * @note   The PWM frequency is set by configuring the prescaler value in the PCA9685 device.
  * @retval PCA9685_STATUS: PCA9685_OK if the PWM frequency setting is successful, PCA9685_ERROR otherwise.
  */
PCA9685_STATUS PCA9685_SetPwmFrequency(uint16_t Frequency)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af04      	add	r7, sp, #16
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	80fb      	strh	r3, [r7, #6]
	float PrescalerVal;
	uint8_t Prescale;

    // Determine the prescale value based on the desired PWM frequency
	if(Frequency >= 1526)
 8001cba:	88fb      	ldrh	r3, [r7, #6]
 8001cbc:	f240 52f5 	movw	r2, #1525	; 0x5f5
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d902      	bls.n	8001cca <PCA9685_SetPwmFrequency+0x1a>
	{
		Prescale = 0x03;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	72fb      	strb	r3, [r7, #11]
 8001cc8:	e046      	b.n	8001d58 <PCA9685_SetPwmFrequency+0xa8>
	}
	else if(Frequency <= 24)
 8001cca:	88fb      	ldrh	r3, [r7, #6]
 8001ccc:	2b18      	cmp	r3, #24
 8001cce:	d802      	bhi.n	8001cd6 <PCA9685_SetPwmFrequency+0x26>
	{
		Prescale = 0xFF;
 8001cd0:	23ff      	movs	r3, #255	; 0xff
 8001cd2:	72fb      	strb	r3, [r7, #11]
 8001cd4:	e040      	b.n	8001d58 <PCA9685_SetPwmFrequency+0xa8>
	}
	else
	{
		PrescalerVal = (25000000 / (4096.0 * (float)Frequency)) - 1;
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	ee07 3a90 	vmov	s15, r3
 8001cdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ce0:	ee17 0a90 	vmov	r0, s15
 8001ce4:	f7fe fbdc 	bl	80004a0 <__aeabi_f2d>
 8001ce8:	f04f 0200 	mov.w	r2, #0
 8001cec:	4b2a      	ldr	r3, [pc, #168]	; (8001d98 <PCA9685_SetPwmFrequency+0xe8>)
 8001cee:	f7fe fc2f 	bl	8000550 <__aeabi_dmul>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	a126      	add	r1, pc, #152	; (adr r1, 8001d90 <PCA9685_SetPwmFrequency+0xe0>)
 8001cf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001cfc:	f7fe fd52 	bl	80007a4 <__aeabi_ddiv>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4610      	mov	r0, r2
 8001d06:	4619      	mov	r1, r3
 8001d08:	f04f 0200 	mov.w	r2, #0
 8001d0c:	4b23      	ldr	r3, [pc, #140]	; (8001d9c <PCA9685_SetPwmFrequency+0xec>)
 8001d0e:	f7fe fa67 	bl	80001e0 <__aeabi_dsub>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	4610      	mov	r0, r2
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f7fe fed3 	bl	8000ac4 <__aeabi_d2f>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	60fb      	str	r3, [r7, #12]
		Prescale = floor(PrescalerVal + 0.5);
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f7fe fbbc 	bl	80004a0 <__aeabi_f2d>
 8001d28:	f04f 0200 	mov.w	r2, #0
 8001d2c:	4b1c      	ldr	r3, [pc, #112]	; (8001da0 <PCA9685_SetPwmFrequency+0xf0>)
 8001d2e:	f7fe fa59 	bl	80001e4 <__adddf3>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	ec43 2b17 	vmov	d7, r2, r3
 8001d3a:	eeb0 0a47 	vmov.f32	s0, s14
 8001d3e:	eef0 0a67 	vmov.f32	s1, s15
 8001d42:	f004 fe49 	bl	80069d8 <floor>
 8001d46:	ec53 2b10 	vmov	r2, r3, d0
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f7fe fe99 	bl	8000a84 <__aeabi_d2uiz>
 8001d52:	4603      	mov	r3, r0
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	72fb      	strb	r3, [r7, #11]
	}

	//	To change the frequency, PCA9685 have to be in Sleep mode.
	PCA9685_SleepMode(1);
 8001d58:	2001      	movs	r0, #1
 8001d5a:	f7ff ff77 	bl	8001c4c <PCA9685_SleepMode>
    // Write the prescale value to the PCA9685 device
	HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, PCA9685_PRESCALE, 1, &Prescale, 1, 10); // Write Prescale value
 8001d5e:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <PCA9685_SetPwmFrequency+0xf4>)
 8001d60:	6818      	ldr	r0, [r3, #0]
 8001d62:	230a      	movs	r3, #10
 8001d64:	9302      	str	r3, [sp, #8]
 8001d66:	2301      	movs	r3, #1
 8001d68:	9301      	str	r3, [sp, #4]
 8001d6a:	f107 030b 	add.w	r3, r7, #11
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	2301      	movs	r3, #1
 8001d72:	22fe      	movs	r2, #254	; 0xfe
 8001d74:	21a0      	movs	r1, #160	; 0xa0
 8001d76:	f001 fa4d 	bl	8003214 <HAL_I2C_Mem_Write>
	// Set the PCA9685 device back to Awake mode
	PCA9685_SleepMode(0);
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	f7ff ff66 	bl	8001c4c <PCA9685_SleepMode>
    // Enable restart mode to apply the frequency change immediately
	PCA9685_RestartMode(1);
 8001d80:	2001      	movs	r0, #1
 8001d82:	f7ff ff73 	bl	8001c6c <PCA9685_RestartMode>
	return PCA9685_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	00000000 	.word	0x00000000
 8001d94:	4177d784 	.word	0x4177d784
 8001d98:	40b00000 	.word	0x40b00000
 8001d9c:	3ff00000 	.word	0x3ff00000
 8001da0:	3fe00000 	.word	0x3fe00000
 8001da4:	20000330 	.word	0x20000330

08001da8 <PCA9685_SetPwm>:
  *
  *         The tick value represents a fraction of the PWM period, with 4096 ticks per period.
  * @retval PCA9685_STATUS: PCA9685_OK if the PWM setting is successful, PCA9685_ERROR otherwise.
  */
PCA9685_STATUS PCA9685_SetPwm(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b088      	sub	sp, #32
 8001dac:	af04      	add	r7, sp, #16
 8001dae:	4603      	mov	r3, r0
 8001db0:	71fb      	strb	r3, [r7, #7]
 8001db2:	460b      	mov	r3, r1
 8001db4:	80bb      	strh	r3, [r7, #4]
 8001db6:	4613      	mov	r3, r2
 8001db8:	807b      	strh	r3, [r7, #2]
	uint8_t RegisterAddress;
	uint8_t Message[4];

    // Calculate the register address for the specified channel
	RegisterAddress = PCA9685_LED0_ON_L + (4 * Channel);
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	3306      	adds	r3, #6
 8001dc2:	73fb      	strb	r3, [r7, #15]
    // Split the OnTime and OffTime values into individual bytes
	Message[0] = OnTime & 0xFF;
 8001dc4:	88bb      	ldrh	r3, [r7, #4]
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	723b      	strb	r3, [r7, #8]
	Message[1] = OnTime>>8;
 8001dca:	88bb      	ldrh	r3, [r7, #4]
 8001dcc:	0a1b      	lsrs	r3, r3, #8
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	727b      	strb	r3, [r7, #9]
	Message[2] = OffTime & 0xFF;
 8001dd4:	887b      	ldrh	r3, [r7, #2]
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	72bb      	strb	r3, [r7, #10]
	Message[3] = OffTime>>8;
 8001dda:	887b      	ldrh	r3, [r7, #2]
 8001ddc:	0a1b      	lsrs	r3, r3, #8
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	72fb      	strb	r3, [r7, #11]
    // Write the OnTime and OffTime values to the corresponding LED registers via I2C
	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, RegisterAddress, 1, Message, 4, 10))
 8001de4:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <PCA9685_SetPwm+0x70>)
 8001de6:	6818      	ldr	r0, [r3, #0]
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	230a      	movs	r3, #10
 8001dee:	9302      	str	r3, [sp, #8]
 8001df0:	2304      	movs	r3, #4
 8001df2:	9301      	str	r3, [sp, #4]
 8001df4:	f107 0308 	add.w	r3, r7, #8
 8001df8:	9300      	str	r3, [sp, #0]
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	21a0      	movs	r1, #160	; 0xa0
 8001dfe:	f001 fa09 	bl	8003214 <HAL_I2C_Mem_Write>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <PCA9685_SetPwm+0x64>
	{
		return PCA9685_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e000      	b.n	8001e0e <PCA9685_SetPwm+0x66>
	}

	return PCA9685_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000330 	.word	0x20000330

08001e1c <PCA9685_SetPin>:
  *             @arg 1: Invert the PWM signal.
  * @note   The Value parameter represents the ON time for the PWM signal when not inverted, and the OFF time when inverted.
  * @retval PCA9685_STATUS: PCA9685_OK if the PWM setting is successful, PCA9685_ERROR otherwise.
  */
PCA9685_STATUS PCA9685_SetPin(uint8_t Channel, uint16_t Value, uint8_t Invert)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	71fb      	strb	r3, [r7, #7]
 8001e26:	460b      	mov	r3, r1
 8001e28:	80bb      	strh	r3, [r7, #4]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	71bb      	strb	r3, [r7, #6]

  // Ensure Value is within the valid range (0 to 4095)
  if(Value > 4095) Value = 4095;
 8001e2e:	88bb      	ldrh	r3, [r7, #4]
 8001e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e34:	d302      	bcc.n	8001e3c <PCA9685_SetPin+0x20>
 8001e36:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001e3a:	80bb      	strh	r3, [r7, #4]

  // Determine the PWM duty cycle based on the provided Value and Invert settings
  if (Invert) {
 8001e3c:	79bb      	ldrb	r3, [r7, #6]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d025      	beq.n	8001e8e <PCA9685_SetPin+0x72>
    if (Value == 0) {
 8001e42:	88bb      	ldrh	r3, [r7, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d108      	bne.n	8001e5a <PCA9685_SetPin+0x3e>
      // Special value for signal fully on.
      return PCA9685_SetPwm(Channel, 4096, 0);
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff ffa9 	bl	8001da8 <PCA9685_SetPwm>
 8001e56:	4603      	mov	r3, r0
 8001e58:	e03a      	b.n	8001ed0 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 4095) {
 8001e5a:	88bb      	ldrh	r3, [r7, #4]
 8001e5c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d108      	bne.n	8001e76 <PCA9685_SetPin+0x5a>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff ff9b 	bl	8001da8 <PCA9685_SetPwm>
 8001e72:	4603      	mov	r3, r0
 8001e74:	e02c      	b.n	8001ed0 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, 4095-Value);
 8001e76:	88bb      	ldrh	r3, [r7, #4]
 8001e78:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001e7c:	330f      	adds	r3, #15
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	79fb      	ldrb	r3, [r7, #7]
 8001e82:	2100      	movs	r1, #0
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff8f 	bl	8001da8 <PCA9685_SetPwm>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	e020      	b.n	8001ed0 <PCA9685_SetPin+0xb4>
    }
  }
  else {
    if (Value == 4095) {
 8001e8e:	88bb      	ldrh	r3, [r7, #4]
 8001e90:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d108      	bne.n	8001eaa <PCA9685_SetPin+0x8e>
      // Special value for signal fully on.
    	return PCA9685_SetPwm(Channel, 4096, 0);
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff81 	bl	8001da8 <PCA9685_SetPwm>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	e012      	b.n	8001ed0 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 0) {
 8001eaa:	88bb      	ldrh	r3, [r7, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d108      	bne.n	8001ec2 <PCA9685_SetPin+0xa6>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff ff75 	bl	8001da8 <PCA9685_SetPwm>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	e006      	b.n	8001ed0 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, Value);
 8001ec2:	88ba      	ldrh	r2, [r7, #4]
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff ff6d 	bl	8001da8 <PCA9685_SetPwm>
 8001ece:	4603      	mov	r3, r0
    }
  }
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <PCA9685_SetServoAngle>:
  * @note   This function is applicable only in servo mode (PCA9685_SERVO_MODE).
  *         The angle is converted to a corresponding PWM value and then set for the channel.
  * @retval PCA9685_STATUS: PCA9685_OK if the servo angle setting is successful, PCA9685_ERROR otherwise.
  */
PCA9685_STATUS PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	ed87 0a00 	vstr	s0, [r7]
 8001ee4:	71fb      	strb	r3, [r7, #7]
	float Value;
    // Ensure the Angle parameter is within the valid range
	if(Angle < MIN_ANGLE) Angle = MIN_ANGLE;
 8001ee6:	edd7 7a00 	vldr	s15, [r7]
 8001eea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef2:	d502      	bpl.n	8001efa <PCA9685_SetServoAngle+0x22>
 8001ef4:	f04f 0300 	mov.w	r3, #0
 8001ef8:	603b      	str	r3, [r7, #0]
	if(Angle > MAX_ANGLE) Angle = MAX_ANGLE;
 8001efa:	edd7 7a00 	vldr	s15, [r7]
 8001efe:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001f80 <PCA9685_SetServoAngle+0xa8>
 8001f02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f0a:	dd01      	ble.n	8001f10 <PCA9685_SetServoAngle+0x38>
 8001f0c:	4b1d      	ldr	r3, [pc, #116]	; (8001f84 <PCA9685_SetServoAngle+0xac>)
 8001f0e:	603b      	str	r3, [r7, #0]

    // Convert the angle to the corresponding PWM value
	Value = (Angle - MIN_ANGLE) * ((float)SERVO_MAX - (float)SERVO_MIN) / (MAX_ANGLE - MIN_ANGLE) + (float)SERVO_MIN;
 8001f10:	6838      	ldr	r0, [r7, #0]
 8001f12:	f7fe fac5 	bl	80004a0 <__aeabi_f2d>
 8001f16:	a318      	add	r3, pc, #96	; (adr r3, 8001f78 <PCA9685_SetServoAngle+0xa0>)
 8001f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1c:	f7fe fb18 	bl	8000550 <__aeabi_dmul>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4610      	mov	r0, r2
 8001f26:	4619      	mov	r1, r3
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	4b16      	ldr	r3, [pc, #88]	; (8001f88 <PCA9685_SetServoAngle+0xb0>)
 8001f2e:	f7fe fc39 	bl	80007a4 <__aeabi_ddiv>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4610      	mov	r0, r2
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f04f 0200 	mov.w	r2, #0
 8001f3e:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <PCA9685_SetServoAngle+0xb4>)
 8001f40:	f7fe f950 	bl	80001e4 <__adddf3>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	4610      	mov	r0, r2
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	f7fe fdba 	bl	8000ac4 <__aeabi_d2f>
 8001f50:	4603      	mov	r3, r0
 8001f52:	60fb      	str	r3, [r7, #12]
    // Set the PWM value for the specified channel
	return PCA9685_SetPin(Channel, (uint16_t)Value, 0);
 8001f54:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f5c:	ee17 3a90 	vmov	r3, s15
 8001f60:	b299      	uxth	r1, r3
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	2200      	movs	r2, #0
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff ff58 	bl	8001e1c <PCA9685_SetPin>
 8001f6c:	4603      	mov	r3, r0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	00000000 	.word	0x00000000
 8001f7c:	40786000 	.word	0x40786000
 8001f80:	43340000 	.word	0x43340000
 8001f84:	43340000 	.word	0x43340000
 8001f88:	40668000 	.word	0x40668000
 8001f8c:	405b8000 	.word	0x405b8000

08001f90 <PCA9685_Init>:
  *           3. Sets the PWM frequency based on the mode (servo mode or default mode).
  *           4. Enables auto-increment mode for consecutive register accesses.
  * @retval PCA9685_STATUS: PCA9685_OK if the initialization is successful, PCA9685_ERROR otherwise.
  */
PCA9685_STATUS PCA9685_Init(I2C_HandleTypeDef *hi2c)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
    // Set the I2C handle for communication with the PCA9685 device
	pca9685_i2c = hi2c;
 8001f98:	4a07      	ldr	r2, [pc, #28]	; (8001fb8 <PCA9685_Init+0x28>)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6013      	str	r3, [r2, #0]

    // Perform a software reset on the PCA9685 device
	PCA9685_SoftwareReset();
 8001f9e:	f7ff fe3b 	bl	8001c18 <PCA9685_SoftwareReset>
    // Set the PWM frequency based on the mode (servo mode or default mode)
#ifdef PCA9685_SERVO_MODE
	PCA9685_SetPwmFrequency(48);
 8001fa2:	2030      	movs	r0, #48	; 0x30
 8001fa4:	f7ff fe84 	bl	8001cb0 <PCA9685_SetPwmFrequency>
#else
	PCA9685_SetPwmFrequency(1000);
#endif
    // Enable auto-increment mode for consecutive register accesses
	PCA9685_AutoIncrement(1);
 8001fa8:	2001      	movs	r0, #1
 8001faa:	f7ff fe6f 	bl	8001c8c <PCA9685_AutoIncrement>

	return PCA9685_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	20000330 	.word	0x20000330

08001fbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	607b      	str	r3, [r7, #4]
 8001fc6:	4b10      	ldr	r3, [pc, #64]	; (8002008 <HAL_MspInit+0x4c>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fca:	4a0f      	ldr	r2, [pc, #60]	; (8002008 <HAL_MspInit+0x4c>)
 8001fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fd2:	4b0d      	ldr	r3, [pc, #52]	; (8002008 <HAL_MspInit+0x4c>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fda:	607b      	str	r3, [r7, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	603b      	str	r3, [r7, #0]
 8001fe2:	4b09      	ldr	r3, [pc, #36]	; (8002008 <HAL_MspInit+0x4c>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	4a08      	ldr	r2, [pc, #32]	; (8002008 <HAL_MspInit+0x4c>)
 8001fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fec:	6413      	str	r3, [r2, #64]	; 0x40
 8001fee:	4b06      	ldr	r3, [pc, #24]	; (8002008 <HAL_MspInit+0x4c>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff6:	603b      	str	r3, [r7, #0]
 8001ff8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800

0800200c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08a      	sub	sp, #40	; 0x28
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a19      	ldr	r2, [pc, #100]	; (8002090 <HAL_I2C_MspInit+0x84>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d12c      	bne.n	8002088 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	4b18      	ldr	r3, [pc, #96]	; (8002094 <HAL_I2C_MspInit+0x88>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	4a17      	ldr	r2, [pc, #92]	; (8002094 <HAL_I2C_MspInit+0x88>)
 8002038:	f043 0302 	orr.w	r3, r3, #2
 800203c:	6313      	str	r3, [r2, #48]	; 0x30
 800203e:	4b15      	ldr	r3, [pc, #84]	; (8002094 <HAL_I2C_MspInit+0x88>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800204a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800204e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002050:	2312      	movs	r3, #18
 8002052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002058:	2303      	movs	r3, #3
 800205a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800205c:	2304      	movs	r3, #4
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	4619      	mov	r1, r3
 8002066:	480c      	ldr	r0, [pc, #48]	; (8002098 <HAL_I2C_MspInit+0x8c>)
 8002068:	f000 fcf4 	bl	8002a54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800206c:	2300      	movs	r3, #0
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	4b08      	ldr	r3, [pc, #32]	; (8002094 <HAL_I2C_MspInit+0x88>)
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	4a07      	ldr	r2, [pc, #28]	; (8002094 <HAL_I2C_MspInit+0x88>)
 8002076:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800207a:	6413      	str	r3, [r2, #64]	; 0x40
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <HAL_I2C_MspInit+0x88>)
 800207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002080:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002088:	bf00      	nop
 800208a:	3728      	adds	r7, #40	; 0x28
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40005400 	.word	0x40005400
 8002094:	40023800 	.word	0x40023800
 8002098:	40020400 	.word	0x40020400

0800209c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800209c:	b480      	push	{r7}
 800209e:	b087      	sub	sp, #28
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a1f      	ldr	r2, [pc, #124]	; (8002128 <HAL_TIM_PWM_MspInit+0x8c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d10e      	bne.n	80020cc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]
 80020b2:	4b1e      	ldr	r3, [pc, #120]	; (800212c <HAL_TIM_PWM_MspInit+0x90>)
 80020b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b6:	4a1d      	ldr	r2, [pc, #116]	; (800212c <HAL_TIM_PWM_MspInit+0x90>)
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	6453      	str	r3, [r2, #68]	; 0x44
 80020be:	4b1b      	ldr	r3, [pc, #108]	; (800212c <HAL_TIM_PWM_MspInit+0x90>)
 80020c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	617b      	str	r3, [r7, #20]
 80020c8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80020ca:	e026      	b.n	800211a <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM2)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020d4:	d10e      	bne.n	80020f4 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	613b      	str	r3, [r7, #16]
 80020da:	4b14      	ldr	r3, [pc, #80]	; (800212c <HAL_TIM_PWM_MspInit+0x90>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	4a13      	ldr	r2, [pc, #76]	; (800212c <HAL_TIM_PWM_MspInit+0x90>)
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	6413      	str	r3, [r2, #64]	; 0x40
 80020e6:	4b11      	ldr	r3, [pc, #68]	; (800212c <HAL_TIM_PWM_MspInit+0x90>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	693b      	ldr	r3, [r7, #16]
}
 80020f2:	e012      	b.n	800211a <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM9)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a0d      	ldr	r2, [pc, #52]	; (8002130 <HAL_TIM_PWM_MspInit+0x94>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d10d      	bne.n	800211a <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	4b0a      	ldr	r3, [pc, #40]	; (800212c <HAL_TIM_PWM_MspInit+0x90>)
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	4a09      	ldr	r2, [pc, #36]	; (800212c <HAL_TIM_PWM_MspInit+0x90>)
 8002108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800210c:	6453      	str	r3, [r2, #68]	; 0x44
 800210e:	4b07      	ldr	r3, [pc, #28]	; (800212c <HAL_TIM_PWM_MspInit+0x90>)
 8002110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
}
 800211a:	bf00      	nop
 800211c:	371c      	adds	r7, #28
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40010000 	.word	0x40010000
 800212c:	40023800 	.word	0x40023800
 8002130:	40014000 	.word	0x40014000

08002134 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08c      	sub	sp, #48	; 0x30
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800213c:	f107 031c 	add.w	r3, r7, #28
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	60da      	str	r2, [r3, #12]
 800214a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a32      	ldr	r2, [pc, #200]	; (800221c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d12c      	bne.n	80021b0 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	61bb      	str	r3, [r7, #24]
 800215a:	4b31      	ldr	r3, [pc, #196]	; (8002220 <HAL_TIM_Encoder_MspInit+0xec>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	4a30      	ldr	r2, [pc, #192]	; (8002220 <HAL_TIM_Encoder_MspInit+0xec>)
 8002160:	f043 0302 	orr.w	r3, r3, #2
 8002164:	6413      	str	r3, [r2, #64]	; 0x40
 8002166:	4b2e      	ldr	r3, [pc, #184]	; (8002220 <HAL_TIM_Encoder_MspInit+0xec>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	61bb      	str	r3, [r7, #24]
 8002170:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	4b2a      	ldr	r3, [pc, #168]	; (8002220 <HAL_TIM_Encoder_MspInit+0xec>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	4a29      	ldr	r2, [pc, #164]	; (8002220 <HAL_TIM_Encoder_MspInit+0xec>)
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	6313      	str	r3, [r2, #48]	; 0x30
 8002182:	4b27      	ldr	r3, [pc, #156]	; (8002220 <HAL_TIM_Encoder_MspInit+0xec>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_Encoder1B_Pin|TIM3_CH2_Encoder1A_Pin;
 800218e:	23c0      	movs	r3, #192	; 0xc0
 8002190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002192:	2302      	movs	r3, #2
 8002194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219a:	2300      	movs	r3, #0
 800219c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800219e:	2302      	movs	r3, #2
 80021a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a2:	f107 031c 	add.w	r3, r7, #28
 80021a6:	4619      	mov	r1, r3
 80021a8:	481e      	ldr	r0, [pc, #120]	; (8002224 <HAL_TIM_Encoder_MspInit+0xf0>)
 80021aa:	f000 fc53 	bl	8002a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80021ae:	e030      	b.n	8002212 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a1c      	ldr	r2, [pc, #112]	; (8002228 <HAL_TIM_Encoder_MspInit+0xf4>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d12b      	bne.n	8002212 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	4b18      	ldr	r3, [pc, #96]	; (8002220 <HAL_TIM_Encoder_MspInit+0xec>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	4a17      	ldr	r2, [pc, #92]	; (8002220 <HAL_TIM_Encoder_MspInit+0xec>)
 80021c4:	f043 0304 	orr.w	r3, r3, #4
 80021c8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ca:	4b15      	ldr	r3, [pc, #84]	; (8002220 <HAL_TIM_Encoder_MspInit+0xec>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	f003 0304 	and.w	r3, r3, #4
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	4b11      	ldr	r3, [pc, #68]	; (8002220 <HAL_TIM_Encoder_MspInit+0xec>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	4a10      	ldr	r2, [pc, #64]	; (8002220 <HAL_TIM_Encoder_MspInit+0xec>)
 80021e0:	f043 0302 	orr.w	r3, r3, #2
 80021e4:	6313      	str	r3, [r2, #48]	; 0x30
 80021e6:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <HAL_TIM_Encoder_MspInit+0xec>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_Encoder2A_Pin|TIM4_CH1_Encoder2B_Pin;
 80021f2:	23c0      	movs	r3, #192	; 0xc0
 80021f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f6:	2302      	movs	r3, #2
 80021f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fe:	2300      	movs	r3, #0
 8002200:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002202:	2302      	movs	r3, #2
 8002204:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002206:	f107 031c 	add.w	r3, r7, #28
 800220a:	4619      	mov	r1, r3
 800220c:	4807      	ldr	r0, [pc, #28]	; (800222c <HAL_TIM_Encoder_MspInit+0xf8>)
 800220e:	f000 fc21 	bl	8002a54 <HAL_GPIO_Init>
}
 8002212:	bf00      	nop
 8002214:	3730      	adds	r7, #48	; 0x30
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40000400 	.word	0x40000400
 8002220:	40023800 	.word	0x40023800
 8002224:	40020000 	.word	0x40020000
 8002228:	40000800 	.word	0x40000800
 800222c:	40020400 	.word	0x40020400

08002230 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002230:	b480      	push	{r7}
 8002232:	b087      	sub	sp, #28
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a1f      	ldr	r2, [pc, #124]	; (80022bc <HAL_TIM_Base_MspInit+0x8c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d10e      	bne.n	8002260 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]
 8002246:	4b1e      	ldr	r3, [pc, #120]	; (80022c0 <HAL_TIM_Base_MspInit+0x90>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	4a1d      	ldr	r2, [pc, #116]	; (80022c0 <HAL_TIM_Base_MspInit+0x90>)
 800224c:	f043 0308 	orr.w	r3, r3, #8
 8002250:	6413      	str	r3, [r2, #64]	; 0x40
 8002252:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <HAL_TIM_Base_MspInit+0x90>)
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	617b      	str	r3, [r7, #20]
 800225c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800225e:	e026      	b.n	80022ae <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM10)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a17      	ldr	r2, [pc, #92]	; (80022c4 <HAL_TIM_Base_MspInit+0x94>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d10e      	bne.n	8002288 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <HAL_TIM_Base_MspInit+0x90>)
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	4a13      	ldr	r2, [pc, #76]	; (80022c0 <HAL_TIM_Base_MspInit+0x90>)
 8002274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002278:	6453      	str	r3, [r2, #68]	; 0x44
 800227a:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <HAL_TIM_Base_MspInit+0x90>)
 800227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	693b      	ldr	r3, [r7, #16]
}
 8002286:	e012      	b.n	80022ae <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM11)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a0e      	ldr	r2, [pc, #56]	; (80022c8 <HAL_TIM_Base_MspInit+0x98>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d10d      	bne.n	80022ae <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	4b0a      	ldr	r3, [pc, #40]	; (80022c0 <HAL_TIM_Base_MspInit+0x90>)
 8002298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229a:	4a09      	ldr	r2, [pc, #36]	; (80022c0 <HAL_TIM_Base_MspInit+0x90>)
 800229c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022a0:	6453      	str	r3, [r2, #68]	; 0x44
 80022a2:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <HAL_TIM_Base_MspInit+0x90>)
 80022a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]
}
 80022ae:	bf00      	nop
 80022b0:	371c      	adds	r7, #28
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40000c00 	.word	0x40000c00
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40014400 	.word	0x40014400
 80022c8:	40014800 	.word	0x40014800

080022cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08c      	sub	sp, #48	; 0x30
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d4:	f107 031c 	add.w	r3, r7, #28
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	60da      	str	r2, [r3, #12]
 80022e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a57      	ldr	r2, [pc, #348]	; (8002448 <HAL_TIM_MspPostInit+0x17c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d11f      	bne.n	800232e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	61bb      	str	r3, [r7, #24]
 80022f2:	4b56      	ldr	r3, [pc, #344]	; (800244c <HAL_TIM_MspPostInit+0x180>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	4a55      	ldr	r2, [pc, #340]	; (800244c <HAL_TIM_MspPostInit+0x180>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	6313      	str	r3, [r2, #48]	; 0x30
 80022fe:	4b53      	ldr	r3, [pc, #332]	; (800244c <HAL_TIM_MspPostInit+0x180>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	61bb      	str	r3, [r7, #24]
 8002308:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_ELPWMR_Pin|TIM1_CH4ELPWML_Pin;
 800230a:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800230e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002310:	2302      	movs	r3, #2
 8002312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002318:	2300      	movs	r3, #0
 800231a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800231c:	2301      	movs	r3, #1
 800231e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002320:	f107 031c 	add.w	r3, r7, #28
 8002324:	4619      	mov	r1, r3
 8002326:	484a      	ldr	r0, [pc, #296]	; (8002450 <HAL_TIM_MspPostInit+0x184>)
 8002328:	f000 fb94 	bl	8002a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800232c:	e088      	b.n	8002440 <HAL_TIM_MspPostInit+0x174>
  else if(htim->Instance==TIM2)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002336:	d13c      	bne.n	80023b2 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	4b43      	ldr	r3, [pc, #268]	; (800244c <HAL_TIM_MspPostInit+0x180>)
 800233e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002340:	4a42      	ldr	r2, [pc, #264]	; (800244c <HAL_TIM_MspPostInit+0x180>)
 8002342:	f043 0301 	orr.w	r3, r3, #1
 8002346:	6313      	str	r3, [r2, #48]	; 0x30
 8002348:	4b40      	ldr	r3, [pc, #256]	; (800244c <HAL_TIM_MspPostInit+0x180>)
 800234a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	617b      	str	r3, [r7, #20]
 8002352:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002354:	2300      	movs	r3, #0
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	4b3c      	ldr	r3, [pc, #240]	; (800244c <HAL_TIM_MspPostInit+0x180>)
 800235a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235c:	4a3b      	ldr	r2, [pc, #236]	; (800244c <HAL_TIM_MspPostInit+0x180>)
 800235e:	f043 0302 	orr.w	r3, r3, #2
 8002362:	6313      	str	r3, [r2, #48]	; 0x30
 8002364:	4b39      	ldr	r3, [pc, #228]	; (800244c <HAL_TIM_MspPostInit+0x180>)
 8002366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM1_CH2ERPWML_Pin;
 8002370:	2320      	movs	r3, #32
 8002372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002374:	2302      	movs	r3, #2
 8002376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237c:	2300      	movs	r3, #0
 800237e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002380:	2301      	movs	r3, #1
 8002382:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM1_CH2ERPWML_GPIO_Port, &GPIO_InitStruct);
 8002384:	f107 031c 	add.w	r3, r7, #28
 8002388:	4619      	mov	r1, r3
 800238a:	4831      	ldr	r0, [pc, #196]	; (8002450 <HAL_TIM_MspPostInit+0x184>)
 800238c:	f000 fb62 	bl	8002a54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM2_CH2_ERPWMR_Pin;
 8002390:	2308      	movs	r3, #8
 8002392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002394:	2302      	movs	r3, #2
 8002396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239c:	2300      	movs	r3, #0
 800239e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023a0:	2301      	movs	r3, #1
 80023a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH2_ERPWMR_GPIO_Port, &GPIO_InitStruct);
 80023a4:	f107 031c 	add.w	r3, r7, #28
 80023a8:	4619      	mov	r1, r3
 80023aa:	482a      	ldr	r0, [pc, #168]	; (8002454 <HAL_TIM_MspPostInit+0x188>)
 80023ac:	f000 fb52 	bl	8002a54 <HAL_GPIO_Init>
}
 80023b0:	e046      	b.n	8002440 <HAL_TIM_MspPostInit+0x174>
  else if(htim->Instance==TIM5)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a28      	ldr	r2, [pc, #160]	; (8002458 <HAL_TIM_MspPostInit+0x18c>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d11e      	bne.n	80023fa <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023bc:	2300      	movs	r3, #0
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	4b22      	ldr	r3, [pc, #136]	; (800244c <HAL_TIM_MspPostInit+0x180>)
 80023c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c4:	4a21      	ldr	r2, [pc, #132]	; (800244c <HAL_TIM_MspPostInit+0x180>)
 80023c6:	f043 0301 	orr.w	r3, r3, #1
 80023ca:	6313      	str	r3, [r2, #48]	; 0x30
 80023cc:	4b1f      	ldr	r3, [pc, #124]	; (800244c <HAL_TIM_MspPostInit+0x180>)
 80023ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80023d8:	2307      	movs	r3, #7
 80023da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023dc:	2302      	movs	r3, #2
 80023de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e4:	2300      	movs	r3, #0
 80023e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80023e8:	2302      	movs	r3, #2
 80023ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ec:	f107 031c 	add.w	r3, r7, #28
 80023f0:	4619      	mov	r1, r3
 80023f2:	4817      	ldr	r0, [pc, #92]	; (8002450 <HAL_TIM_MspPostInit+0x184>)
 80023f4:	f000 fb2e 	bl	8002a54 <HAL_GPIO_Init>
}
 80023f8:	e022      	b.n	8002440 <HAL_TIM_MspPostInit+0x174>
  else if(htim->Instance==TIM9)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a17      	ldr	r2, [pc, #92]	; (800245c <HAL_TIM_MspPostInit+0x190>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d11d      	bne.n	8002440 <HAL_TIM_MspPostInit+0x174>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002404:	2300      	movs	r3, #0
 8002406:	60bb      	str	r3, [r7, #8]
 8002408:	4b10      	ldr	r3, [pc, #64]	; (800244c <HAL_TIM_MspPostInit+0x180>)
 800240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240c:	4a0f      	ldr	r2, [pc, #60]	; (800244c <HAL_TIM_MspPostInit+0x180>)
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	6313      	str	r3, [r2, #48]	; 0x30
 8002414:	4b0d      	ldr	r3, [pc, #52]	; (800244c <HAL_TIM_MspPostInit+0x180>)
 8002416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002420:	2308      	movs	r3, #8
 8002422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002424:	2302      	movs	r3, #2
 8002426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242c:	2300      	movs	r3, #0
 800242e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002430:	2303      	movs	r3, #3
 8002432:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002434:	f107 031c 	add.w	r3, r7, #28
 8002438:	4619      	mov	r1, r3
 800243a:	4805      	ldr	r0, [pc, #20]	; (8002450 <HAL_TIM_MspPostInit+0x184>)
 800243c:	f000 fb0a 	bl	8002a54 <HAL_GPIO_Init>
}
 8002440:	bf00      	nop
 8002442:	3730      	adds	r7, #48	; 0x30
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40010000 	.word	0x40010000
 800244c:	40023800 	.word	0x40023800
 8002450:	40020000 	.word	0x40020000
 8002454:	40020400 	.word	0x40020400
 8002458:	40000c00 	.word	0x40000c00
 800245c:	40014000 	.word	0x40014000

08002460 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b08a      	sub	sp, #40	; 0x28
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002468:	f107 0314 	add.w	r3, r7, #20
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	60da      	str	r2, [r3, #12]
 8002476:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a1d      	ldr	r2, [pc, #116]	; (80024f4 <HAL_UART_MspInit+0x94>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d134      	bne.n	80024ec <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	4b1c      	ldr	r3, [pc, #112]	; (80024f8 <HAL_UART_MspInit+0x98>)
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	4a1b      	ldr	r2, [pc, #108]	; (80024f8 <HAL_UART_MspInit+0x98>)
 800248c:	f043 0310 	orr.w	r3, r3, #16
 8002490:	6453      	str	r3, [r2, #68]	; 0x44
 8002492:	4b19      	ldr	r3, [pc, #100]	; (80024f8 <HAL_UART_MspInit+0x98>)
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	f003 0310 	and.w	r3, r3, #16
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <HAL_UART_MspInit+0x98>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	4a14      	ldr	r2, [pc, #80]	; (80024f8 <HAL_UART_MspInit+0x98>)
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	6313      	str	r3, [r2, #48]	; 0x30
 80024ae:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <HAL_UART_MspInit+0x98>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80024ba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80024be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c0:	2302      	movs	r3, #2
 80024c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c8:	2303      	movs	r3, #3
 80024ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024cc:	2307      	movs	r3, #7
 80024ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d0:	f107 0314 	add.w	r3, r7, #20
 80024d4:	4619      	mov	r1, r3
 80024d6:	4809      	ldr	r0, [pc, #36]	; (80024fc <HAL_UART_MspInit+0x9c>)
 80024d8:	f000 fabc 	bl	8002a54 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80024dc:	2200      	movs	r2, #0
 80024de:	2100      	movs	r1, #0
 80024e0:	2025      	movs	r0, #37	; 0x25
 80024e2:	f000 f9ee 	bl	80028c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024e6:	2025      	movs	r0, #37	; 0x25
 80024e8:	f000 fa07 	bl	80028fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80024ec:	bf00      	nop
 80024ee:	3728      	adds	r7, #40	; 0x28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40011000 	.word	0x40011000
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40020000 	.word	0x40020000

08002500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002504:	e7fe      	b.n	8002504 <NMI_Handler+0x4>

08002506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002506:	b480      	push	{r7}
 8002508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800250a:	e7fe      	b.n	800250a <HardFault_Handler+0x4>

0800250c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002510:	e7fe      	b.n	8002510 <MemManage_Handler+0x4>

08002512 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002512:	b480      	push	{r7}
 8002514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002516:	e7fe      	b.n	8002516 <BusFault_Handler+0x4>

08002518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800251c:	e7fe      	b.n	800251c <UsageFault_Handler+0x4>

0800251e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800251e:	b480      	push	{r7}
 8002520:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002522:	bf00      	nop
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800253a:	b480      	push	{r7}
 800253c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800254c:	f000 f89a 	bl	8002684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002550:	bf00      	nop
 8002552:	bd80      	pop	{r7, pc}

08002554 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002558:	4802      	ldr	r0, [pc, #8]	; (8002564 <USART1_IRQHandler+0x10>)
 800255a:	f003 fab9 	bl	8005ad0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	200002e0 	.word	0x200002e0

08002568 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800256c:	4b06      	ldr	r3, [pc, #24]	; (8002588 <SystemInit+0x20>)
 800256e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002572:	4a05      	ldr	r2, [pc, #20]	; (8002588 <SystemInit+0x20>)
 8002574:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002578:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800258c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025c4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002590:	f7ff ffea 	bl	8002568 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002594:	480c      	ldr	r0, [pc, #48]	; (80025c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002596:	490d      	ldr	r1, [pc, #52]	; (80025cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002598:	4a0d      	ldr	r2, [pc, #52]	; (80025d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800259a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800259c:	e002      	b.n	80025a4 <LoopCopyDataInit>

0800259e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800259e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025a2:	3304      	adds	r3, #4

080025a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025a8:	d3f9      	bcc.n	800259e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025aa:	4a0a      	ldr	r2, [pc, #40]	; (80025d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025ac:	4c0a      	ldr	r4, [pc, #40]	; (80025d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025b0:	e001      	b.n	80025b6 <LoopFillZerobss>

080025b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025b4:	3204      	adds	r2, #4

080025b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025b8:	d3fb      	bcc.n	80025b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025ba:	f004 f9e7 	bl	800698c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025be:	f7fe fe37 	bl	8001230 <main>
  bx  lr    
 80025c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025c4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80025c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025cc:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 80025d0:	08006b18 	.word	0x08006b18
  ldr r2, =_sbss
 80025d4:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 80025d8:	20000338 	.word	0x20000338

080025dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025dc:	e7fe      	b.n	80025dc <ADC_IRQHandler>
	...

080025e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025e4:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <HAL_Init+0x40>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a0d      	ldr	r2, [pc, #52]	; (8002620 <HAL_Init+0x40>)
 80025ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025f0:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <HAL_Init+0x40>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a0a      	ldr	r2, [pc, #40]	; (8002620 <HAL_Init+0x40>)
 80025f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025fc:	4b08      	ldr	r3, [pc, #32]	; (8002620 <HAL_Init+0x40>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a07      	ldr	r2, [pc, #28]	; (8002620 <HAL_Init+0x40>)
 8002602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002606:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002608:	2003      	movs	r0, #3
 800260a:	f000 f94f 	bl	80028ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800260e:	200f      	movs	r0, #15
 8002610:	f000 f808 	bl	8002624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002614:	f7ff fcd2 	bl	8001fbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40023c00 	.word	0x40023c00

08002624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800262c:	4b12      	ldr	r3, [pc, #72]	; (8002678 <HAL_InitTick+0x54>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	4b12      	ldr	r3, [pc, #72]	; (800267c <HAL_InitTick+0x58>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	4619      	mov	r1, r3
 8002636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800263a:	fbb3 f3f1 	udiv	r3, r3, r1
 800263e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002642:	4618      	mov	r0, r3
 8002644:	f000 f967 	bl	8002916 <HAL_SYSTICK_Config>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e00e      	b.n	8002670 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b0f      	cmp	r3, #15
 8002656:	d80a      	bhi.n	800266e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002658:	2200      	movs	r2, #0
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	f04f 30ff 	mov.w	r0, #4294967295
 8002660:	f000 f92f 	bl	80028c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002664:	4a06      	ldr	r2, [pc, #24]	; (8002680 <HAL_InitTick+0x5c>)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800266a:	2300      	movs	r3, #0
 800266c:	e000      	b.n	8002670 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
}
 8002670:	4618      	mov	r0, r3
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	20000024 	.word	0x20000024
 800267c:	2000002c 	.word	0x2000002c
 8002680:	20000028 	.word	0x20000028

08002684 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002688:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <HAL_IncTick+0x20>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	461a      	mov	r2, r3
 800268e:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <HAL_IncTick+0x24>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4413      	add	r3, r2
 8002694:	4a04      	ldr	r2, [pc, #16]	; (80026a8 <HAL_IncTick+0x24>)
 8002696:	6013      	str	r3, [r2, #0]
}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	2000002c 	.word	0x2000002c
 80026a8:	20000334 	.word	0x20000334

080026ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return uwTick;
 80026b0:	4b03      	ldr	r3, [pc, #12]	; (80026c0 <HAL_GetTick+0x14>)
 80026b2:	681b      	ldr	r3, [r3, #0]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	20000334 	.word	0x20000334

080026c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026cc:	f7ff ffee 	bl	80026ac <HAL_GetTick>
 80026d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026dc:	d005      	beq.n	80026ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026de:	4b0a      	ldr	r3, [pc, #40]	; (8002708 <HAL_Delay+0x44>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	461a      	mov	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4413      	add	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026ea:	bf00      	nop
 80026ec:	f7ff ffde 	bl	80026ac <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d8f7      	bhi.n	80026ec <HAL_Delay+0x28>
  {
  }
}
 80026fc:	bf00      	nop
 80026fe:	bf00      	nop
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	2000002c 	.word	0x2000002c

0800270c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800271c:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <__NVIC_SetPriorityGrouping+0x44>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002728:	4013      	ands	r3, r2
 800272a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002734:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800273c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800273e:	4a04      	ldr	r2, [pc, #16]	; (8002750 <__NVIC_SetPriorityGrouping+0x44>)
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	60d3      	str	r3, [r2, #12]
}
 8002744:	bf00      	nop
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002758:	4b04      	ldr	r3, [pc, #16]	; (800276c <__NVIC_GetPriorityGrouping+0x18>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	0a1b      	lsrs	r3, r3, #8
 800275e:	f003 0307 	and.w	r3, r3, #7
}
 8002762:	4618      	mov	r0, r3
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	e000ed00 	.word	0xe000ed00

08002770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800277a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277e:	2b00      	cmp	r3, #0
 8002780:	db0b      	blt.n	800279a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002782:	79fb      	ldrb	r3, [r7, #7]
 8002784:	f003 021f 	and.w	r2, r3, #31
 8002788:	4907      	ldr	r1, [pc, #28]	; (80027a8 <__NVIC_EnableIRQ+0x38>)
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	095b      	lsrs	r3, r3, #5
 8002790:	2001      	movs	r0, #1
 8002792:	fa00 f202 	lsl.w	r2, r0, r2
 8002796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	e000e100 	.word	0xe000e100

080027ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	6039      	str	r1, [r7, #0]
 80027b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	db0a      	blt.n	80027d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	490c      	ldr	r1, [pc, #48]	; (80027f8 <__NVIC_SetPriority+0x4c>)
 80027c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ca:	0112      	lsls	r2, r2, #4
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	440b      	add	r3, r1
 80027d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027d4:	e00a      	b.n	80027ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	4908      	ldr	r1, [pc, #32]	; (80027fc <__NVIC_SetPriority+0x50>)
 80027dc:	79fb      	ldrb	r3, [r7, #7]
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	3b04      	subs	r3, #4
 80027e4:	0112      	lsls	r2, r2, #4
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	440b      	add	r3, r1
 80027ea:	761a      	strb	r2, [r3, #24]
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	e000e100 	.word	0xe000e100
 80027fc:	e000ed00 	.word	0xe000ed00

08002800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002800:	b480      	push	{r7}
 8002802:	b089      	sub	sp, #36	; 0x24
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f1c3 0307 	rsb	r3, r3, #7
 800281a:	2b04      	cmp	r3, #4
 800281c:	bf28      	it	cs
 800281e:	2304      	movcs	r3, #4
 8002820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3304      	adds	r3, #4
 8002826:	2b06      	cmp	r3, #6
 8002828:	d902      	bls.n	8002830 <NVIC_EncodePriority+0x30>
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3b03      	subs	r3, #3
 800282e:	e000      	b.n	8002832 <NVIC_EncodePriority+0x32>
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002834:	f04f 32ff 	mov.w	r2, #4294967295
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	43da      	mvns	r2, r3
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	401a      	ands	r2, r3
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002848:	f04f 31ff 	mov.w	r1, #4294967295
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	fa01 f303 	lsl.w	r3, r1, r3
 8002852:	43d9      	mvns	r1, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002858:	4313      	orrs	r3, r2
         );
}
 800285a:	4618      	mov	r0, r3
 800285c:	3724      	adds	r7, #36	; 0x24
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
	...

08002868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3b01      	subs	r3, #1
 8002874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002878:	d301      	bcc.n	800287e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800287a:	2301      	movs	r3, #1
 800287c:	e00f      	b.n	800289e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800287e:	4a0a      	ldr	r2, [pc, #40]	; (80028a8 <SysTick_Config+0x40>)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3b01      	subs	r3, #1
 8002884:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002886:	210f      	movs	r1, #15
 8002888:	f04f 30ff 	mov.w	r0, #4294967295
 800288c:	f7ff ff8e 	bl	80027ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002890:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <SysTick_Config+0x40>)
 8002892:	2200      	movs	r2, #0
 8002894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002896:	4b04      	ldr	r3, [pc, #16]	; (80028a8 <SysTick_Config+0x40>)
 8002898:	2207      	movs	r2, #7
 800289a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	e000e010 	.word	0xe000e010

080028ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7ff ff29 	bl	800270c <__NVIC_SetPriorityGrouping>
}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b086      	sub	sp, #24
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	4603      	mov	r3, r0
 80028ca:	60b9      	str	r1, [r7, #8]
 80028cc:	607a      	str	r2, [r7, #4]
 80028ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028d4:	f7ff ff3e 	bl	8002754 <__NVIC_GetPriorityGrouping>
 80028d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	68b9      	ldr	r1, [r7, #8]
 80028de:	6978      	ldr	r0, [r7, #20]
 80028e0:	f7ff ff8e 	bl	8002800 <NVIC_EncodePriority>
 80028e4:	4602      	mov	r2, r0
 80028e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ea:	4611      	mov	r1, r2
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff ff5d 	bl	80027ac <__NVIC_SetPriority>
}
 80028f2:	bf00      	nop
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	4603      	mov	r3, r0
 8002902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff ff31 	bl	8002770 <__NVIC_EnableIRQ>
}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7ff ffa2 	bl	8002868 <SysTick_Config>
 8002924:	4603      	mov	r3, r0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b084      	sub	sp, #16
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800293c:	f7ff feb6 	bl	80026ac <HAL_GetTick>
 8002940:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d008      	beq.n	8002960 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2280      	movs	r2, #128	; 0x80
 8002952:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e052      	b.n	8002a06 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0216 	bic.w	r2, r2, #22
 800296e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	695a      	ldr	r2, [r3, #20]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800297e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	2b00      	cmp	r3, #0
 8002986:	d103      	bne.n	8002990 <HAL_DMA_Abort+0x62>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800298c:	2b00      	cmp	r3, #0
 800298e:	d007      	beq.n	80029a0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0208 	bic.w	r2, r2, #8
 800299e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 0201 	bic.w	r2, r2, #1
 80029ae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029b0:	e013      	b.n	80029da <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029b2:	f7ff fe7b 	bl	80026ac <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b05      	cmp	r3, #5
 80029be:	d90c      	bls.n	80029da <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2220      	movs	r2, #32
 80029c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2203      	movs	r2, #3
 80029ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e015      	b.n	8002a06 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1e4      	bne.n	80029b2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ec:	223f      	movs	r2, #63	; 0x3f
 80029ee:	409a      	lsls	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d004      	beq.n	8002a2c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2280      	movs	r2, #128	; 0x80
 8002a26:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e00c      	b.n	8002a46 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2205      	movs	r2, #5
 8002a30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0201 	bic.w	r2, r2, #1
 8002a42:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
	...

08002a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b089      	sub	sp, #36	; 0x24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
 8002a6e:	e159      	b.n	8002d24 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a70:	2201      	movs	r2, #1
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	4013      	ands	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	f040 8148 	bne.w	8002d1e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d005      	beq.n	8002aa6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d130      	bne.n	8002b08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	2203      	movs	r2, #3
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4013      	ands	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	68da      	ldr	r2, [r3, #12]
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002adc:	2201      	movs	r2, #1
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	091b      	lsrs	r3, r3, #4
 8002af2:	f003 0201 	and.w	r2, r3, #1
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f003 0303 	and.w	r3, r3, #3
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d017      	beq.n	8002b44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	2203      	movs	r2, #3
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	43db      	mvns	r3, r3
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 0303 	and.w	r3, r3, #3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d123      	bne.n	8002b98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	08da      	lsrs	r2, r3, #3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3208      	adds	r2, #8
 8002b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	220f      	movs	r2, #15
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4013      	ands	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	691a      	ldr	r2, [r3, #16]
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f003 0307 	and.w	r3, r3, #7
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	08da      	lsrs	r2, r3, #3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3208      	adds	r2, #8
 8002b92:	69b9      	ldr	r1, [r7, #24]
 8002b94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	2203      	movs	r2, #3
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f003 0203 	and.w	r2, r3, #3
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 80a2 	beq.w	8002d1e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	4b57      	ldr	r3, [pc, #348]	; (8002d3c <HAL_GPIO_Init+0x2e8>)
 8002be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be2:	4a56      	ldr	r2, [pc, #344]	; (8002d3c <HAL_GPIO_Init+0x2e8>)
 8002be4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002be8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bea:	4b54      	ldr	r3, [pc, #336]	; (8002d3c <HAL_GPIO_Init+0x2e8>)
 8002bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bf6:	4a52      	ldr	r2, [pc, #328]	; (8002d40 <HAL_GPIO_Init+0x2ec>)
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	089b      	lsrs	r3, r3, #2
 8002bfc:	3302      	adds	r3, #2
 8002bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	220f      	movs	r2, #15
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	43db      	mvns	r3, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4013      	ands	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a49      	ldr	r2, [pc, #292]	; (8002d44 <HAL_GPIO_Init+0x2f0>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d019      	beq.n	8002c56 <HAL_GPIO_Init+0x202>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a48      	ldr	r2, [pc, #288]	; (8002d48 <HAL_GPIO_Init+0x2f4>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d013      	beq.n	8002c52 <HAL_GPIO_Init+0x1fe>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a47      	ldr	r2, [pc, #284]	; (8002d4c <HAL_GPIO_Init+0x2f8>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d00d      	beq.n	8002c4e <HAL_GPIO_Init+0x1fa>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a46      	ldr	r2, [pc, #280]	; (8002d50 <HAL_GPIO_Init+0x2fc>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d007      	beq.n	8002c4a <HAL_GPIO_Init+0x1f6>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a45      	ldr	r2, [pc, #276]	; (8002d54 <HAL_GPIO_Init+0x300>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d101      	bne.n	8002c46 <HAL_GPIO_Init+0x1f2>
 8002c42:	2304      	movs	r3, #4
 8002c44:	e008      	b.n	8002c58 <HAL_GPIO_Init+0x204>
 8002c46:	2307      	movs	r3, #7
 8002c48:	e006      	b.n	8002c58 <HAL_GPIO_Init+0x204>
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e004      	b.n	8002c58 <HAL_GPIO_Init+0x204>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e002      	b.n	8002c58 <HAL_GPIO_Init+0x204>
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <HAL_GPIO_Init+0x204>
 8002c56:	2300      	movs	r3, #0
 8002c58:	69fa      	ldr	r2, [r7, #28]
 8002c5a:	f002 0203 	and.w	r2, r2, #3
 8002c5e:	0092      	lsls	r2, r2, #2
 8002c60:	4093      	lsls	r3, r2
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c68:	4935      	ldr	r1, [pc, #212]	; (8002d40 <HAL_GPIO_Init+0x2ec>)
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	089b      	lsrs	r3, r3, #2
 8002c6e:	3302      	adds	r3, #2
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c76:	4b38      	ldr	r3, [pc, #224]	; (8002d58 <HAL_GPIO_Init+0x304>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4013      	ands	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c9a:	4a2f      	ldr	r2, [pc, #188]	; (8002d58 <HAL_GPIO_Init+0x304>)
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ca0:	4b2d      	ldr	r3, [pc, #180]	; (8002d58 <HAL_GPIO_Init+0x304>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4013      	ands	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cc4:	4a24      	ldr	r2, [pc, #144]	; (8002d58 <HAL_GPIO_Init+0x304>)
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cca:	4b23      	ldr	r3, [pc, #140]	; (8002d58 <HAL_GPIO_Init+0x304>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cee:	4a1a      	ldr	r2, [pc, #104]	; (8002d58 <HAL_GPIO_Init+0x304>)
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cf4:	4b18      	ldr	r3, [pc, #96]	; (8002d58 <HAL_GPIO_Init+0x304>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4013      	ands	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d18:	4a0f      	ldr	r2, [pc, #60]	; (8002d58 <HAL_GPIO_Init+0x304>)
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	3301      	adds	r3, #1
 8002d22:	61fb      	str	r3, [r7, #28]
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	2b0f      	cmp	r3, #15
 8002d28:	f67f aea2 	bls.w	8002a70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d2c:	bf00      	nop
 8002d2e:	bf00      	nop
 8002d30:	3724      	adds	r7, #36	; 0x24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	40013800 	.word	0x40013800
 8002d44:	40020000 	.word	0x40020000
 8002d48:	40020400 	.word	0x40020400
 8002d4c:	40020800 	.word	0x40020800
 8002d50:	40020c00 	.word	0x40020c00
 8002d54:	40021000 	.word	0x40021000
 8002d58:	40013c00 	.word	0x40013c00

08002d5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	807b      	strh	r3, [r7, #2]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d6c:	787b      	ldrb	r3, [r7, #1]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d72:	887a      	ldrh	r2, [r7, #2]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d78:	e003      	b.n	8002d82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d7a:	887b      	ldrh	r3, [r7, #2]
 8002d7c:	041a      	lsls	r2, r3, #16
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	619a      	str	r2, [r3, #24]
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
	...

08002d90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e12b      	b.n	8002ffa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d106      	bne.n	8002dbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7ff f928 	bl	800200c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2224      	movs	r2, #36	; 0x24
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0201 	bic.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002de2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002df2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002df4:	f001 fda0 	bl	8004938 <HAL_RCC_GetPCLK1Freq>
 8002df8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	4a81      	ldr	r2, [pc, #516]	; (8003004 <HAL_I2C_Init+0x274>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d807      	bhi.n	8002e14 <HAL_I2C_Init+0x84>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4a80      	ldr	r2, [pc, #512]	; (8003008 <HAL_I2C_Init+0x278>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	bf94      	ite	ls
 8002e0c:	2301      	movls	r3, #1
 8002e0e:	2300      	movhi	r3, #0
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	e006      	b.n	8002e22 <HAL_I2C_Init+0x92>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4a7d      	ldr	r2, [pc, #500]	; (800300c <HAL_I2C_Init+0x27c>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	bf94      	ite	ls
 8002e1c:	2301      	movls	r3, #1
 8002e1e:	2300      	movhi	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e0e7      	b.n	8002ffa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	4a78      	ldr	r2, [pc, #480]	; (8003010 <HAL_I2C_Init+0x280>)
 8002e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e32:	0c9b      	lsrs	r3, r3, #18
 8002e34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	4a6a      	ldr	r2, [pc, #424]	; (8003004 <HAL_I2C_Init+0x274>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d802      	bhi.n	8002e64 <HAL_I2C_Init+0xd4>
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	3301      	adds	r3, #1
 8002e62:	e009      	b.n	8002e78 <HAL_I2C_Init+0xe8>
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e6a:	fb02 f303 	mul.w	r3, r2, r3
 8002e6e:	4a69      	ldr	r2, [pc, #420]	; (8003014 <HAL_I2C_Init+0x284>)
 8002e70:	fba2 2303 	umull	r2, r3, r2, r3
 8002e74:	099b      	lsrs	r3, r3, #6
 8002e76:	3301      	adds	r3, #1
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	495c      	ldr	r1, [pc, #368]	; (8003004 <HAL_I2C_Init+0x274>)
 8002e94:	428b      	cmp	r3, r1
 8002e96:	d819      	bhi.n	8002ecc <HAL_I2C_Init+0x13c>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	1e59      	subs	r1, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ea6:	1c59      	adds	r1, r3, #1
 8002ea8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002eac:	400b      	ands	r3, r1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00a      	beq.n	8002ec8 <HAL_I2C_Init+0x138>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	1e59      	subs	r1, r3, #1
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec6:	e051      	b.n	8002f6c <HAL_I2C_Init+0x1dc>
 8002ec8:	2304      	movs	r3, #4
 8002eca:	e04f      	b.n	8002f6c <HAL_I2C_Init+0x1dc>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d111      	bne.n	8002ef8 <HAL_I2C_Init+0x168>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	1e58      	subs	r0, r3, #1
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6859      	ldr	r1, [r3, #4]
 8002edc:	460b      	mov	r3, r1
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	440b      	add	r3, r1
 8002ee2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	bf0c      	ite	eq
 8002ef0:	2301      	moveq	r3, #1
 8002ef2:	2300      	movne	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	e012      	b.n	8002f1e <HAL_I2C_Init+0x18e>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	1e58      	subs	r0, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6859      	ldr	r1, [r3, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	0099      	lsls	r1, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f0e:	3301      	adds	r3, #1
 8002f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	bf0c      	ite	eq
 8002f18:	2301      	moveq	r3, #1
 8002f1a:	2300      	movne	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_I2C_Init+0x196>
 8002f22:	2301      	movs	r3, #1
 8002f24:	e022      	b.n	8002f6c <HAL_I2C_Init+0x1dc>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10e      	bne.n	8002f4c <HAL_I2C_Init+0x1bc>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	1e58      	subs	r0, r3, #1
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6859      	ldr	r1, [r3, #4]
 8002f36:	460b      	mov	r3, r1
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	440b      	add	r3, r1
 8002f3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f40:	3301      	adds	r3, #1
 8002f42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f4a:	e00f      	b.n	8002f6c <HAL_I2C_Init+0x1dc>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	1e58      	subs	r0, r3, #1
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6859      	ldr	r1, [r3, #4]
 8002f54:	460b      	mov	r3, r1
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	0099      	lsls	r1, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f62:	3301      	adds	r3, #1
 8002f64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	6809      	ldr	r1, [r1, #0]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69da      	ldr	r2, [r3, #28]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	431a      	orrs	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6911      	ldr	r1, [r2, #16]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	68d2      	ldr	r2, [r2, #12]
 8002fa6:	4311      	orrs	r1, r2
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6812      	ldr	r2, [r2, #0]
 8002fac:	430b      	orrs	r3, r1
 8002fae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695a      	ldr	r2, [r3, #20]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	000186a0 	.word	0x000186a0
 8003008:	001e847f 	.word	0x001e847f
 800300c:	003d08ff 	.word	0x003d08ff
 8003010:	431bde83 	.word	0x431bde83
 8003014:	10624dd3 	.word	0x10624dd3

08003018 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b088      	sub	sp, #32
 800301c:	af02      	add	r7, sp, #8
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	607a      	str	r2, [r7, #4]
 8003022:	461a      	mov	r2, r3
 8003024:	460b      	mov	r3, r1
 8003026:	817b      	strh	r3, [r7, #10]
 8003028:	4613      	mov	r3, r2
 800302a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800302c:	f7ff fb3e 	bl	80026ac <HAL_GetTick>
 8003030:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b20      	cmp	r3, #32
 800303c:	f040 80e0 	bne.w	8003200 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	2319      	movs	r3, #25
 8003046:	2201      	movs	r2, #1
 8003048:	4970      	ldr	r1, [pc, #448]	; (800320c <HAL_I2C_Master_Transmit+0x1f4>)
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 fe0e 	bl	8003c6c <I2C_WaitOnFlagUntilTimeout>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003056:	2302      	movs	r3, #2
 8003058:	e0d3      	b.n	8003202 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003060:	2b01      	cmp	r3, #1
 8003062:	d101      	bne.n	8003068 <HAL_I2C_Master_Transmit+0x50>
 8003064:	2302      	movs	r3, #2
 8003066:	e0cc      	b.n	8003202 <HAL_I2C_Master_Transmit+0x1ea>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b01      	cmp	r3, #1
 800307c:	d007      	beq.n	800308e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f042 0201 	orr.w	r2, r2, #1
 800308c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800309c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2221      	movs	r2, #33	; 0x21
 80030a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2210      	movs	r2, #16
 80030aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	893a      	ldrh	r2, [r7, #8]
 80030be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	4a50      	ldr	r2, [pc, #320]	; (8003210 <HAL_I2C_Master_Transmit+0x1f8>)
 80030ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030d0:	8979      	ldrh	r1, [r7, #10]
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	6a3a      	ldr	r2, [r7, #32]
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 fbc8 	bl	800386c <I2C_MasterRequestWrite>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e08d      	b.n	8003202 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030e6:	2300      	movs	r3, #0
 80030e8:	613b      	str	r3, [r7, #16]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	613b      	str	r3, [r7, #16]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	613b      	str	r3, [r7, #16]
 80030fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80030fc:	e066      	b.n	80031cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	6a39      	ldr	r1, [r7, #32]
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 fecc 	bl	8003ea0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00d      	beq.n	800312a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	2b04      	cmp	r3, #4
 8003114:	d107      	bne.n	8003126 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003124:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e06b      	b.n	8003202 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	781a      	ldrb	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	1c5a      	adds	r2, r3, #1
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003144:	b29b      	uxth	r3, r3
 8003146:	3b01      	subs	r3, #1
 8003148:	b29a      	uxth	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003152:	3b01      	subs	r3, #1
 8003154:	b29a      	uxth	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b04      	cmp	r3, #4
 8003166:	d11b      	bne.n	80031a0 <HAL_I2C_Master_Transmit+0x188>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800316c:	2b00      	cmp	r3, #0
 800316e:	d017      	beq.n	80031a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	781a      	ldrb	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	1c5a      	adds	r2, r3, #1
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318a:	b29b      	uxth	r3, r3
 800318c:	3b01      	subs	r3, #1
 800318e:	b29a      	uxth	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003198:	3b01      	subs	r3, #1
 800319a:	b29a      	uxth	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	6a39      	ldr	r1, [r7, #32]
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 fec3 	bl	8003f30 <I2C_WaitOnBTFFlagUntilTimeout>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00d      	beq.n	80031cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	2b04      	cmp	r3, #4
 80031b6:	d107      	bne.n	80031c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e01a      	b.n	8003202 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d194      	bne.n	80030fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2220      	movs	r2, #32
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031fc:	2300      	movs	r3, #0
 80031fe:	e000      	b.n	8003202 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003200:	2302      	movs	r3, #2
  }
}
 8003202:	4618      	mov	r0, r3
 8003204:	3718      	adds	r7, #24
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	00100002 	.word	0x00100002
 8003210:	ffff0000 	.word	0xffff0000

08003214 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b088      	sub	sp, #32
 8003218:	af02      	add	r7, sp, #8
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	4608      	mov	r0, r1
 800321e:	4611      	mov	r1, r2
 8003220:	461a      	mov	r2, r3
 8003222:	4603      	mov	r3, r0
 8003224:	817b      	strh	r3, [r7, #10]
 8003226:	460b      	mov	r3, r1
 8003228:	813b      	strh	r3, [r7, #8]
 800322a:	4613      	mov	r3, r2
 800322c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800322e:	f7ff fa3d 	bl	80026ac <HAL_GetTick>
 8003232:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b20      	cmp	r3, #32
 800323e:	f040 80d9 	bne.w	80033f4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	2319      	movs	r3, #25
 8003248:	2201      	movs	r2, #1
 800324a:	496d      	ldr	r1, [pc, #436]	; (8003400 <HAL_I2C_Mem_Write+0x1ec>)
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 fd0d 	bl	8003c6c <I2C_WaitOnFlagUntilTimeout>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003258:	2302      	movs	r3, #2
 800325a:	e0cc      	b.n	80033f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003262:	2b01      	cmp	r3, #1
 8003264:	d101      	bne.n	800326a <HAL_I2C_Mem_Write+0x56>
 8003266:	2302      	movs	r3, #2
 8003268:	e0c5      	b.n	80033f6 <HAL_I2C_Mem_Write+0x1e2>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b01      	cmp	r3, #1
 800327e:	d007      	beq.n	8003290 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0201 	orr.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800329e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2221      	movs	r2, #33	; 0x21
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2240      	movs	r2, #64	; 0x40
 80032ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6a3a      	ldr	r2, [r7, #32]
 80032ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80032c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4a4d      	ldr	r2, [pc, #308]	; (8003404 <HAL_I2C_Mem_Write+0x1f0>)
 80032d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032d2:	88f8      	ldrh	r0, [r7, #6]
 80032d4:	893a      	ldrh	r2, [r7, #8]
 80032d6:	8979      	ldrh	r1, [r7, #10]
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	9301      	str	r3, [sp, #4]
 80032dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	4603      	mov	r3, r0
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f000 fb44 	bl	8003970 <I2C_RequestMemoryWrite>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d052      	beq.n	8003394 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e081      	b.n	80033f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 fdd2 	bl	8003ea0 <I2C_WaitOnTXEFlagUntilTimeout>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00d      	beq.n	800331e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	2b04      	cmp	r3, #4
 8003308:	d107      	bne.n	800331a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003318:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e06b      	b.n	80033f6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	781a      	ldrb	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	1c5a      	adds	r2, r3, #1
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003338:	3b01      	subs	r3, #1
 800333a:	b29a      	uxth	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003344:	b29b      	uxth	r3, r3
 8003346:	3b01      	subs	r3, #1
 8003348:	b29a      	uxth	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	f003 0304 	and.w	r3, r3, #4
 8003358:	2b04      	cmp	r3, #4
 800335a:	d11b      	bne.n	8003394 <HAL_I2C_Mem_Write+0x180>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003360:	2b00      	cmp	r3, #0
 8003362:	d017      	beq.n	8003394 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	781a      	ldrb	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	1c5a      	adds	r2, r3, #1
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337e:	3b01      	subs	r3, #1
 8003380:	b29a      	uxth	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338a:	b29b      	uxth	r3, r3
 800338c:	3b01      	subs	r3, #1
 800338e:	b29a      	uxth	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1aa      	bne.n	80032f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 fdc5 	bl	8003f30 <I2C_WaitOnBTFFlagUntilTimeout>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00d      	beq.n	80033c8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d107      	bne.n	80033c4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e016      	b.n	80033f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2220      	movs	r2, #32
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033f0:	2300      	movs	r3, #0
 80033f2:	e000      	b.n	80033f6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80033f4:	2302      	movs	r3, #2
  }
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3718      	adds	r7, #24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	00100002 	.word	0x00100002
 8003404:	ffff0000 	.word	0xffff0000

08003408 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b08c      	sub	sp, #48	; 0x30
 800340c:	af02      	add	r7, sp, #8
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	4608      	mov	r0, r1
 8003412:	4611      	mov	r1, r2
 8003414:	461a      	mov	r2, r3
 8003416:	4603      	mov	r3, r0
 8003418:	817b      	strh	r3, [r7, #10]
 800341a:	460b      	mov	r3, r1
 800341c:	813b      	strh	r3, [r7, #8]
 800341e:	4613      	mov	r3, r2
 8003420:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003422:	f7ff f943 	bl	80026ac <HAL_GetTick>
 8003426:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b20      	cmp	r3, #32
 8003432:	f040 8214 	bne.w	800385e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	2319      	movs	r3, #25
 800343c:	2201      	movs	r2, #1
 800343e:	497b      	ldr	r1, [pc, #492]	; (800362c <HAL_I2C_Mem_Read+0x224>)
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f000 fc13 	bl	8003c6c <I2C_WaitOnFlagUntilTimeout>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800344c:	2302      	movs	r3, #2
 800344e:	e207      	b.n	8003860 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003456:	2b01      	cmp	r3, #1
 8003458:	d101      	bne.n	800345e <HAL_I2C_Mem_Read+0x56>
 800345a:	2302      	movs	r3, #2
 800345c:	e200      	b.n	8003860 <HAL_I2C_Mem_Read+0x458>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b01      	cmp	r3, #1
 8003472:	d007      	beq.n	8003484 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 0201 	orr.w	r2, r2, #1
 8003482:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003492:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2222      	movs	r2, #34	; 0x22
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2240      	movs	r2, #64	; 0x40
 80034a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80034b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4a5b      	ldr	r2, [pc, #364]	; (8003630 <HAL_I2C_Mem_Read+0x228>)
 80034c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034c6:	88f8      	ldrh	r0, [r7, #6]
 80034c8:	893a      	ldrh	r2, [r7, #8]
 80034ca:	8979      	ldrh	r1, [r7, #10]
 80034cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ce:	9301      	str	r3, [sp, #4]
 80034d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	4603      	mov	r3, r0
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f000 fae0 	bl	8003a9c <I2C_RequestMemoryRead>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e1bc      	b.n	8003860 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d113      	bne.n	8003516 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ee:	2300      	movs	r3, #0
 80034f0:	623b      	str	r3, [r7, #32]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	623b      	str	r3, [r7, #32]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	623b      	str	r3, [r7, #32]
 8003502:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	e190      	b.n	8003838 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800351a:	2b01      	cmp	r3, #1
 800351c:	d11b      	bne.n	8003556 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800352c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800352e:	2300      	movs	r3, #0
 8003530:	61fb      	str	r3, [r7, #28]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	61fb      	str	r3, [r7, #28]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	61fb      	str	r3, [r7, #28]
 8003542:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	e170      	b.n	8003838 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355a:	2b02      	cmp	r3, #2
 800355c:	d11b      	bne.n	8003596 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800356c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800357c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800357e:	2300      	movs	r3, #0
 8003580:	61bb      	str	r3, [r7, #24]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	61bb      	str	r3, [r7, #24]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	61bb      	str	r3, [r7, #24]
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	e150      	b.n	8003838 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003596:	2300      	movs	r3, #0
 8003598:	617b      	str	r3, [r7, #20]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	617b      	str	r3, [r7, #20]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	617b      	str	r3, [r7, #20]
 80035aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80035ac:	e144      	b.n	8003838 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b2:	2b03      	cmp	r3, #3
 80035b4:	f200 80f1 	bhi.w	800379a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d123      	bne.n	8003608 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 fcfb 	bl	8003fc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e145      	b.n	8003860 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	691a      	ldr	r2, [r3, #16]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f0:	3b01      	subs	r3, #1
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	3b01      	subs	r3, #1
 8003600:	b29a      	uxth	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003606:	e117      	b.n	8003838 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360c:	2b02      	cmp	r3, #2
 800360e:	d14e      	bne.n	80036ae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003616:	2200      	movs	r2, #0
 8003618:	4906      	ldr	r1, [pc, #24]	; (8003634 <HAL_I2C_Mem_Read+0x22c>)
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 fb26 	bl	8003c6c <I2C_WaitOnFlagUntilTimeout>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d008      	beq.n	8003638 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e11a      	b.n	8003860 <HAL_I2C_Mem_Read+0x458>
 800362a:	bf00      	nop
 800362c:	00100002 	.word	0x00100002
 8003630:	ffff0000 	.word	0xffff0000
 8003634:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003646:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691a      	ldr	r2, [r3, #16]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	b2d2      	uxtb	r2, r2
 8003654:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003664:	3b01      	subs	r3, #1
 8003666:	b29a      	uxth	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003670:	b29b      	uxth	r3, r3
 8003672:	3b01      	subs	r3, #1
 8003674:	b29a      	uxth	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	691a      	ldr	r2, [r3, #16]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003696:	3b01      	subs	r3, #1
 8003698:	b29a      	uxth	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036ac:	e0c4      	b.n	8003838 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b4:	2200      	movs	r2, #0
 80036b6:	496c      	ldr	r1, [pc, #432]	; (8003868 <HAL_I2C_Mem_Read+0x460>)
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 fad7 	bl	8003c6c <I2C_WaitOnFlagUntilTimeout>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e0cb      	b.n	8003860 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	691a      	ldr	r2, [r3, #16]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003700:	b29b      	uxth	r3, r3
 8003702:	3b01      	subs	r3, #1
 8003704:	b29a      	uxth	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003710:	2200      	movs	r2, #0
 8003712:	4955      	ldr	r1, [pc, #340]	; (8003868 <HAL_I2C_Mem_Read+0x460>)
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f000 faa9 	bl	8003c6c <I2C_WaitOnFlagUntilTimeout>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e09d      	b.n	8003860 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003732:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	691a      	ldr	r2, [r3, #16]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	1c5a      	adds	r2, r3, #1
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375c:	b29b      	uxth	r3, r3
 800375e:	3b01      	subs	r3, #1
 8003760:	b29a      	uxth	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	691a      	ldr	r2, [r3, #16]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003770:	b2d2      	uxtb	r2, r2
 8003772:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	1c5a      	adds	r2, r3, #1
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003782:	3b01      	subs	r3, #1
 8003784:	b29a      	uxth	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800378e:	b29b      	uxth	r3, r3
 8003790:	3b01      	subs	r3, #1
 8003792:	b29a      	uxth	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003798:	e04e      	b.n	8003838 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800379a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800379c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 fc0e 	bl	8003fc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e058      	b.n	8003860 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	691a      	ldr	r2, [r3, #16]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	b2d2      	uxtb	r2, r2
 80037ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	1c5a      	adds	r2, r3, #1
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ca:	3b01      	subs	r3, #1
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	f003 0304 	and.w	r3, r3, #4
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	d124      	bne.n	8003838 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f2:	2b03      	cmp	r3, #3
 80037f4:	d107      	bne.n	8003806 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003804:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	691a      	ldr	r2, [r3, #16]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	1c5a      	adds	r2, r3, #1
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003822:	3b01      	subs	r3, #1
 8003824:	b29a      	uxth	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382e:	b29b      	uxth	r3, r3
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383c:	2b00      	cmp	r3, #0
 800383e:	f47f aeb6 	bne.w	80035ae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2220      	movs	r2, #32
 8003846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800385a:	2300      	movs	r3, #0
 800385c:	e000      	b.n	8003860 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800385e:	2302      	movs	r3, #2
  }
}
 8003860:	4618      	mov	r0, r3
 8003862:	3728      	adds	r7, #40	; 0x28
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	00010004 	.word	0x00010004

0800386c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b088      	sub	sp, #32
 8003870:	af02      	add	r7, sp, #8
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	607a      	str	r2, [r7, #4]
 8003876:	603b      	str	r3, [r7, #0]
 8003878:	460b      	mov	r3, r1
 800387a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	2b08      	cmp	r3, #8
 8003886:	d006      	beq.n	8003896 <I2C_MasterRequestWrite+0x2a>
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d003      	beq.n	8003896 <I2C_MasterRequestWrite+0x2a>
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003894:	d108      	bne.n	80038a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	e00b      	b.n	80038c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ac:	2b12      	cmp	r3, #18
 80038ae:	d107      	bne.n	80038c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 f9cd 	bl	8003c6c <I2C_WaitOnFlagUntilTimeout>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00d      	beq.n	80038f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038e6:	d103      	bne.n	80038f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e035      	b.n	8003960 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038fc:	d108      	bne.n	8003910 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038fe:	897b      	ldrh	r3, [r7, #10]
 8003900:	b2db      	uxtb	r3, r3
 8003902:	461a      	mov	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800390c:	611a      	str	r2, [r3, #16]
 800390e:	e01b      	b.n	8003948 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003910:	897b      	ldrh	r3, [r7, #10]
 8003912:	11db      	asrs	r3, r3, #7
 8003914:	b2db      	uxtb	r3, r3
 8003916:	f003 0306 	and.w	r3, r3, #6
 800391a:	b2db      	uxtb	r3, r3
 800391c:	f063 030f 	orn	r3, r3, #15
 8003920:	b2da      	uxtb	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	490e      	ldr	r1, [pc, #56]	; (8003968 <I2C_MasterRequestWrite+0xfc>)
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 fa16 	bl	8003d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e010      	b.n	8003960 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800393e:	897b      	ldrh	r3, [r7, #10]
 8003940:	b2da      	uxtb	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	4907      	ldr	r1, [pc, #28]	; (800396c <I2C_MasterRequestWrite+0x100>)
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 fa06 	bl	8003d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e000      	b.n	8003960 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	00010008 	.word	0x00010008
 800396c:	00010002 	.word	0x00010002

08003970 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b088      	sub	sp, #32
 8003974:	af02      	add	r7, sp, #8
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	4608      	mov	r0, r1
 800397a:	4611      	mov	r1, r2
 800397c:	461a      	mov	r2, r3
 800397e:	4603      	mov	r3, r0
 8003980:	817b      	strh	r3, [r7, #10]
 8003982:	460b      	mov	r3, r1
 8003984:	813b      	strh	r3, [r7, #8]
 8003986:	4613      	mov	r3, r2
 8003988:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003998:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	9300      	str	r3, [sp, #0]
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 f960 	bl	8003c6c <I2C_WaitOnFlagUntilTimeout>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00d      	beq.n	80039ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039c0:	d103      	bne.n	80039ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e05f      	b.n	8003a8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039ce:	897b      	ldrh	r3, [r7, #10]
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	461a      	mov	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	6a3a      	ldr	r2, [r7, #32]
 80039e2:	492d      	ldr	r1, [pc, #180]	; (8003a98 <I2C_RequestMemoryWrite+0x128>)
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 f9bb 	bl	8003d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e04c      	b.n	8003a8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039f4:	2300      	movs	r3, #0
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	617b      	str	r3, [r7, #20]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	617b      	str	r3, [r7, #20]
 8003a08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a0c:	6a39      	ldr	r1, [r7, #32]
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f000 fa46 	bl	8003ea0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00d      	beq.n	8003a36 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d107      	bne.n	8003a32 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e02b      	b.n	8003a8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a36:	88fb      	ldrh	r3, [r7, #6]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d105      	bne.n	8003a48 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a3c:	893b      	ldrh	r3, [r7, #8]
 8003a3e:	b2da      	uxtb	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	611a      	str	r2, [r3, #16]
 8003a46:	e021      	b.n	8003a8c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a48:	893b      	ldrh	r3, [r7, #8]
 8003a4a:	0a1b      	lsrs	r3, r3, #8
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	b2da      	uxtb	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a58:	6a39      	ldr	r1, [r7, #32]
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 fa20 	bl	8003ea0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00d      	beq.n	8003a82 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d107      	bne.n	8003a7e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e005      	b.n	8003a8e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a82:	893b      	ldrh	r3, [r7, #8]
 8003a84:	b2da      	uxtb	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	00010002 	.word	0x00010002

08003a9c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b088      	sub	sp, #32
 8003aa0:	af02      	add	r7, sp, #8
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	4608      	mov	r0, r1
 8003aa6:	4611      	mov	r1, r2
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	4603      	mov	r3, r0
 8003aac:	817b      	strh	r3, [r7, #10]
 8003aae:	460b      	mov	r3, r1
 8003ab0:	813b      	strh	r3, [r7, #8]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ac4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ad4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 f8c2 	bl	8003c6c <I2C_WaitOnFlagUntilTimeout>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00d      	beq.n	8003b0a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003afc:	d103      	bne.n	8003b06 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e0aa      	b.n	8003c60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b0a:	897b      	ldrh	r3, [r7, #10]
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	461a      	mov	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	6a3a      	ldr	r2, [r7, #32]
 8003b1e:	4952      	ldr	r1, [pc, #328]	; (8003c68 <I2C_RequestMemoryRead+0x1cc>)
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 f91d 	bl	8003d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e097      	b.n	8003c60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b30:	2300      	movs	r3, #0
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b48:	6a39      	ldr	r1, [r7, #32]
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f000 f9a8 	bl	8003ea0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00d      	beq.n	8003b72 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d107      	bne.n	8003b6e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e076      	b.n	8003c60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b72:	88fb      	ldrh	r3, [r7, #6]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d105      	bne.n	8003b84 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b78:	893b      	ldrh	r3, [r7, #8]
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	611a      	str	r2, [r3, #16]
 8003b82:	e021      	b.n	8003bc8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b84:	893b      	ldrh	r3, [r7, #8]
 8003b86:	0a1b      	lsrs	r3, r3, #8
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b94:	6a39      	ldr	r1, [r7, #32]
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f000 f982 	bl	8003ea0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00d      	beq.n	8003bbe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	d107      	bne.n	8003bba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bb8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e050      	b.n	8003c60 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bbe:	893b      	ldrh	r3, [r7, #8]
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bca:	6a39      	ldr	r1, [r7, #32]
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 f967 	bl	8003ea0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00d      	beq.n	8003bf4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bdc:	2b04      	cmp	r3, #4
 8003bde:	d107      	bne.n	8003bf0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e035      	b.n	8003c60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c02:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	6a3b      	ldr	r3, [r7, #32]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 f82b 	bl	8003c6c <I2C_WaitOnFlagUntilTimeout>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00d      	beq.n	8003c38 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c2a:	d103      	bne.n	8003c34 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e013      	b.n	8003c60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c38:	897b      	ldrh	r3, [r7, #10]
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	f043 0301 	orr.w	r3, r3, #1
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	6a3a      	ldr	r2, [r7, #32]
 8003c4c:	4906      	ldr	r1, [pc, #24]	; (8003c68 <I2C_RequestMemoryRead+0x1cc>)
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f000 f886 	bl	8003d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	00010002 	.word	0x00010002

08003c6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	603b      	str	r3, [r7, #0]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c7c:	e048      	b.n	8003d10 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c84:	d044      	beq.n	8003d10 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c86:	f7fe fd11 	bl	80026ac <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d302      	bcc.n	8003c9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d139      	bne.n	8003d10 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	0c1b      	lsrs	r3, r3, #16
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d10d      	bne.n	8003cc2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	43da      	mvns	r2, r3
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	bf0c      	ite	eq
 8003cb8:	2301      	moveq	r3, #1
 8003cba:	2300      	movne	r3, #0
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	e00c      	b.n	8003cdc <I2C_WaitOnFlagUntilTimeout+0x70>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	43da      	mvns	r2, r3
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	bf0c      	ite	eq
 8003cd4:	2301      	moveq	r3, #1
 8003cd6:	2300      	movne	r3, #0
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	461a      	mov	r2, r3
 8003cdc:	79fb      	ldrb	r3, [r7, #7]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d116      	bne.n	8003d10 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfc:	f043 0220 	orr.w	r2, r3, #32
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e023      	b.n	8003d58 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	0c1b      	lsrs	r3, r3, #16
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d10d      	bne.n	8003d36 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	43da      	mvns	r2, r3
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	4013      	ands	r3, r2
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	bf0c      	ite	eq
 8003d2c:	2301      	moveq	r3, #1
 8003d2e:	2300      	movne	r3, #0
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	461a      	mov	r2, r3
 8003d34:	e00c      	b.n	8003d50 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	43da      	mvns	r2, r3
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	4013      	ands	r3, r2
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	bf0c      	ite	eq
 8003d48:	2301      	moveq	r3, #1
 8003d4a:	2300      	movne	r3, #0
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	461a      	mov	r2, r3
 8003d50:	79fb      	ldrb	r3, [r7, #7]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d093      	beq.n	8003c7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
 8003d6c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d6e:	e071      	b.n	8003e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d7e:	d123      	bne.n	8003dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d8e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db4:	f043 0204 	orr.w	r2, r3, #4
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e067      	b.n	8003e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dce:	d041      	beq.n	8003e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dd0:	f7fe fc6c 	bl	80026ac <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d302      	bcc.n	8003de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d136      	bne.n	8003e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	0c1b      	lsrs	r3, r3, #16
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d10c      	bne.n	8003e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	43da      	mvns	r2, r3
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	bf14      	ite	ne
 8003e02:	2301      	movne	r3, #1
 8003e04:	2300      	moveq	r3, #0
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	e00b      	b.n	8003e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	43da      	mvns	r2, r3
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	4013      	ands	r3, r2
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	bf14      	ite	ne
 8003e1c:	2301      	movne	r3, #1
 8003e1e:	2300      	moveq	r3, #0
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d016      	beq.n	8003e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e40:	f043 0220 	orr.w	r2, r3, #32
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e021      	b.n	8003e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	0c1b      	lsrs	r3, r3, #16
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d10c      	bne.n	8003e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	695b      	ldr	r3, [r3, #20]
 8003e64:	43da      	mvns	r2, r3
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	bf14      	ite	ne
 8003e70:	2301      	movne	r3, #1
 8003e72:	2300      	moveq	r3, #0
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	e00b      	b.n	8003e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	43da      	mvns	r2, r3
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	4013      	ands	r3, r2
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	bf14      	ite	ne
 8003e8a:	2301      	movne	r3, #1
 8003e8c:	2300      	moveq	r3, #0
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f47f af6d 	bne.w	8003d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003eac:	e034      	b.n	8003f18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f000 f8e3 	bl	800407a <I2C_IsAcknowledgeFailed>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e034      	b.n	8003f28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec4:	d028      	beq.n	8003f18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ec6:	f7fe fbf1 	bl	80026ac <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d302      	bcc.n	8003edc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d11d      	bne.n	8003f18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee6:	2b80      	cmp	r3, #128	; 0x80
 8003ee8:	d016      	beq.n	8003f18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f04:	f043 0220 	orr.w	r2, r3, #32
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e007      	b.n	8003f28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f22:	2b80      	cmp	r3, #128	; 0x80
 8003f24:	d1c3      	bne.n	8003eae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f3c:	e034      	b.n	8003fa8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f000 f89b 	bl	800407a <I2C_IsAcknowledgeFailed>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e034      	b.n	8003fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f54:	d028      	beq.n	8003fa8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f56:	f7fe fba9 	bl	80026ac <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d302      	bcc.n	8003f6c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d11d      	bne.n	8003fa8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	f003 0304 	and.w	r3, r3, #4
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d016      	beq.n	8003fa8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2220      	movs	r2, #32
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f94:	f043 0220 	orr.w	r2, r3, #32
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e007      	b.n	8003fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	f003 0304 	and.w	r3, r3, #4
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	d1c3      	bne.n	8003f3e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fcc:	e049      	b.n	8004062 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	f003 0310 	and.w	r3, r3, #16
 8003fd8:	2b10      	cmp	r3, #16
 8003fda:	d119      	bne.n	8004010 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f06f 0210 	mvn.w	r2, #16
 8003fe4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e030      	b.n	8004072 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004010:	f7fe fb4c 	bl	80026ac <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	429a      	cmp	r2, r3
 800401e:	d302      	bcc.n	8004026 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d11d      	bne.n	8004062 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004030:	2b40      	cmp	r3, #64	; 0x40
 8004032:	d016      	beq.n	8004062 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2220      	movs	r2, #32
 800403e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	f043 0220 	orr.w	r2, r3, #32
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e007      	b.n	8004072 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406c:	2b40      	cmp	r3, #64	; 0x40
 800406e:	d1ae      	bne.n	8003fce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800407a:	b480      	push	{r7}
 800407c:	b083      	sub	sp, #12
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800408c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004090:	d11b      	bne.n	80040ca <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800409a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	f043 0204 	orr.w	r2, r3, #4
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e000      	b.n	80040cc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e267      	b.n	80045ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d075      	beq.n	80041e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040f6:	4b88      	ldr	r3, [pc, #544]	; (8004318 <HAL_RCC_OscConfig+0x240>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f003 030c 	and.w	r3, r3, #12
 80040fe:	2b04      	cmp	r3, #4
 8004100:	d00c      	beq.n	800411c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004102:	4b85      	ldr	r3, [pc, #532]	; (8004318 <HAL_RCC_OscConfig+0x240>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800410a:	2b08      	cmp	r3, #8
 800410c:	d112      	bne.n	8004134 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800410e:	4b82      	ldr	r3, [pc, #520]	; (8004318 <HAL_RCC_OscConfig+0x240>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004116:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800411a:	d10b      	bne.n	8004134 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800411c:	4b7e      	ldr	r3, [pc, #504]	; (8004318 <HAL_RCC_OscConfig+0x240>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d05b      	beq.n	80041e0 <HAL_RCC_OscConfig+0x108>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d157      	bne.n	80041e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e242      	b.n	80045ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800413c:	d106      	bne.n	800414c <HAL_RCC_OscConfig+0x74>
 800413e:	4b76      	ldr	r3, [pc, #472]	; (8004318 <HAL_RCC_OscConfig+0x240>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a75      	ldr	r2, [pc, #468]	; (8004318 <HAL_RCC_OscConfig+0x240>)
 8004144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004148:	6013      	str	r3, [r2, #0]
 800414a:	e01d      	b.n	8004188 <HAL_RCC_OscConfig+0xb0>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004154:	d10c      	bne.n	8004170 <HAL_RCC_OscConfig+0x98>
 8004156:	4b70      	ldr	r3, [pc, #448]	; (8004318 <HAL_RCC_OscConfig+0x240>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a6f      	ldr	r2, [pc, #444]	; (8004318 <HAL_RCC_OscConfig+0x240>)
 800415c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004160:	6013      	str	r3, [r2, #0]
 8004162:	4b6d      	ldr	r3, [pc, #436]	; (8004318 <HAL_RCC_OscConfig+0x240>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a6c      	ldr	r2, [pc, #432]	; (8004318 <HAL_RCC_OscConfig+0x240>)
 8004168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800416c:	6013      	str	r3, [r2, #0]
 800416e:	e00b      	b.n	8004188 <HAL_RCC_OscConfig+0xb0>
 8004170:	4b69      	ldr	r3, [pc, #420]	; (8004318 <HAL_RCC_OscConfig+0x240>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a68      	ldr	r2, [pc, #416]	; (8004318 <HAL_RCC_OscConfig+0x240>)
 8004176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800417a:	6013      	str	r3, [r2, #0]
 800417c:	4b66      	ldr	r3, [pc, #408]	; (8004318 <HAL_RCC_OscConfig+0x240>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a65      	ldr	r2, [pc, #404]	; (8004318 <HAL_RCC_OscConfig+0x240>)
 8004182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004186:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d013      	beq.n	80041b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004190:	f7fe fa8c 	bl	80026ac <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004198:	f7fe fa88 	bl	80026ac <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b64      	cmp	r3, #100	; 0x64
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e207      	b.n	80045ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041aa:	4b5b      	ldr	r3, [pc, #364]	; (8004318 <HAL_RCC_OscConfig+0x240>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d0f0      	beq.n	8004198 <HAL_RCC_OscConfig+0xc0>
 80041b6:	e014      	b.n	80041e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b8:	f7fe fa78 	bl	80026ac <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041c0:	f7fe fa74 	bl	80026ac <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b64      	cmp	r3, #100	; 0x64
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e1f3      	b.n	80045ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041d2:	4b51      	ldr	r3, [pc, #324]	; (8004318 <HAL_RCC_OscConfig+0x240>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1f0      	bne.n	80041c0 <HAL_RCC_OscConfig+0xe8>
 80041de:	e000      	b.n	80041e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d063      	beq.n	80042b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041ee:	4b4a      	ldr	r3, [pc, #296]	; (8004318 <HAL_RCC_OscConfig+0x240>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 030c 	and.w	r3, r3, #12
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00b      	beq.n	8004212 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041fa:	4b47      	ldr	r3, [pc, #284]	; (8004318 <HAL_RCC_OscConfig+0x240>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004202:	2b08      	cmp	r3, #8
 8004204:	d11c      	bne.n	8004240 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004206:	4b44      	ldr	r3, [pc, #272]	; (8004318 <HAL_RCC_OscConfig+0x240>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d116      	bne.n	8004240 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004212:	4b41      	ldr	r3, [pc, #260]	; (8004318 <HAL_RCC_OscConfig+0x240>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d005      	beq.n	800422a <HAL_RCC_OscConfig+0x152>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d001      	beq.n	800422a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e1c7      	b.n	80045ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800422a:	4b3b      	ldr	r3, [pc, #236]	; (8004318 <HAL_RCC_OscConfig+0x240>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	4937      	ldr	r1, [pc, #220]	; (8004318 <HAL_RCC_OscConfig+0x240>)
 800423a:	4313      	orrs	r3, r2
 800423c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800423e:	e03a      	b.n	80042b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d020      	beq.n	800428a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004248:	4b34      	ldr	r3, [pc, #208]	; (800431c <HAL_RCC_OscConfig+0x244>)
 800424a:	2201      	movs	r2, #1
 800424c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424e:	f7fe fa2d 	bl	80026ac <HAL_GetTick>
 8004252:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004254:	e008      	b.n	8004268 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004256:	f7fe fa29 	bl	80026ac <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d901      	bls.n	8004268 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e1a8      	b.n	80045ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004268:	4b2b      	ldr	r3, [pc, #172]	; (8004318 <HAL_RCC_OscConfig+0x240>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d0f0      	beq.n	8004256 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004274:	4b28      	ldr	r3, [pc, #160]	; (8004318 <HAL_RCC_OscConfig+0x240>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	00db      	lsls	r3, r3, #3
 8004282:	4925      	ldr	r1, [pc, #148]	; (8004318 <HAL_RCC_OscConfig+0x240>)
 8004284:	4313      	orrs	r3, r2
 8004286:	600b      	str	r3, [r1, #0]
 8004288:	e015      	b.n	80042b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800428a:	4b24      	ldr	r3, [pc, #144]	; (800431c <HAL_RCC_OscConfig+0x244>)
 800428c:	2200      	movs	r2, #0
 800428e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004290:	f7fe fa0c 	bl	80026ac <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004298:	f7fe fa08 	bl	80026ac <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e187      	b.n	80045ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042aa:	4b1b      	ldr	r3, [pc, #108]	; (8004318 <HAL_RCC_OscConfig+0x240>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1f0      	bne.n	8004298 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0308 	and.w	r3, r3, #8
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d036      	beq.n	8004330 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d016      	beq.n	80042f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042ca:	4b15      	ldr	r3, [pc, #84]	; (8004320 <HAL_RCC_OscConfig+0x248>)
 80042cc:	2201      	movs	r2, #1
 80042ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d0:	f7fe f9ec 	bl	80026ac <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042d8:	f7fe f9e8 	bl	80026ac <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e167      	b.n	80045ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ea:	4b0b      	ldr	r3, [pc, #44]	; (8004318 <HAL_RCC_OscConfig+0x240>)
 80042ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d0f0      	beq.n	80042d8 <HAL_RCC_OscConfig+0x200>
 80042f6:	e01b      	b.n	8004330 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042f8:	4b09      	ldr	r3, [pc, #36]	; (8004320 <HAL_RCC_OscConfig+0x248>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042fe:	f7fe f9d5 	bl	80026ac <HAL_GetTick>
 8004302:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004304:	e00e      	b.n	8004324 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004306:	f7fe f9d1 	bl	80026ac <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d907      	bls.n	8004324 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e150      	b.n	80045ba <HAL_RCC_OscConfig+0x4e2>
 8004318:	40023800 	.word	0x40023800
 800431c:	42470000 	.word	0x42470000
 8004320:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004324:	4b88      	ldr	r3, [pc, #544]	; (8004548 <HAL_RCC_OscConfig+0x470>)
 8004326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1ea      	bne.n	8004306 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0304 	and.w	r3, r3, #4
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 8097 	beq.w	800446c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800433e:	2300      	movs	r3, #0
 8004340:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004342:	4b81      	ldr	r3, [pc, #516]	; (8004548 <HAL_RCC_OscConfig+0x470>)
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10f      	bne.n	800436e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800434e:	2300      	movs	r3, #0
 8004350:	60bb      	str	r3, [r7, #8]
 8004352:	4b7d      	ldr	r3, [pc, #500]	; (8004548 <HAL_RCC_OscConfig+0x470>)
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	4a7c      	ldr	r2, [pc, #496]	; (8004548 <HAL_RCC_OscConfig+0x470>)
 8004358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800435c:	6413      	str	r3, [r2, #64]	; 0x40
 800435e:	4b7a      	ldr	r3, [pc, #488]	; (8004548 <HAL_RCC_OscConfig+0x470>)
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004366:	60bb      	str	r3, [r7, #8]
 8004368:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800436a:	2301      	movs	r3, #1
 800436c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800436e:	4b77      	ldr	r3, [pc, #476]	; (800454c <HAL_RCC_OscConfig+0x474>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004376:	2b00      	cmp	r3, #0
 8004378:	d118      	bne.n	80043ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800437a:	4b74      	ldr	r3, [pc, #464]	; (800454c <HAL_RCC_OscConfig+0x474>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a73      	ldr	r2, [pc, #460]	; (800454c <HAL_RCC_OscConfig+0x474>)
 8004380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004384:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004386:	f7fe f991 	bl	80026ac <HAL_GetTick>
 800438a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800438c:	e008      	b.n	80043a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800438e:	f7fe f98d 	bl	80026ac <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	2b02      	cmp	r3, #2
 800439a:	d901      	bls.n	80043a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e10c      	b.n	80045ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043a0:	4b6a      	ldr	r3, [pc, #424]	; (800454c <HAL_RCC_OscConfig+0x474>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0f0      	beq.n	800438e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d106      	bne.n	80043c2 <HAL_RCC_OscConfig+0x2ea>
 80043b4:	4b64      	ldr	r3, [pc, #400]	; (8004548 <HAL_RCC_OscConfig+0x470>)
 80043b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b8:	4a63      	ldr	r2, [pc, #396]	; (8004548 <HAL_RCC_OscConfig+0x470>)
 80043ba:	f043 0301 	orr.w	r3, r3, #1
 80043be:	6713      	str	r3, [r2, #112]	; 0x70
 80043c0:	e01c      	b.n	80043fc <HAL_RCC_OscConfig+0x324>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	2b05      	cmp	r3, #5
 80043c8:	d10c      	bne.n	80043e4 <HAL_RCC_OscConfig+0x30c>
 80043ca:	4b5f      	ldr	r3, [pc, #380]	; (8004548 <HAL_RCC_OscConfig+0x470>)
 80043cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ce:	4a5e      	ldr	r2, [pc, #376]	; (8004548 <HAL_RCC_OscConfig+0x470>)
 80043d0:	f043 0304 	orr.w	r3, r3, #4
 80043d4:	6713      	str	r3, [r2, #112]	; 0x70
 80043d6:	4b5c      	ldr	r3, [pc, #368]	; (8004548 <HAL_RCC_OscConfig+0x470>)
 80043d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043da:	4a5b      	ldr	r2, [pc, #364]	; (8004548 <HAL_RCC_OscConfig+0x470>)
 80043dc:	f043 0301 	orr.w	r3, r3, #1
 80043e0:	6713      	str	r3, [r2, #112]	; 0x70
 80043e2:	e00b      	b.n	80043fc <HAL_RCC_OscConfig+0x324>
 80043e4:	4b58      	ldr	r3, [pc, #352]	; (8004548 <HAL_RCC_OscConfig+0x470>)
 80043e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e8:	4a57      	ldr	r2, [pc, #348]	; (8004548 <HAL_RCC_OscConfig+0x470>)
 80043ea:	f023 0301 	bic.w	r3, r3, #1
 80043ee:	6713      	str	r3, [r2, #112]	; 0x70
 80043f0:	4b55      	ldr	r3, [pc, #340]	; (8004548 <HAL_RCC_OscConfig+0x470>)
 80043f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f4:	4a54      	ldr	r2, [pc, #336]	; (8004548 <HAL_RCC_OscConfig+0x470>)
 80043f6:	f023 0304 	bic.w	r3, r3, #4
 80043fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d015      	beq.n	8004430 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004404:	f7fe f952 	bl	80026ac <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800440a:	e00a      	b.n	8004422 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800440c:	f7fe f94e 	bl	80026ac <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	f241 3288 	movw	r2, #5000	; 0x1388
 800441a:	4293      	cmp	r3, r2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e0cb      	b.n	80045ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004422:	4b49      	ldr	r3, [pc, #292]	; (8004548 <HAL_RCC_OscConfig+0x470>)
 8004424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d0ee      	beq.n	800440c <HAL_RCC_OscConfig+0x334>
 800442e:	e014      	b.n	800445a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004430:	f7fe f93c 	bl	80026ac <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004436:	e00a      	b.n	800444e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004438:	f7fe f938 	bl	80026ac <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	f241 3288 	movw	r2, #5000	; 0x1388
 8004446:	4293      	cmp	r3, r2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e0b5      	b.n	80045ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800444e:	4b3e      	ldr	r3, [pc, #248]	; (8004548 <HAL_RCC_OscConfig+0x470>)
 8004450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1ee      	bne.n	8004438 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800445a:	7dfb      	ldrb	r3, [r7, #23]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d105      	bne.n	800446c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004460:	4b39      	ldr	r3, [pc, #228]	; (8004548 <HAL_RCC_OscConfig+0x470>)
 8004462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004464:	4a38      	ldr	r2, [pc, #224]	; (8004548 <HAL_RCC_OscConfig+0x470>)
 8004466:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800446a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 80a1 	beq.w	80045b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004476:	4b34      	ldr	r3, [pc, #208]	; (8004548 <HAL_RCC_OscConfig+0x470>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 030c 	and.w	r3, r3, #12
 800447e:	2b08      	cmp	r3, #8
 8004480:	d05c      	beq.n	800453c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	2b02      	cmp	r3, #2
 8004488:	d141      	bne.n	800450e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800448a:	4b31      	ldr	r3, [pc, #196]	; (8004550 <HAL_RCC_OscConfig+0x478>)
 800448c:	2200      	movs	r2, #0
 800448e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004490:	f7fe f90c 	bl	80026ac <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004498:	f7fe f908 	bl	80026ac <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e087      	b.n	80045ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044aa:	4b27      	ldr	r3, [pc, #156]	; (8004548 <HAL_RCC_OscConfig+0x470>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1f0      	bne.n	8004498 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	69da      	ldr	r2, [r3, #28]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	431a      	orrs	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	019b      	lsls	r3, r3, #6
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044cc:	085b      	lsrs	r3, r3, #1
 80044ce:	3b01      	subs	r3, #1
 80044d0:	041b      	lsls	r3, r3, #16
 80044d2:	431a      	orrs	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d8:	061b      	lsls	r3, r3, #24
 80044da:	491b      	ldr	r1, [pc, #108]	; (8004548 <HAL_RCC_OscConfig+0x470>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044e0:	4b1b      	ldr	r3, [pc, #108]	; (8004550 <HAL_RCC_OscConfig+0x478>)
 80044e2:	2201      	movs	r2, #1
 80044e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e6:	f7fe f8e1 	bl	80026ac <HAL_GetTick>
 80044ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ec:	e008      	b.n	8004500 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044ee:	f7fe f8dd 	bl	80026ac <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e05c      	b.n	80045ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004500:	4b11      	ldr	r3, [pc, #68]	; (8004548 <HAL_RCC_OscConfig+0x470>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d0f0      	beq.n	80044ee <HAL_RCC_OscConfig+0x416>
 800450c:	e054      	b.n	80045b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800450e:	4b10      	ldr	r3, [pc, #64]	; (8004550 <HAL_RCC_OscConfig+0x478>)
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004514:	f7fe f8ca 	bl	80026ac <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800451c:	f7fe f8c6 	bl	80026ac <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e045      	b.n	80045ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800452e:	4b06      	ldr	r3, [pc, #24]	; (8004548 <HAL_RCC_OscConfig+0x470>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1f0      	bne.n	800451c <HAL_RCC_OscConfig+0x444>
 800453a:	e03d      	b.n	80045b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d107      	bne.n	8004554 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e038      	b.n	80045ba <HAL_RCC_OscConfig+0x4e2>
 8004548:	40023800 	.word	0x40023800
 800454c:	40007000 	.word	0x40007000
 8004550:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004554:	4b1b      	ldr	r3, [pc, #108]	; (80045c4 <HAL_RCC_OscConfig+0x4ec>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d028      	beq.n	80045b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800456c:	429a      	cmp	r2, r3
 800456e:	d121      	bne.n	80045b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800457a:	429a      	cmp	r2, r3
 800457c:	d11a      	bne.n	80045b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004584:	4013      	ands	r3, r2
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800458a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800458c:	4293      	cmp	r3, r2
 800458e:	d111      	bne.n	80045b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459a:	085b      	lsrs	r3, r3, #1
 800459c:	3b01      	subs	r3, #1
 800459e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d107      	bne.n	80045b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d001      	beq.n	80045b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e000      	b.n	80045ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3718      	adds	r7, #24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	40023800 	.word	0x40023800

080045c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d101      	bne.n	80045dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e0cc      	b.n	8004776 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045dc:	4b68      	ldr	r3, [pc, #416]	; (8004780 <HAL_RCC_ClockConfig+0x1b8>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0307 	and.w	r3, r3, #7
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d90c      	bls.n	8004604 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ea:	4b65      	ldr	r3, [pc, #404]	; (8004780 <HAL_RCC_ClockConfig+0x1b8>)
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045f2:	4b63      	ldr	r3, [pc, #396]	; (8004780 <HAL_RCC_ClockConfig+0x1b8>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d001      	beq.n	8004604 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e0b8      	b.n	8004776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d020      	beq.n	8004652 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b00      	cmp	r3, #0
 800461a:	d005      	beq.n	8004628 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800461c:	4b59      	ldr	r3, [pc, #356]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	4a58      	ldr	r2, [pc, #352]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 8004622:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004626:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0308 	and.w	r3, r3, #8
 8004630:	2b00      	cmp	r3, #0
 8004632:	d005      	beq.n	8004640 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004634:	4b53      	ldr	r3, [pc, #332]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	4a52      	ldr	r2, [pc, #328]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 800463a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800463e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004640:	4b50      	ldr	r3, [pc, #320]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	494d      	ldr	r1, [pc, #308]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 800464e:	4313      	orrs	r3, r2
 8004650:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	d044      	beq.n	80046e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d107      	bne.n	8004676 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004666:	4b47      	ldr	r3, [pc, #284]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d119      	bne.n	80046a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e07f      	b.n	8004776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	2b02      	cmp	r3, #2
 800467c:	d003      	beq.n	8004686 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004682:	2b03      	cmp	r3, #3
 8004684:	d107      	bne.n	8004696 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004686:	4b3f      	ldr	r3, [pc, #252]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d109      	bne.n	80046a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e06f      	b.n	8004776 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004696:	4b3b      	ldr	r3, [pc, #236]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e067      	b.n	8004776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046a6:	4b37      	ldr	r3, [pc, #220]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f023 0203 	bic.w	r2, r3, #3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	4934      	ldr	r1, [pc, #208]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046b8:	f7fd fff8 	bl	80026ac <HAL_GetTick>
 80046bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046be:	e00a      	b.n	80046d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046c0:	f7fd fff4 	bl	80026ac <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e04f      	b.n	8004776 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046d6:	4b2b      	ldr	r3, [pc, #172]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f003 020c 	and.w	r2, r3, #12
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d1eb      	bne.n	80046c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046e8:	4b25      	ldr	r3, [pc, #148]	; (8004780 <HAL_RCC_ClockConfig+0x1b8>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0307 	and.w	r3, r3, #7
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d20c      	bcs.n	8004710 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046f6:	4b22      	ldr	r3, [pc, #136]	; (8004780 <HAL_RCC_ClockConfig+0x1b8>)
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	b2d2      	uxtb	r2, r2
 80046fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046fe:	4b20      	ldr	r3, [pc, #128]	; (8004780 <HAL_RCC_ClockConfig+0x1b8>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	683a      	ldr	r2, [r7, #0]
 8004708:	429a      	cmp	r2, r3
 800470a:	d001      	beq.n	8004710 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e032      	b.n	8004776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b00      	cmp	r3, #0
 800471a:	d008      	beq.n	800472e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800471c:	4b19      	ldr	r3, [pc, #100]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	4916      	ldr	r1, [pc, #88]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 800472a:	4313      	orrs	r3, r2
 800472c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	2b00      	cmp	r3, #0
 8004738:	d009      	beq.n	800474e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800473a:	4b12      	ldr	r3, [pc, #72]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	490e      	ldr	r1, [pc, #56]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 800474a:	4313      	orrs	r3, r2
 800474c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800474e:	f000 f821 	bl	8004794 <HAL_RCC_GetSysClockFreq>
 8004752:	4602      	mov	r2, r0
 8004754:	4b0b      	ldr	r3, [pc, #44]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	091b      	lsrs	r3, r3, #4
 800475a:	f003 030f 	and.w	r3, r3, #15
 800475e:	490a      	ldr	r1, [pc, #40]	; (8004788 <HAL_RCC_ClockConfig+0x1c0>)
 8004760:	5ccb      	ldrb	r3, [r1, r3]
 8004762:	fa22 f303 	lsr.w	r3, r2, r3
 8004766:	4a09      	ldr	r2, [pc, #36]	; (800478c <HAL_RCC_ClockConfig+0x1c4>)
 8004768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800476a:	4b09      	ldr	r3, [pc, #36]	; (8004790 <HAL_RCC_ClockConfig+0x1c8>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4618      	mov	r0, r3
 8004770:	f7fd ff58 	bl	8002624 <HAL_InitTick>

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	40023c00 	.word	0x40023c00
 8004784:	40023800 	.word	0x40023800
 8004788:	08006af0 	.word	0x08006af0
 800478c:	20000024 	.word	0x20000024
 8004790:	20000028 	.word	0x20000028

08004794 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004798:	b090      	sub	sp, #64	; 0x40
 800479a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	637b      	str	r3, [r7, #52]	; 0x34
 80047a0:	2300      	movs	r3, #0
 80047a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047a4:	2300      	movs	r3, #0
 80047a6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047ac:	4b59      	ldr	r3, [pc, #356]	; (8004914 <HAL_RCC_GetSysClockFreq+0x180>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f003 030c 	and.w	r3, r3, #12
 80047b4:	2b08      	cmp	r3, #8
 80047b6:	d00d      	beq.n	80047d4 <HAL_RCC_GetSysClockFreq+0x40>
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	f200 80a1 	bhi.w	8004900 <HAL_RCC_GetSysClockFreq+0x16c>
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <HAL_RCC_GetSysClockFreq+0x34>
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	d003      	beq.n	80047ce <HAL_RCC_GetSysClockFreq+0x3a>
 80047c6:	e09b      	b.n	8004900 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047c8:	4b53      	ldr	r3, [pc, #332]	; (8004918 <HAL_RCC_GetSysClockFreq+0x184>)
 80047ca:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80047cc:	e09b      	b.n	8004906 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047ce:	4b53      	ldr	r3, [pc, #332]	; (800491c <HAL_RCC_GetSysClockFreq+0x188>)
 80047d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047d2:	e098      	b.n	8004906 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047d4:	4b4f      	ldr	r3, [pc, #316]	; (8004914 <HAL_RCC_GetSysClockFreq+0x180>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047dc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047de:	4b4d      	ldr	r3, [pc, #308]	; (8004914 <HAL_RCC_GetSysClockFreq+0x180>)
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d028      	beq.n	800483c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047ea:	4b4a      	ldr	r3, [pc, #296]	; (8004914 <HAL_RCC_GetSysClockFreq+0x180>)
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	099b      	lsrs	r3, r3, #6
 80047f0:	2200      	movs	r2, #0
 80047f2:	623b      	str	r3, [r7, #32]
 80047f4:	627a      	str	r2, [r7, #36]	; 0x24
 80047f6:	6a3b      	ldr	r3, [r7, #32]
 80047f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80047fc:	2100      	movs	r1, #0
 80047fe:	4b47      	ldr	r3, [pc, #284]	; (800491c <HAL_RCC_GetSysClockFreq+0x188>)
 8004800:	fb03 f201 	mul.w	r2, r3, r1
 8004804:	2300      	movs	r3, #0
 8004806:	fb00 f303 	mul.w	r3, r0, r3
 800480a:	4413      	add	r3, r2
 800480c:	4a43      	ldr	r2, [pc, #268]	; (800491c <HAL_RCC_GetSysClockFreq+0x188>)
 800480e:	fba0 1202 	umull	r1, r2, r0, r2
 8004812:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004814:	460a      	mov	r2, r1
 8004816:	62ba      	str	r2, [r7, #40]	; 0x28
 8004818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800481a:	4413      	add	r3, r2
 800481c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800481e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004820:	2200      	movs	r2, #0
 8004822:	61bb      	str	r3, [r7, #24]
 8004824:	61fa      	str	r2, [r7, #28]
 8004826:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800482a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800482e:	f7fc f999 	bl	8000b64 <__aeabi_uldivmod>
 8004832:	4602      	mov	r2, r0
 8004834:	460b      	mov	r3, r1
 8004836:	4613      	mov	r3, r2
 8004838:	63fb      	str	r3, [r7, #60]	; 0x3c
 800483a:	e053      	b.n	80048e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800483c:	4b35      	ldr	r3, [pc, #212]	; (8004914 <HAL_RCC_GetSysClockFreq+0x180>)
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	099b      	lsrs	r3, r3, #6
 8004842:	2200      	movs	r2, #0
 8004844:	613b      	str	r3, [r7, #16]
 8004846:	617a      	str	r2, [r7, #20]
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800484e:	f04f 0b00 	mov.w	fp, #0
 8004852:	4652      	mov	r2, sl
 8004854:	465b      	mov	r3, fp
 8004856:	f04f 0000 	mov.w	r0, #0
 800485a:	f04f 0100 	mov.w	r1, #0
 800485e:	0159      	lsls	r1, r3, #5
 8004860:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004864:	0150      	lsls	r0, r2, #5
 8004866:	4602      	mov	r2, r0
 8004868:	460b      	mov	r3, r1
 800486a:	ebb2 080a 	subs.w	r8, r2, sl
 800486e:	eb63 090b 	sbc.w	r9, r3, fp
 8004872:	f04f 0200 	mov.w	r2, #0
 8004876:	f04f 0300 	mov.w	r3, #0
 800487a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800487e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004882:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004886:	ebb2 0408 	subs.w	r4, r2, r8
 800488a:	eb63 0509 	sbc.w	r5, r3, r9
 800488e:	f04f 0200 	mov.w	r2, #0
 8004892:	f04f 0300 	mov.w	r3, #0
 8004896:	00eb      	lsls	r3, r5, #3
 8004898:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800489c:	00e2      	lsls	r2, r4, #3
 800489e:	4614      	mov	r4, r2
 80048a0:	461d      	mov	r5, r3
 80048a2:	eb14 030a 	adds.w	r3, r4, sl
 80048a6:	603b      	str	r3, [r7, #0]
 80048a8:	eb45 030b 	adc.w	r3, r5, fp
 80048ac:	607b      	str	r3, [r7, #4]
 80048ae:	f04f 0200 	mov.w	r2, #0
 80048b2:	f04f 0300 	mov.w	r3, #0
 80048b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048ba:	4629      	mov	r1, r5
 80048bc:	028b      	lsls	r3, r1, #10
 80048be:	4621      	mov	r1, r4
 80048c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048c4:	4621      	mov	r1, r4
 80048c6:	028a      	lsls	r2, r1, #10
 80048c8:	4610      	mov	r0, r2
 80048ca:	4619      	mov	r1, r3
 80048cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ce:	2200      	movs	r2, #0
 80048d0:	60bb      	str	r3, [r7, #8]
 80048d2:	60fa      	str	r2, [r7, #12]
 80048d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048d8:	f7fc f944 	bl	8000b64 <__aeabi_uldivmod>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4613      	mov	r3, r2
 80048e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048e4:	4b0b      	ldr	r3, [pc, #44]	; (8004914 <HAL_RCC_GetSysClockFreq+0x180>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	0c1b      	lsrs	r3, r3, #16
 80048ea:	f003 0303 	and.w	r3, r3, #3
 80048ee:	3301      	adds	r3, #1
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80048f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80048fe:	e002      	b.n	8004906 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004900:	4b05      	ldr	r3, [pc, #20]	; (8004918 <HAL_RCC_GetSysClockFreq+0x184>)
 8004902:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004904:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004908:	4618      	mov	r0, r3
 800490a:	3740      	adds	r7, #64	; 0x40
 800490c:	46bd      	mov	sp, r7
 800490e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004912:	bf00      	nop
 8004914:	40023800 	.word	0x40023800
 8004918:	00f42400 	.word	0x00f42400
 800491c:	017d7840 	.word	0x017d7840

08004920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004920:	b480      	push	{r7}
 8004922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004924:	4b03      	ldr	r3, [pc, #12]	; (8004934 <HAL_RCC_GetHCLKFreq+0x14>)
 8004926:	681b      	ldr	r3, [r3, #0]
}
 8004928:	4618      	mov	r0, r3
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	20000024 	.word	0x20000024

08004938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800493c:	f7ff fff0 	bl	8004920 <HAL_RCC_GetHCLKFreq>
 8004940:	4602      	mov	r2, r0
 8004942:	4b05      	ldr	r3, [pc, #20]	; (8004958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	0a9b      	lsrs	r3, r3, #10
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	4903      	ldr	r1, [pc, #12]	; (800495c <HAL_RCC_GetPCLK1Freq+0x24>)
 800494e:	5ccb      	ldrb	r3, [r1, r3]
 8004950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004954:	4618      	mov	r0, r3
 8004956:	bd80      	pop	{r7, pc}
 8004958:	40023800 	.word	0x40023800
 800495c:	08006b00 	.word	0x08006b00

08004960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004964:	f7ff ffdc 	bl	8004920 <HAL_RCC_GetHCLKFreq>
 8004968:	4602      	mov	r2, r0
 800496a:	4b05      	ldr	r3, [pc, #20]	; (8004980 <HAL_RCC_GetPCLK2Freq+0x20>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	0b5b      	lsrs	r3, r3, #13
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	4903      	ldr	r1, [pc, #12]	; (8004984 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004976:	5ccb      	ldrb	r3, [r1, r3]
 8004978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800497c:	4618      	mov	r0, r3
 800497e:	bd80      	pop	{r7, pc}
 8004980:	40023800 	.word	0x40023800
 8004984:	08006b00 	.word	0x08006b00

08004988 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e041      	b.n	8004a1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d106      	bne.n	80049b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f7fd fc3e 	bl	8002230 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2202      	movs	r2, #2
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	3304      	adds	r3, #4
 80049c4:	4619      	mov	r1, r3
 80049c6:	4610      	mov	r0, r2
 80049c8:	f000 fbea 	bl	80051a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b082      	sub	sp, #8
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e041      	b.n	8004abc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d106      	bne.n	8004a52 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f7fd fb25 	bl	800209c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2202      	movs	r2, #2
 8004a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	3304      	adds	r3, #4
 8004a62:	4619      	mov	r1, r3
 8004a64:	4610      	mov	r0, r2
 8004a66:	f000 fb9b 	bl	80051a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3708      	adds	r7, #8
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d109      	bne.n	8004ae8 <HAL_TIM_PWM_Start+0x24>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	bf14      	ite	ne
 8004ae0:	2301      	movne	r3, #1
 8004ae2:	2300      	moveq	r3, #0
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	e022      	b.n	8004b2e <HAL_TIM_PWM_Start+0x6a>
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	d109      	bne.n	8004b02 <HAL_TIM_PWM_Start+0x3e>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	bf14      	ite	ne
 8004afa:	2301      	movne	r3, #1
 8004afc:	2300      	moveq	r3, #0
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	e015      	b.n	8004b2e <HAL_TIM_PWM_Start+0x6a>
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b08      	cmp	r3, #8
 8004b06:	d109      	bne.n	8004b1c <HAL_TIM_PWM_Start+0x58>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	bf14      	ite	ne
 8004b14:	2301      	movne	r3, #1
 8004b16:	2300      	moveq	r3, #0
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	e008      	b.n	8004b2e <HAL_TIM_PWM_Start+0x6a>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	bf14      	ite	ne
 8004b28:	2301      	movne	r3, #1
 8004b2a:	2300      	moveq	r3, #0
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d001      	beq.n	8004b36 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e068      	b.n	8004c08 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d104      	bne.n	8004b46 <HAL_TIM_PWM_Start+0x82>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b44:	e013      	b.n	8004b6e <HAL_TIM_PWM_Start+0xaa>
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	2b04      	cmp	r3, #4
 8004b4a:	d104      	bne.n	8004b56 <HAL_TIM_PWM_Start+0x92>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b54:	e00b      	b.n	8004b6e <HAL_TIM_PWM_Start+0xaa>
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b08      	cmp	r3, #8
 8004b5a:	d104      	bne.n	8004b66 <HAL_TIM_PWM_Start+0xa2>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2202      	movs	r2, #2
 8004b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b64:	e003      	b.n	8004b6e <HAL_TIM_PWM_Start+0xaa>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2202      	movs	r2, #2
 8004b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2201      	movs	r2, #1
 8004b74:	6839      	ldr	r1, [r7, #0]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 fdc4 	bl	8005704 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a23      	ldr	r2, [pc, #140]	; (8004c10 <HAL_TIM_PWM_Start+0x14c>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d107      	bne.n	8004b96 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a1d      	ldr	r2, [pc, #116]	; (8004c10 <HAL_TIM_PWM_Start+0x14c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d018      	beq.n	8004bd2 <HAL_TIM_PWM_Start+0x10e>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ba8:	d013      	beq.n	8004bd2 <HAL_TIM_PWM_Start+0x10e>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a19      	ldr	r2, [pc, #100]	; (8004c14 <HAL_TIM_PWM_Start+0x150>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d00e      	beq.n	8004bd2 <HAL_TIM_PWM_Start+0x10e>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a17      	ldr	r2, [pc, #92]	; (8004c18 <HAL_TIM_PWM_Start+0x154>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d009      	beq.n	8004bd2 <HAL_TIM_PWM_Start+0x10e>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a16      	ldr	r2, [pc, #88]	; (8004c1c <HAL_TIM_PWM_Start+0x158>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d004      	beq.n	8004bd2 <HAL_TIM_PWM_Start+0x10e>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a14      	ldr	r2, [pc, #80]	; (8004c20 <HAL_TIM_PWM_Start+0x15c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d111      	bne.n	8004bf6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f003 0307 	and.w	r3, r3, #7
 8004bdc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2b06      	cmp	r3, #6
 8004be2:	d010      	beq.n	8004c06 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f042 0201 	orr.w	r2, r2, #1
 8004bf2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bf4:	e007      	b.n	8004c06 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f042 0201 	orr.w	r2, r2, #1
 8004c04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	40010000 	.word	0x40010000
 8004c14:	40000400 	.word	0x40000400
 8004c18:	40000800 	.word	0x40000800
 8004c1c:	40000c00 	.word	0x40000c00
 8004c20:	40014000 	.word	0x40014000

08004c24 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e097      	b.n	8004d68 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d106      	bne.n	8004c52 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f7fd fa71 	bl	8002134 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2202      	movs	r2, #2
 8004c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	6812      	ldr	r2, [r2, #0]
 8004c64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c68:	f023 0307 	bic.w	r3, r3, #7
 8004c6c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	3304      	adds	r3, #4
 8004c76:	4619      	mov	r1, r3
 8004c78:	4610      	mov	r0, r2
 8004c7a:	f000 fa91 	bl	80051a0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ca6:	f023 0303 	bic.w	r3, r3, #3
 8004caa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	021b      	lsls	r3, r3, #8
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004cc4:	f023 030c 	bic.w	r3, r3, #12
 8004cc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cd0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	68da      	ldr	r2, [r3, #12]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	021b      	lsls	r3, r3, #8
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	011a      	lsls	r2, r3, #4
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	031b      	lsls	r3, r3, #12
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004d02:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004d0a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	011b      	lsls	r3, r3, #4
 8004d16:	4313      	orrs	r3, r2
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3718      	adds	r7, #24
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d80:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d88:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d90:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d98:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d110      	bne.n	8004dc2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004da0:	7bfb      	ldrb	r3, [r7, #15]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d102      	bne.n	8004dac <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004da6:	7b7b      	ldrb	r3, [r7, #13]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d001      	beq.n	8004db0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e069      	b.n	8004e84 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2202      	movs	r2, #2
 8004dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dc0:	e031      	b.n	8004e26 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b04      	cmp	r3, #4
 8004dc6:	d110      	bne.n	8004dea <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004dc8:	7bbb      	ldrb	r3, [r7, #14]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d102      	bne.n	8004dd4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004dce:	7b3b      	ldrb	r3, [r7, #12]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d001      	beq.n	8004dd8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e055      	b.n	8004e84 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2202      	movs	r2, #2
 8004ddc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2202      	movs	r2, #2
 8004de4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004de8:	e01d      	b.n	8004e26 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004dea:	7bfb      	ldrb	r3, [r7, #15]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d108      	bne.n	8004e02 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004df0:	7bbb      	ldrb	r3, [r7, #14]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d105      	bne.n	8004e02 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004df6:	7b7b      	ldrb	r3, [r7, #13]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d102      	bne.n	8004e02 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004dfc:	7b3b      	ldrb	r3, [r7, #12]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d001      	beq.n	8004e06 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e03e      	b.n	8004e84 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2202      	movs	r2, #2
 8004e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2202      	movs	r2, #2
 8004e12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2202      	movs	r2, #2
 8004e1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2202      	movs	r2, #2
 8004e22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d003      	beq.n	8004e34 <HAL_TIM_Encoder_Start+0xc4>
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d008      	beq.n	8004e44 <HAL_TIM_Encoder_Start+0xd4>
 8004e32:	e00f      	b.n	8004e54 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 fc61 	bl	8005704 <TIM_CCxChannelCmd>
      break;
 8004e42:	e016      	b.n	8004e72 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	2104      	movs	r1, #4
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 fc59 	bl	8005704 <TIM_CCxChannelCmd>
      break;
 8004e52:	e00e      	b.n	8004e72 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 fc51 	bl	8005704 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2201      	movs	r2, #1
 8004e68:	2104      	movs	r1, #4
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 fc4a 	bl	8005704 <TIM_CCxChannelCmd>
      break;
 8004e70:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f042 0201 	orr.w	r2, r2, #1
 8004e80:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d101      	bne.n	8004eaa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	e0ae      	b.n	8005008 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b0c      	cmp	r3, #12
 8004eb6:	f200 809f 	bhi.w	8004ff8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004eba:	a201      	add	r2, pc, #4	; (adr r2, 8004ec0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec0:	08004ef5 	.word	0x08004ef5
 8004ec4:	08004ff9 	.word	0x08004ff9
 8004ec8:	08004ff9 	.word	0x08004ff9
 8004ecc:	08004ff9 	.word	0x08004ff9
 8004ed0:	08004f35 	.word	0x08004f35
 8004ed4:	08004ff9 	.word	0x08004ff9
 8004ed8:	08004ff9 	.word	0x08004ff9
 8004edc:	08004ff9 	.word	0x08004ff9
 8004ee0:	08004f77 	.word	0x08004f77
 8004ee4:	08004ff9 	.word	0x08004ff9
 8004ee8:	08004ff9 	.word	0x08004ff9
 8004eec:	08004ff9 	.word	0x08004ff9
 8004ef0:	08004fb7 	.word	0x08004fb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68b9      	ldr	r1, [r7, #8]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 f9dc 	bl	80052b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	699a      	ldr	r2, [r3, #24]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f042 0208 	orr.w	r2, r2, #8
 8004f0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	699a      	ldr	r2, [r3, #24]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 0204 	bic.w	r2, r2, #4
 8004f1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6999      	ldr	r1, [r3, #24]
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	691a      	ldr	r2, [r3, #16]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	619a      	str	r2, [r3, #24]
      break;
 8004f32:	e064      	b.n	8004ffe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68b9      	ldr	r1, [r7, #8]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 fa22 	bl	8005384 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	699a      	ldr	r2, [r3, #24]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	699a      	ldr	r2, [r3, #24]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6999      	ldr	r1, [r3, #24]
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	021a      	lsls	r2, r3, #8
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	430a      	orrs	r2, r1
 8004f72:	619a      	str	r2, [r3, #24]
      break;
 8004f74:	e043      	b.n	8004ffe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68b9      	ldr	r1, [r7, #8]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f000 fa6d 	bl	800545c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	69da      	ldr	r2, [r3, #28]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f042 0208 	orr.w	r2, r2, #8
 8004f90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	69da      	ldr	r2, [r3, #28]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f022 0204 	bic.w	r2, r2, #4
 8004fa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	69d9      	ldr	r1, [r3, #28]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	691a      	ldr	r2, [r3, #16]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	61da      	str	r2, [r3, #28]
      break;
 8004fb4:	e023      	b.n	8004ffe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68b9      	ldr	r1, [r7, #8]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 fab7 	bl	8005530 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	69da      	ldr	r2, [r3, #28]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	69da      	ldr	r2, [r3, #28]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	69d9      	ldr	r1, [r3, #28]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	021a      	lsls	r2, r3, #8
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	61da      	str	r2, [r3, #28]
      break;
 8004ff6:	e002      	b.n	8004ffe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	75fb      	strb	r3, [r7, #23]
      break;
 8004ffc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005006:	7dfb      	ldrb	r3, [r7, #23]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3718      	adds	r7, #24
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800501a:	2300      	movs	r3, #0
 800501c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005024:	2b01      	cmp	r3, #1
 8005026:	d101      	bne.n	800502c <HAL_TIM_ConfigClockSource+0x1c>
 8005028:	2302      	movs	r3, #2
 800502a:	e0b4      	b.n	8005196 <HAL_TIM_ConfigClockSource+0x186>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2202      	movs	r2, #2
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800504a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005052:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005064:	d03e      	beq.n	80050e4 <HAL_TIM_ConfigClockSource+0xd4>
 8005066:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800506a:	f200 8087 	bhi.w	800517c <HAL_TIM_ConfigClockSource+0x16c>
 800506e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005072:	f000 8086 	beq.w	8005182 <HAL_TIM_ConfigClockSource+0x172>
 8005076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800507a:	d87f      	bhi.n	800517c <HAL_TIM_ConfigClockSource+0x16c>
 800507c:	2b70      	cmp	r3, #112	; 0x70
 800507e:	d01a      	beq.n	80050b6 <HAL_TIM_ConfigClockSource+0xa6>
 8005080:	2b70      	cmp	r3, #112	; 0x70
 8005082:	d87b      	bhi.n	800517c <HAL_TIM_ConfigClockSource+0x16c>
 8005084:	2b60      	cmp	r3, #96	; 0x60
 8005086:	d050      	beq.n	800512a <HAL_TIM_ConfigClockSource+0x11a>
 8005088:	2b60      	cmp	r3, #96	; 0x60
 800508a:	d877      	bhi.n	800517c <HAL_TIM_ConfigClockSource+0x16c>
 800508c:	2b50      	cmp	r3, #80	; 0x50
 800508e:	d03c      	beq.n	800510a <HAL_TIM_ConfigClockSource+0xfa>
 8005090:	2b50      	cmp	r3, #80	; 0x50
 8005092:	d873      	bhi.n	800517c <HAL_TIM_ConfigClockSource+0x16c>
 8005094:	2b40      	cmp	r3, #64	; 0x40
 8005096:	d058      	beq.n	800514a <HAL_TIM_ConfigClockSource+0x13a>
 8005098:	2b40      	cmp	r3, #64	; 0x40
 800509a:	d86f      	bhi.n	800517c <HAL_TIM_ConfigClockSource+0x16c>
 800509c:	2b30      	cmp	r3, #48	; 0x30
 800509e:	d064      	beq.n	800516a <HAL_TIM_ConfigClockSource+0x15a>
 80050a0:	2b30      	cmp	r3, #48	; 0x30
 80050a2:	d86b      	bhi.n	800517c <HAL_TIM_ConfigClockSource+0x16c>
 80050a4:	2b20      	cmp	r3, #32
 80050a6:	d060      	beq.n	800516a <HAL_TIM_ConfigClockSource+0x15a>
 80050a8:	2b20      	cmp	r3, #32
 80050aa:	d867      	bhi.n	800517c <HAL_TIM_ConfigClockSource+0x16c>
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d05c      	beq.n	800516a <HAL_TIM_ConfigClockSource+0x15a>
 80050b0:	2b10      	cmp	r3, #16
 80050b2:	d05a      	beq.n	800516a <HAL_TIM_ConfigClockSource+0x15a>
 80050b4:	e062      	b.n	800517c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050c6:	f000 fafd 	bl	80056c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	609a      	str	r2, [r3, #8]
      break;
 80050e2:	e04f      	b.n	8005184 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050f4:	f000 fae6 	bl	80056c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	689a      	ldr	r2, [r3, #8]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005106:	609a      	str	r2, [r3, #8]
      break;
 8005108:	e03c      	b.n	8005184 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005116:	461a      	mov	r2, r3
 8005118:	f000 fa5a 	bl	80055d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2150      	movs	r1, #80	; 0x50
 8005122:	4618      	mov	r0, r3
 8005124:	f000 fab3 	bl	800568e <TIM_ITRx_SetConfig>
      break;
 8005128:	e02c      	b.n	8005184 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005136:	461a      	mov	r2, r3
 8005138:	f000 fa79 	bl	800562e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2160      	movs	r1, #96	; 0x60
 8005142:	4618      	mov	r0, r3
 8005144:	f000 faa3 	bl	800568e <TIM_ITRx_SetConfig>
      break;
 8005148:	e01c      	b.n	8005184 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005156:	461a      	mov	r2, r3
 8005158:	f000 fa3a 	bl	80055d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2140      	movs	r1, #64	; 0x40
 8005162:	4618      	mov	r0, r3
 8005164:	f000 fa93 	bl	800568e <TIM_ITRx_SetConfig>
      break;
 8005168:	e00c      	b.n	8005184 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4619      	mov	r1, r3
 8005174:	4610      	mov	r0, r2
 8005176:	f000 fa8a 	bl	800568e <TIM_ITRx_SetConfig>
      break;
 800517a:	e003      	b.n	8005184 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	73fb      	strb	r3, [r7, #15]
      break;
 8005180:	e000      	b.n	8005184 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005182:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005194:	7bfb      	ldrb	r3, [r7, #15]
}
 8005196:	4618      	mov	r0, r3
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
	...

080051a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a3a      	ldr	r2, [pc, #232]	; (800529c <TIM_Base_SetConfig+0xfc>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d00f      	beq.n	80051d8 <TIM_Base_SetConfig+0x38>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051be:	d00b      	beq.n	80051d8 <TIM_Base_SetConfig+0x38>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a37      	ldr	r2, [pc, #220]	; (80052a0 <TIM_Base_SetConfig+0x100>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d007      	beq.n	80051d8 <TIM_Base_SetConfig+0x38>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a36      	ldr	r2, [pc, #216]	; (80052a4 <TIM_Base_SetConfig+0x104>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d003      	beq.n	80051d8 <TIM_Base_SetConfig+0x38>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a35      	ldr	r2, [pc, #212]	; (80052a8 <TIM_Base_SetConfig+0x108>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d108      	bne.n	80051ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a2b      	ldr	r2, [pc, #172]	; (800529c <TIM_Base_SetConfig+0xfc>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d01b      	beq.n	800522a <TIM_Base_SetConfig+0x8a>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f8:	d017      	beq.n	800522a <TIM_Base_SetConfig+0x8a>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a28      	ldr	r2, [pc, #160]	; (80052a0 <TIM_Base_SetConfig+0x100>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d013      	beq.n	800522a <TIM_Base_SetConfig+0x8a>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a27      	ldr	r2, [pc, #156]	; (80052a4 <TIM_Base_SetConfig+0x104>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d00f      	beq.n	800522a <TIM_Base_SetConfig+0x8a>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a26      	ldr	r2, [pc, #152]	; (80052a8 <TIM_Base_SetConfig+0x108>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d00b      	beq.n	800522a <TIM_Base_SetConfig+0x8a>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a25      	ldr	r2, [pc, #148]	; (80052ac <TIM_Base_SetConfig+0x10c>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d007      	beq.n	800522a <TIM_Base_SetConfig+0x8a>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a24      	ldr	r2, [pc, #144]	; (80052b0 <TIM_Base_SetConfig+0x110>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d003      	beq.n	800522a <TIM_Base_SetConfig+0x8a>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a23      	ldr	r2, [pc, #140]	; (80052b4 <TIM_Base_SetConfig+0x114>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d108      	bne.n	800523c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	4313      	orrs	r3, r2
 800523a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	4313      	orrs	r3, r2
 8005248:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	689a      	ldr	r2, [r3, #8]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a0e      	ldr	r2, [pc, #56]	; (800529c <TIM_Base_SetConfig+0xfc>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d103      	bne.n	8005270 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	691a      	ldr	r2, [r3, #16]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b01      	cmp	r3, #1
 8005280:	d105      	bne.n	800528e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	f023 0201 	bic.w	r2, r3, #1
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	611a      	str	r2, [r3, #16]
  }
}
 800528e:	bf00      	nop
 8005290:	3714      	adds	r7, #20
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	40010000 	.word	0x40010000
 80052a0:	40000400 	.word	0x40000400
 80052a4:	40000800 	.word	0x40000800
 80052a8:	40000c00 	.word	0x40000c00
 80052ac:	40014000 	.word	0x40014000
 80052b0:	40014400 	.word	0x40014400
 80052b4:	40014800 	.word	0x40014800

080052b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b087      	sub	sp, #28
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	f023 0201 	bic.w	r2, r3, #1
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f023 0303 	bic.w	r3, r3, #3
 80052ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f023 0302 	bic.w	r3, r3, #2
 8005300:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	4313      	orrs	r3, r2
 800530a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a1c      	ldr	r2, [pc, #112]	; (8005380 <TIM_OC1_SetConfig+0xc8>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d10c      	bne.n	800532e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	f023 0308 	bic.w	r3, r3, #8
 800531a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	4313      	orrs	r3, r2
 8005324:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f023 0304 	bic.w	r3, r3, #4
 800532c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a13      	ldr	r2, [pc, #76]	; (8005380 <TIM_OC1_SetConfig+0xc8>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d111      	bne.n	800535a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800533c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005344:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	4313      	orrs	r3, r2
 800534e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	4313      	orrs	r3, r2
 8005358:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685a      	ldr	r2, [r3, #4]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	621a      	str	r2, [r3, #32]
}
 8005374:	bf00      	nop
 8005376:	371c      	adds	r7, #28
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	40010000 	.word	0x40010000

08005384 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005384:	b480      	push	{r7}
 8005386:	b087      	sub	sp, #28
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	f023 0210 	bic.w	r2, r3, #16
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	021b      	lsls	r3, r3, #8
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	f023 0320 	bic.w	r3, r3, #32
 80053ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	011b      	lsls	r3, r3, #4
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	4313      	orrs	r3, r2
 80053da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a1e      	ldr	r2, [pc, #120]	; (8005458 <TIM_OC2_SetConfig+0xd4>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d10d      	bne.n	8005400 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	011b      	lsls	r3, r3, #4
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a15      	ldr	r2, [pc, #84]	; (8005458 <TIM_OC2_SetConfig+0xd4>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d113      	bne.n	8005430 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800540e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005416:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	695b      	ldr	r3, [r3, #20]
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	4313      	orrs	r3, r2
 8005422:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	4313      	orrs	r3, r2
 800542e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	621a      	str	r2, [r3, #32]
}
 800544a:	bf00      	nop
 800544c:	371c      	adds	r7, #28
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	40010000 	.word	0x40010000

0800545c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800545c:	b480      	push	{r7}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f023 0303 	bic.w	r3, r3, #3
 8005492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	4313      	orrs	r3, r2
 800549c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	021b      	lsls	r3, r3, #8
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a1d      	ldr	r2, [pc, #116]	; (800552c <TIM_OC3_SetConfig+0xd0>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d10d      	bne.n	80054d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	021b      	lsls	r3, r3, #8
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a14      	ldr	r2, [pc, #80]	; (800552c <TIM_OC3_SetConfig+0xd0>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d113      	bne.n	8005506 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	011b      	lsls	r3, r3, #4
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	011b      	lsls	r3, r3, #4
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	4313      	orrs	r3, r2
 8005504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	621a      	str	r2, [r3, #32]
}
 8005520:	bf00      	nop
 8005522:	371c      	adds	r7, #28
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	40010000 	.word	0x40010000

08005530 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005530:	b480      	push	{r7}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a1b      	ldr	r3, [r3, #32]
 8005544:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	69db      	ldr	r3, [r3, #28]
 8005556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800555e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005566:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	021b      	lsls	r3, r3, #8
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	4313      	orrs	r3, r2
 8005572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800557a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	031b      	lsls	r3, r3, #12
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	4313      	orrs	r3, r2
 8005586:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a10      	ldr	r2, [pc, #64]	; (80055cc <TIM_OC4_SetConfig+0x9c>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d109      	bne.n	80055a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005596:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	019b      	lsls	r3, r3, #6
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	621a      	str	r2, [r3, #32]
}
 80055be:	bf00      	nop
 80055c0:	371c      	adds	r7, #28
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	40010000 	.word	0x40010000

080055d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6a1b      	ldr	r3, [r3, #32]
 80055e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6a1b      	ldr	r3, [r3, #32]
 80055e6:	f023 0201 	bic.w	r2, r3, #1
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	011b      	lsls	r3, r3, #4
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	4313      	orrs	r3, r2
 8005604:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f023 030a 	bic.w	r3, r3, #10
 800560c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	4313      	orrs	r3, r2
 8005614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	621a      	str	r2, [r3, #32]
}
 8005622:	bf00      	nop
 8005624:	371c      	adds	r7, #28
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800562e:	b480      	push	{r7}
 8005630:	b087      	sub	sp, #28
 8005632:	af00      	add	r7, sp, #0
 8005634:	60f8      	str	r0, [r7, #12]
 8005636:	60b9      	str	r1, [r7, #8]
 8005638:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	f023 0210 	bic.w	r2, r3, #16
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005658:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	031b      	lsls	r3, r3, #12
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	4313      	orrs	r3, r2
 8005662:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800566a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	011b      	lsls	r3, r3, #4
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	4313      	orrs	r3, r2
 8005674:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	621a      	str	r2, [r3, #32]
}
 8005682:	bf00      	nop
 8005684:	371c      	adds	r7, #28
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr

0800568e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800568e:	b480      	push	{r7}
 8005690:	b085      	sub	sp, #20
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
 8005696:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	f043 0307 	orr.w	r3, r3, #7
 80056b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	609a      	str	r2, [r3, #8]
}
 80056b8:	bf00      	nop
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b087      	sub	sp, #28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
 80056d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	021a      	lsls	r2, r3, #8
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	431a      	orrs	r2, r3
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	609a      	str	r2, [r3, #8]
}
 80056f8:	bf00      	nop
 80056fa:	371c      	adds	r7, #28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005704:	b480      	push	{r7}
 8005706:	b087      	sub	sp, #28
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	f003 031f 	and.w	r3, r3, #31
 8005716:	2201      	movs	r2, #1
 8005718:	fa02 f303 	lsl.w	r3, r2, r3
 800571c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6a1a      	ldr	r2, [r3, #32]
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	43db      	mvns	r3, r3
 8005726:	401a      	ands	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6a1a      	ldr	r2, [r3, #32]
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	f003 031f 	and.w	r3, r3, #31
 8005736:	6879      	ldr	r1, [r7, #4]
 8005738:	fa01 f303 	lsl.w	r3, r1, r3
 800573c:	431a      	orrs	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	621a      	str	r2, [r3, #32]
}
 8005742:	bf00      	nop
 8005744:	371c      	adds	r7, #28
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
	...

08005750 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005760:	2b01      	cmp	r3, #1
 8005762:	d101      	bne.n	8005768 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005764:	2302      	movs	r3, #2
 8005766:	e050      	b.n	800580a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2202      	movs	r2, #2
 8005774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800578e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	4313      	orrs	r3, r2
 8005798:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a1c      	ldr	r2, [pc, #112]	; (8005818 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d018      	beq.n	80057de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b4:	d013      	beq.n	80057de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a18      	ldr	r2, [pc, #96]	; (800581c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d00e      	beq.n	80057de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a16      	ldr	r2, [pc, #88]	; (8005820 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d009      	beq.n	80057de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a15      	ldr	r2, [pc, #84]	; (8005824 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d004      	beq.n	80057de <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a13      	ldr	r2, [pc, #76]	; (8005828 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d10c      	bne.n	80057f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	40010000 	.word	0x40010000
 800581c:	40000400 	.word	0x40000400
 8005820:	40000800 	.word	0x40000800
 8005824:	40000c00 	.word	0x40000c00
 8005828:	40014000 	.word	0x40014000

0800582c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005836:	2300      	movs	r3, #0
 8005838:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005840:	2b01      	cmp	r3, #1
 8005842:	d101      	bne.n	8005848 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005844:	2302      	movs	r3, #2
 8005846:	e03d      	b.n	80058c4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	4313      	orrs	r3, r2
 800585c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	4313      	orrs	r3, r2
 800586a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	4313      	orrs	r3, r2
 8005878:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4313      	orrs	r3, r2
 8005886:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	69db      	ldr	r3, [r3, #28]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3714      	adds	r7, #20
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e042      	b.n	8005968 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d106      	bne.n	80058fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7fc fdb2 	bl	8002460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2224      	movs	r2, #36	; 0x24
 8005900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68da      	ldr	r2, [r3, #12]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005912:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 fdbd 	bl	8006494 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	691a      	ldr	r2, [r3, #16]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005928:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	695a      	ldr	r2, [r3, #20]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005938:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68da      	ldr	r2, [r3, #12]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005948:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2220      	movs	r2, #32
 8005954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2220      	movs	r2, #32
 800595c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3708      	adds	r7, #8
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b08a      	sub	sp, #40	; 0x28
 8005974:	af02      	add	r7, sp, #8
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	603b      	str	r3, [r7, #0]
 800597c:	4613      	mov	r3, r2
 800597e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005980:	2300      	movs	r3, #0
 8005982:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b20      	cmp	r3, #32
 800598e:	d175      	bne.n	8005a7c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d002      	beq.n	800599c <HAL_UART_Transmit+0x2c>
 8005996:	88fb      	ldrh	r3, [r7, #6]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e06e      	b.n	8005a7e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2221      	movs	r2, #33	; 0x21
 80059aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059ae:	f7fc fe7d 	bl	80026ac <HAL_GetTick>
 80059b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	88fa      	ldrh	r2, [r7, #6]
 80059b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	88fa      	ldrh	r2, [r7, #6]
 80059be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059c8:	d108      	bne.n	80059dc <HAL_UART_Transmit+0x6c>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d104      	bne.n	80059dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80059d2:	2300      	movs	r3, #0
 80059d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	61bb      	str	r3, [r7, #24]
 80059da:	e003      	b.n	80059e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059e0:	2300      	movs	r3, #0
 80059e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80059e4:	e02e      	b.n	8005a44 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2200      	movs	r2, #0
 80059ee:	2180      	movs	r1, #128	; 0x80
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f000 fb1f 	bl	8006034 <UART_WaitOnFlagUntilTimeout>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d005      	beq.n	8005a08 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2220      	movs	r2, #32
 8005a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e03a      	b.n	8005a7e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10b      	bne.n	8005a26 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	881b      	ldrh	r3, [r3, #0]
 8005a12:	461a      	mov	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	3302      	adds	r3, #2
 8005a22:	61bb      	str	r3, [r7, #24]
 8005a24:	e007      	b.n	8005a36 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	781a      	ldrb	r2, [r3, #0]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	3301      	adds	r3, #1
 8005a34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1cb      	bne.n	80059e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	9300      	str	r3, [sp, #0]
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	2200      	movs	r2, #0
 8005a56:	2140      	movs	r1, #64	; 0x40
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f000 faeb 	bl	8006034 <UART_WaitOnFlagUntilTimeout>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d005      	beq.n	8005a70 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2220      	movs	r2, #32
 8005a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e006      	b.n	8005a7e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2220      	movs	r2, #32
 8005a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	e000      	b.n	8005a7e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005a7c:	2302      	movs	r3, #2
  }
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3720      	adds	r7, #32
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b084      	sub	sp, #16
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	60f8      	str	r0, [r7, #12]
 8005a8e:	60b9      	str	r1, [r7, #8]
 8005a90:	4613      	mov	r3, r2
 8005a92:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b20      	cmp	r3, #32
 8005a9e:	d112      	bne.n	8005ac6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d002      	beq.n	8005aac <HAL_UART_Receive_IT+0x26>
 8005aa6:	88fb      	ldrh	r3, [r7, #6]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d101      	bne.n	8005ab0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e00b      	b.n	8005ac8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005ab6:	88fb      	ldrh	r3, [r7, #6]
 8005ab8:	461a      	mov	r2, r3
 8005aba:	68b9      	ldr	r1, [r7, #8]
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f000 fb12 	bl	80060e6 <UART_Start_Receive_IT>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	e000      	b.n	8005ac8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005ac6:	2302      	movs	r3, #2
  }
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b0ba      	sub	sp, #232	; 0xe8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005af6:	2300      	movs	r3, #0
 8005af8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005afc:	2300      	movs	r3, #0
 8005afe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b06:	f003 030f 	and.w	r3, r3, #15
 8005b0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005b0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d10f      	bne.n	8005b36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b1a:	f003 0320 	and.w	r3, r3, #32
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d009      	beq.n	8005b36 <HAL_UART_IRQHandler+0x66>
 8005b22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b26:	f003 0320 	and.w	r3, r3, #32
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 fbf2 	bl	8006318 <UART_Receive_IT>
      return;
 8005b34:	e25b      	b.n	8005fee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005b36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	f000 80de 	beq.w	8005cfc <HAL_UART_IRQHandler+0x22c>
 8005b40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b44:	f003 0301 	and.w	r3, r3, #1
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d106      	bne.n	8005b5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b50:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f000 80d1 	beq.w	8005cfc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00b      	beq.n	8005b7e <HAL_UART_IRQHandler+0xae>
 8005b66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d005      	beq.n	8005b7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b76:	f043 0201 	orr.w	r2, r3, #1
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b82:	f003 0304 	and.w	r3, r3, #4
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00b      	beq.n	8005ba2 <HAL_UART_IRQHandler+0xd2>
 8005b8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d005      	beq.n	8005ba2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b9a:	f043 0202 	orr.w	r2, r3, #2
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00b      	beq.n	8005bc6 <HAL_UART_IRQHandler+0xf6>
 8005bae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d005      	beq.n	8005bc6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bbe:	f043 0204 	orr.w	r2, r3, #4
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bca:	f003 0308 	and.w	r3, r3, #8
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d011      	beq.n	8005bf6 <HAL_UART_IRQHandler+0x126>
 8005bd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bd6:	f003 0320 	and.w	r3, r3, #32
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d105      	bne.n	8005bea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005bde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d005      	beq.n	8005bf6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bee:	f043 0208 	orr.w	r2, r3, #8
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f000 81f2 	beq.w	8005fe4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c04:	f003 0320 	and.w	r3, r3, #32
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d008      	beq.n	8005c1e <HAL_UART_IRQHandler+0x14e>
 8005c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c10:	f003 0320 	and.w	r3, r3, #32
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d002      	beq.n	8005c1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 fb7d 	bl	8006318 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	695b      	ldr	r3, [r3, #20]
 8005c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c28:	2b40      	cmp	r3, #64	; 0x40
 8005c2a:	bf0c      	ite	eq
 8005c2c:	2301      	moveq	r3, #1
 8005c2e:	2300      	movne	r3, #0
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c3a:	f003 0308 	and.w	r3, r3, #8
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d103      	bne.n	8005c4a <HAL_UART_IRQHandler+0x17a>
 8005c42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d04f      	beq.n	8005cea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 fa85 	bl	800615a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c5a:	2b40      	cmp	r3, #64	; 0x40
 8005c5c:	d141      	bne.n	8005ce2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	3314      	adds	r3, #20
 8005c64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c6c:	e853 3f00 	ldrex	r3, [r3]
 8005c70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005c74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	3314      	adds	r3, #20
 8005c86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005c8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005c8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005c96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005c9a:	e841 2300 	strex	r3, r2, [r1]
 8005c9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005ca2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1d9      	bne.n	8005c5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d013      	beq.n	8005cda <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb6:	4a7e      	ldr	r2, [pc, #504]	; (8005eb0 <HAL_UART_IRQHandler+0x3e0>)
 8005cb8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7fc fea5 	bl	8002a0e <HAL_DMA_Abort_IT>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d016      	beq.n	8005cf8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005cd4:	4610      	mov	r0, r2
 8005cd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cd8:	e00e      	b.n	8005cf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f994 	bl	8006008 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ce0:	e00a      	b.n	8005cf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f990 	bl	8006008 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ce8:	e006      	b.n	8005cf8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f98c 	bl	8006008 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005cf6:	e175      	b.n	8005fe4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf8:	bf00      	nop
    return;
 8005cfa:	e173      	b.n	8005fe4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	f040 814f 	bne.w	8005fa4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d0a:	f003 0310 	and.w	r3, r3, #16
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f000 8148 	beq.w	8005fa4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d18:	f003 0310 	and.w	r3, r3, #16
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f000 8141 	beq.w	8005fa4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d22:	2300      	movs	r3, #0
 8005d24:	60bb      	str	r3, [r7, #8]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	60bb      	str	r3, [r7, #8]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	60bb      	str	r3, [r7, #8]
 8005d36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d42:	2b40      	cmp	r3, #64	; 0x40
 8005d44:	f040 80b6 	bne.w	8005eb4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f000 8145 	beq.w	8005fe8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d66:	429a      	cmp	r2, r3
 8005d68:	f080 813e 	bcs.w	8005fe8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d72:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d7e:	f000 8088 	beq.w	8005e92 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	330c      	adds	r3, #12
 8005d88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d90:	e853 3f00 	ldrex	r3, [r3]
 8005d94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005d98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005da0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	330c      	adds	r3, #12
 8005daa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005dae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005db2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005dba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005dbe:	e841 2300 	strex	r3, r2, [r1]
 8005dc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005dc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1d9      	bne.n	8005d82 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	3314      	adds	r3, #20
 8005dd4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dd8:	e853 3f00 	ldrex	r3, [r3]
 8005ddc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005dde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005de0:	f023 0301 	bic.w	r3, r3, #1
 8005de4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	3314      	adds	r3, #20
 8005dee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005df2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005df6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005dfa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005dfe:	e841 2300 	strex	r3, r2, [r1]
 8005e02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1e1      	bne.n	8005dce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	3314      	adds	r3, #20
 8005e10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e14:	e853 3f00 	ldrex	r3, [r3]
 8005e18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	3314      	adds	r3, #20
 8005e2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e36:	e841 2300 	strex	r3, r2, [r1]
 8005e3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005e3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1e3      	bne.n	8005e0a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2220      	movs	r2, #32
 8005e46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	330c      	adds	r3, #12
 8005e56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e5a:	e853 3f00 	ldrex	r3, [r3]
 8005e5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e62:	f023 0310 	bic.w	r3, r3, #16
 8005e66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	330c      	adds	r3, #12
 8005e70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005e74:	65ba      	str	r2, [r7, #88]	; 0x58
 8005e76:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e7c:	e841 2300 	strex	r3, r2, [r1]
 8005e80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005e82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1e3      	bne.n	8005e50 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f7fc fd4e 	bl	800292e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2202      	movs	r2, #2
 8005e96:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 f8b7 	bl	800601c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005eae:	e09b      	b.n	8005fe8 <HAL_UART_IRQHandler+0x518>
 8005eb0:	08006221 	.word	0x08006221
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f000 808e 	beq.w	8005fec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005ed0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f000 8089 	beq.w	8005fec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	330c      	adds	r3, #12
 8005ee0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee4:	e853 3f00 	ldrex	r3, [r3]
 8005ee8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ef0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	330c      	adds	r3, #12
 8005efa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005efe:	647a      	str	r2, [r7, #68]	; 0x44
 8005f00:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f06:	e841 2300 	strex	r3, r2, [r1]
 8005f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1e3      	bne.n	8005eda <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	3314      	adds	r3, #20
 8005f18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	e853 3f00 	ldrex	r3, [r3]
 8005f20:	623b      	str	r3, [r7, #32]
   return(result);
 8005f22:	6a3b      	ldr	r3, [r7, #32]
 8005f24:	f023 0301 	bic.w	r3, r3, #1
 8005f28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	3314      	adds	r3, #20
 8005f32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005f36:	633a      	str	r2, [r7, #48]	; 0x30
 8005f38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f3e:	e841 2300 	strex	r3, r2, [r1]
 8005f42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1e3      	bne.n	8005f12 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	330c      	adds	r3, #12
 8005f5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	e853 3f00 	ldrex	r3, [r3]
 8005f66:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f023 0310 	bic.w	r3, r3, #16
 8005f6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	330c      	adds	r3, #12
 8005f78:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005f7c:	61fa      	str	r2, [r7, #28]
 8005f7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f80:	69b9      	ldr	r1, [r7, #24]
 8005f82:	69fa      	ldr	r2, [r7, #28]
 8005f84:	e841 2300 	strex	r3, r2, [r1]
 8005f88:	617b      	str	r3, [r7, #20]
   return(result);
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1e3      	bne.n	8005f58 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2202      	movs	r2, #2
 8005f94:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 f83d 	bl	800601c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005fa2:	e023      	b.n	8005fec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d009      	beq.n	8005fc4 <HAL_UART_IRQHandler+0x4f4>
 8005fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d003      	beq.n	8005fc4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 f943 	bl	8006248 <UART_Transmit_IT>
    return;
 8005fc2:	e014      	b.n	8005fee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00e      	beq.n	8005fee <HAL_UART_IRQHandler+0x51e>
 8005fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d008      	beq.n	8005fee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 f983 	bl	80062e8 <UART_EndTransmit_IT>
    return;
 8005fe2:	e004      	b.n	8005fee <HAL_UART_IRQHandler+0x51e>
    return;
 8005fe4:	bf00      	nop
 8005fe6:	e002      	b.n	8005fee <HAL_UART_IRQHandler+0x51e>
      return;
 8005fe8:	bf00      	nop
 8005fea:	e000      	b.n	8005fee <HAL_UART_IRQHandler+0x51e>
      return;
 8005fec:	bf00      	nop
  }
}
 8005fee:	37e8      	adds	r7, #232	; 0xe8
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ffc:	bf00      	nop
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	460b      	mov	r3, r1
 8006026:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	603b      	str	r3, [r7, #0]
 8006040:	4613      	mov	r3, r2
 8006042:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006044:	e03b      	b.n	80060be <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006046:	6a3b      	ldr	r3, [r7, #32]
 8006048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800604c:	d037      	beq.n	80060be <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800604e:	f7fc fb2d 	bl	80026ac <HAL_GetTick>
 8006052:	4602      	mov	r2, r0
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	6a3a      	ldr	r2, [r7, #32]
 800605a:	429a      	cmp	r2, r3
 800605c:	d302      	bcc.n	8006064 <UART_WaitOnFlagUntilTimeout+0x30>
 800605e:	6a3b      	ldr	r3, [r7, #32]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d101      	bne.n	8006068 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	e03a      	b.n	80060de <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	f003 0304 	and.w	r3, r3, #4
 8006072:	2b00      	cmp	r3, #0
 8006074:	d023      	beq.n	80060be <UART_WaitOnFlagUntilTimeout+0x8a>
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	2b80      	cmp	r3, #128	; 0x80
 800607a:	d020      	beq.n	80060be <UART_WaitOnFlagUntilTimeout+0x8a>
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	2b40      	cmp	r3, #64	; 0x40
 8006080:	d01d      	beq.n	80060be <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0308 	and.w	r3, r3, #8
 800608c:	2b08      	cmp	r3, #8
 800608e:	d116      	bne.n	80060be <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006090:	2300      	movs	r3, #0
 8006092:	617b      	str	r3, [r7, #20]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	617b      	str	r3, [r7, #20]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	617b      	str	r3, [r7, #20]
 80060a4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f000 f857 	bl	800615a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2208      	movs	r2, #8
 80060b0:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e00f      	b.n	80060de <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	4013      	ands	r3, r2
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	bf0c      	ite	eq
 80060ce:	2301      	moveq	r3, #1
 80060d0:	2300      	movne	r3, #0
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	461a      	mov	r2, r3
 80060d6:	79fb      	ldrb	r3, [r7, #7]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d0b4      	beq.n	8006046 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3718      	adds	r7, #24
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060e6:	b480      	push	{r7}
 80060e8:	b085      	sub	sp, #20
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	60f8      	str	r0, [r7, #12]
 80060ee:	60b9      	str	r1, [r7, #8]
 80060f0:	4613      	mov	r3, r2
 80060f2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	68ba      	ldr	r2, [r7, #8]
 80060f8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	88fa      	ldrh	r2, [r7, #6]
 80060fe:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	88fa      	ldrh	r2, [r7, #6]
 8006104:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2222      	movs	r2, #34	; 0x22
 8006110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d007      	beq.n	800612c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68da      	ldr	r2, [r3, #12]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800612a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	695a      	ldr	r2, [r3, #20]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f042 0201 	orr.w	r2, r2, #1
 800613a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68da      	ldr	r2, [r3, #12]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f042 0220 	orr.w	r2, r2, #32
 800614a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3714      	adds	r7, #20
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800615a:	b480      	push	{r7}
 800615c:	b095      	sub	sp, #84	; 0x54
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	330c      	adds	r3, #12
 8006168:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800616c:	e853 3f00 	ldrex	r3, [r3]
 8006170:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006174:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006178:	64fb      	str	r3, [r7, #76]	; 0x4c
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	330c      	adds	r3, #12
 8006180:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006182:	643a      	str	r2, [r7, #64]	; 0x40
 8006184:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006186:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006188:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800618a:	e841 2300 	strex	r3, r2, [r1]
 800618e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1e5      	bne.n	8006162 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	3314      	adds	r3, #20
 800619c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619e:	6a3b      	ldr	r3, [r7, #32]
 80061a0:	e853 3f00 	ldrex	r3, [r3]
 80061a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	f023 0301 	bic.w	r3, r3, #1
 80061ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	3314      	adds	r3, #20
 80061b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061be:	e841 2300 	strex	r3, r2, [r1]
 80061c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1e5      	bne.n	8006196 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d119      	bne.n	8006206 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	330c      	adds	r3, #12
 80061d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	e853 3f00 	ldrex	r3, [r3]
 80061e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	f023 0310 	bic.w	r3, r3, #16
 80061e8:	647b      	str	r3, [r7, #68]	; 0x44
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	330c      	adds	r3, #12
 80061f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061f2:	61ba      	str	r2, [r7, #24]
 80061f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f6:	6979      	ldr	r1, [r7, #20]
 80061f8:	69ba      	ldr	r2, [r7, #24]
 80061fa:	e841 2300 	strex	r3, r2, [r1]
 80061fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1e5      	bne.n	80061d2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2220      	movs	r2, #32
 800620a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006214:	bf00      	nop
 8006216:	3754      	adds	r7, #84	; 0x54
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f7ff fee4 	bl	8006008 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006240:	bf00      	nop
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006256:	b2db      	uxtb	r3, r3
 8006258:	2b21      	cmp	r3, #33	; 0x21
 800625a:	d13e      	bne.n	80062da <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006264:	d114      	bne.n	8006290 <UART_Transmit_IT+0x48>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d110      	bne.n	8006290 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	881b      	ldrh	r3, [r3, #0]
 8006278:	461a      	mov	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006282:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a1b      	ldr	r3, [r3, #32]
 8006288:	1c9a      	adds	r2, r3, #2
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	621a      	str	r2, [r3, #32]
 800628e:	e008      	b.n	80062a2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a1b      	ldr	r3, [r3, #32]
 8006294:	1c59      	adds	r1, r3, #1
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	6211      	str	r1, [r2, #32]
 800629a:	781a      	ldrb	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	3b01      	subs	r3, #1
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	4619      	mov	r1, r3
 80062b0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10f      	bne.n	80062d6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68da      	ldr	r2, [r3, #12]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062c4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68da      	ldr	r2, [r3, #12]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062d4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80062d6:	2300      	movs	r3, #0
 80062d8:	e000      	b.n	80062dc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80062da:	2302      	movs	r3, #2
  }
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3714      	adds	r7, #20
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68da      	ldr	r2, [r3, #12]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062fe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2220      	movs	r2, #32
 8006304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f7ff fe73 	bl	8005ff4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3708      	adds	r7, #8
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b08c      	sub	sp, #48	; 0x30
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006326:	b2db      	uxtb	r3, r3
 8006328:	2b22      	cmp	r3, #34	; 0x22
 800632a:	f040 80ae 	bne.w	800648a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006336:	d117      	bne.n	8006368 <UART_Receive_IT+0x50>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d113      	bne.n	8006368 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006340:	2300      	movs	r3, #0
 8006342:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006348:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	b29b      	uxth	r3, r3
 8006352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006356:	b29a      	uxth	r2, r3
 8006358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006360:	1c9a      	adds	r2, r3, #2
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	629a      	str	r2, [r3, #40]	; 0x28
 8006366:	e026      	b.n	80063b6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800636c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800636e:	2300      	movs	r3, #0
 8006370:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800637a:	d007      	beq.n	800638c <UART_Receive_IT+0x74>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10a      	bne.n	800639a <UART_Receive_IT+0x82>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d106      	bne.n	800639a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	b2da      	uxtb	r2, r3
 8006394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006396:	701a      	strb	r2, [r3, #0]
 8006398:	e008      	b.n	80063ac <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063a6:	b2da      	uxtb	r2, r3
 80063a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063aa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b0:	1c5a      	adds	r2, r3, #1
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	3b01      	subs	r3, #1
 80063be:	b29b      	uxth	r3, r3
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	4619      	mov	r1, r3
 80063c4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d15d      	bne.n	8006486 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68da      	ldr	r2, [r3, #12]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f022 0220 	bic.w	r2, r2, #32
 80063d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68da      	ldr	r2, [r3, #12]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	695a      	ldr	r2, [r3, #20]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f022 0201 	bic.w	r2, r2, #1
 80063f8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2220      	movs	r2, #32
 80063fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640c:	2b01      	cmp	r3, #1
 800640e:	d135      	bne.n	800647c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	330c      	adds	r3, #12
 800641c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	e853 3f00 	ldrex	r3, [r3]
 8006424:	613b      	str	r3, [r7, #16]
   return(result);
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	f023 0310 	bic.w	r3, r3, #16
 800642c:	627b      	str	r3, [r7, #36]	; 0x24
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	330c      	adds	r3, #12
 8006434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006436:	623a      	str	r2, [r7, #32]
 8006438:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643a:	69f9      	ldr	r1, [r7, #28]
 800643c:	6a3a      	ldr	r2, [r7, #32]
 800643e:	e841 2300 	strex	r3, r2, [r1]
 8006442:	61bb      	str	r3, [r7, #24]
   return(result);
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1e5      	bne.n	8006416 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0310 	and.w	r3, r3, #16
 8006454:	2b10      	cmp	r3, #16
 8006456:	d10a      	bne.n	800646e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006458:	2300      	movs	r3, #0
 800645a:	60fb      	str	r3, [r7, #12]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	60fb      	str	r3, [r7, #12]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	60fb      	str	r3, [r7, #12]
 800646c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006472:	4619      	mov	r1, r3
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f7ff fdd1 	bl	800601c <HAL_UARTEx_RxEventCallback>
 800647a:	e002      	b.n	8006482 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f7fb fb4d 	bl	8001b1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006482:	2300      	movs	r3, #0
 8006484:	e002      	b.n	800648c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006486:	2300      	movs	r3, #0
 8006488:	e000      	b.n	800648c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800648a:	2302      	movs	r3, #2
  }
}
 800648c:	4618      	mov	r0, r3
 800648e:	3730      	adds	r7, #48	; 0x30
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006498:	b0c0      	sub	sp, #256	; 0x100
 800649a:	af00      	add	r7, sp, #0
 800649c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80064ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b0:	68d9      	ldr	r1, [r3, #12]
 80064b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	ea40 0301 	orr.w	r3, r0, r1
 80064bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80064be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c2:	689a      	ldr	r2, [r3, #8]
 80064c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	431a      	orrs	r2, r3
 80064cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	431a      	orrs	r2, r3
 80064d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064d8:	69db      	ldr	r3, [r3, #28]
 80064da:	4313      	orrs	r3, r2
 80064dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80064e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80064ec:	f021 010c 	bic.w	r1, r1, #12
 80064f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064fa:	430b      	orrs	r3, r1
 80064fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800650a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800650e:	6999      	ldr	r1, [r3, #24]
 8006510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	ea40 0301 	orr.w	r3, r0, r1
 800651a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800651c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	4b8f      	ldr	r3, [pc, #572]	; (8006760 <UART_SetConfig+0x2cc>)
 8006524:	429a      	cmp	r2, r3
 8006526:	d005      	beq.n	8006534 <UART_SetConfig+0xa0>
 8006528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	4b8d      	ldr	r3, [pc, #564]	; (8006764 <UART_SetConfig+0x2d0>)
 8006530:	429a      	cmp	r2, r3
 8006532:	d104      	bne.n	800653e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006534:	f7fe fa14 	bl	8004960 <HAL_RCC_GetPCLK2Freq>
 8006538:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800653c:	e003      	b.n	8006546 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800653e:	f7fe f9fb 	bl	8004938 <HAL_RCC_GetPCLK1Freq>
 8006542:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800654a:	69db      	ldr	r3, [r3, #28]
 800654c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006550:	f040 810c 	bne.w	800676c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006554:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006558:	2200      	movs	r2, #0
 800655a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800655e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006562:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006566:	4622      	mov	r2, r4
 8006568:	462b      	mov	r3, r5
 800656a:	1891      	adds	r1, r2, r2
 800656c:	65b9      	str	r1, [r7, #88]	; 0x58
 800656e:	415b      	adcs	r3, r3
 8006570:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006572:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006576:	4621      	mov	r1, r4
 8006578:	eb12 0801 	adds.w	r8, r2, r1
 800657c:	4629      	mov	r1, r5
 800657e:	eb43 0901 	adc.w	r9, r3, r1
 8006582:	f04f 0200 	mov.w	r2, #0
 8006586:	f04f 0300 	mov.w	r3, #0
 800658a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800658e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006592:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006596:	4690      	mov	r8, r2
 8006598:	4699      	mov	r9, r3
 800659a:	4623      	mov	r3, r4
 800659c:	eb18 0303 	adds.w	r3, r8, r3
 80065a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065a4:	462b      	mov	r3, r5
 80065a6:	eb49 0303 	adc.w	r3, r9, r3
 80065aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80065ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80065ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80065be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80065c2:	460b      	mov	r3, r1
 80065c4:	18db      	adds	r3, r3, r3
 80065c6:	653b      	str	r3, [r7, #80]	; 0x50
 80065c8:	4613      	mov	r3, r2
 80065ca:	eb42 0303 	adc.w	r3, r2, r3
 80065ce:	657b      	str	r3, [r7, #84]	; 0x54
 80065d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80065d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80065d8:	f7fa fac4 	bl	8000b64 <__aeabi_uldivmod>
 80065dc:	4602      	mov	r2, r0
 80065de:	460b      	mov	r3, r1
 80065e0:	4b61      	ldr	r3, [pc, #388]	; (8006768 <UART_SetConfig+0x2d4>)
 80065e2:	fba3 2302 	umull	r2, r3, r3, r2
 80065e6:	095b      	lsrs	r3, r3, #5
 80065e8:	011c      	lsls	r4, r3, #4
 80065ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065ee:	2200      	movs	r2, #0
 80065f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80065f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80065fc:	4642      	mov	r2, r8
 80065fe:	464b      	mov	r3, r9
 8006600:	1891      	adds	r1, r2, r2
 8006602:	64b9      	str	r1, [r7, #72]	; 0x48
 8006604:	415b      	adcs	r3, r3
 8006606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006608:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800660c:	4641      	mov	r1, r8
 800660e:	eb12 0a01 	adds.w	sl, r2, r1
 8006612:	4649      	mov	r1, r9
 8006614:	eb43 0b01 	adc.w	fp, r3, r1
 8006618:	f04f 0200 	mov.w	r2, #0
 800661c:	f04f 0300 	mov.w	r3, #0
 8006620:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006624:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006628:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800662c:	4692      	mov	sl, r2
 800662e:	469b      	mov	fp, r3
 8006630:	4643      	mov	r3, r8
 8006632:	eb1a 0303 	adds.w	r3, sl, r3
 8006636:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800663a:	464b      	mov	r3, r9
 800663c:	eb4b 0303 	adc.w	r3, fp, r3
 8006640:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006650:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006654:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006658:	460b      	mov	r3, r1
 800665a:	18db      	adds	r3, r3, r3
 800665c:	643b      	str	r3, [r7, #64]	; 0x40
 800665e:	4613      	mov	r3, r2
 8006660:	eb42 0303 	adc.w	r3, r2, r3
 8006664:	647b      	str	r3, [r7, #68]	; 0x44
 8006666:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800666a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800666e:	f7fa fa79 	bl	8000b64 <__aeabi_uldivmod>
 8006672:	4602      	mov	r2, r0
 8006674:	460b      	mov	r3, r1
 8006676:	4611      	mov	r1, r2
 8006678:	4b3b      	ldr	r3, [pc, #236]	; (8006768 <UART_SetConfig+0x2d4>)
 800667a:	fba3 2301 	umull	r2, r3, r3, r1
 800667e:	095b      	lsrs	r3, r3, #5
 8006680:	2264      	movs	r2, #100	; 0x64
 8006682:	fb02 f303 	mul.w	r3, r2, r3
 8006686:	1acb      	subs	r3, r1, r3
 8006688:	00db      	lsls	r3, r3, #3
 800668a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800668e:	4b36      	ldr	r3, [pc, #216]	; (8006768 <UART_SetConfig+0x2d4>)
 8006690:	fba3 2302 	umull	r2, r3, r3, r2
 8006694:	095b      	lsrs	r3, r3, #5
 8006696:	005b      	lsls	r3, r3, #1
 8006698:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800669c:	441c      	add	r4, r3
 800669e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066a2:	2200      	movs	r2, #0
 80066a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80066ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80066b0:	4642      	mov	r2, r8
 80066b2:	464b      	mov	r3, r9
 80066b4:	1891      	adds	r1, r2, r2
 80066b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80066b8:	415b      	adcs	r3, r3
 80066ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80066c0:	4641      	mov	r1, r8
 80066c2:	1851      	adds	r1, r2, r1
 80066c4:	6339      	str	r1, [r7, #48]	; 0x30
 80066c6:	4649      	mov	r1, r9
 80066c8:	414b      	adcs	r3, r1
 80066ca:	637b      	str	r3, [r7, #52]	; 0x34
 80066cc:	f04f 0200 	mov.w	r2, #0
 80066d0:	f04f 0300 	mov.w	r3, #0
 80066d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80066d8:	4659      	mov	r1, fp
 80066da:	00cb      	lsls	r3, r1, #3
 80066dc:	4651      	mov	r1, sl
 80066de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066e2:	4651      	mov	r1, sl
 80066e4:	00ca      	lsls	r2, r1, #3
 80066e6:	4610      	mov	r0, r2
 80066e8:	4619      	mov	r1, r3
 80066ea:	4603      	mov	r3, r0
 80066ec:	4642      	mov	r2, r8
 80066ee:	189b      	adds	r3, r3, r2
 80066f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066f4:	464b      	mov	r3, r9
 80066f6:	460a      	mov	r2, r1
 80066f8:	eb42 0303 	adc.w	r3, r2, r3
 80066fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800670c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006710:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006714:	460b      	mov	r3, r1
 8006716:	18db      	adds	r3, r3, r3
 8006718:	62bb      	str	r3, [r7, #40]	; 0x28
 800671a:	4613      	mov	r3, r2
 800671c:	eb42 0303 	adc.w	r3, r2, r3
 8006720:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006722:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006726:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800672a:	f7fa fa1b 	bl	8000b64 <__aeabi_uldivmod>
 800672e:	4602      	mov	r2, r0
 8006730:	460b      	mov	r3, r1
 8006732:	4b0d      	ldr	r3, [pc, #52]	; (8006768 <UART_SetConfig+0x2d4>)
 8006734:	fba3 1302 	umull	r1, r3, r3, r2
 8006738:	095b      	lsrs	r3, r3, #5
 800673a:	2164      	movs	r1, #100	; 0x64
 800673c:	fb01 f303 	mul.w	r3, r1, r3
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	00db      	lsls	r3, r3, #3
 8006744:	3332      	adds	r3, #50	; 0x32
 8006746:	4a08      	ldr	r2, [pc, #32]	; (8006768 <UART_SetConfig+0x2d4>)
 8006748:	fba2 2303 	umull	r2, r3, r2, r3
 800674c:	095b      	lsrs	r3, r3, #5
 800674e:	f003 0207 	and.w	r2, r3, #7
 8006752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4422      	add	r2, r4
 800675a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800675c:	e106      	b.n	800696c <UART_SetConfig+0x4d8>
 800675e:	bf00      	nop
 8006760:	40011000 	.word	0x40011000
 8006764:	40011400 	.word	0x40011400
 8006768:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800676c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006770:	2200      	movs	r2, #0
 8006772:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006776:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800677a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800677e:	4642      	mov	r2, r8
 8006780:	464b      	mov	r3, r9
 8006782:	1891      	adds	r1, r2, r2
 8006784:	6239      	str	r1, [r7, #32]
 8006786:	415b      	adcs	r3, r3
 8006788:	627b      	str	r3, [r7, #36]	; 0x24
 800678a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800678e:	4641      	mov	r1, r8
 8006790:	1854      	adds	r4, r2, r1
 8006792:	4649      	mov	r1, r9
 8006794:	eb43 0501 	adc.w	r5, r3, r1
 8006798:	f04f 0200 	mov.w	r2, #0
 800679c:	f04f 0300 	mov.w	r3, #0
 80067a0:	00eb      	lsls	r3, r5, #3
 80067a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067a6:	00e2      	lsls	r2, r4, #3
 80067a8:	4614      	mov	r4, r2
 80067aa:	461d      	mov	r5, r3
 80067ac:	4643      	mov	r3, r8
 80067ae:	18e3      	adds	r3, r4, r3
 80067b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80067b4:	464b      	mov	r3, r9
 80067b6:	eb45 0303 	adc.w	r3, r5, r3
 80067ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80067be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80067ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80067ce:	f04f 0200 	mov.w	r2, #0
 80067d2:	f04f 0300 	mov.w	r3, #0
 80067d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80067da:	4629      	mov	r1, r5
 80067dc:	008b      	lsls	r3, r1, #2
 80067de:	4621      	mov	r1, r4
 80067e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067e4:	4621      	mov	r1, r4
 80067e6:	008a      	lsls	r2, r1, #2
 80067e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80067ec:	f7fa f9ba 	bl	8000b64 <__aeabi_uldivmod>
 80067f0:	4602      	mov	r2, r0
 80067f2:	460b      	mov	r3, r1
 80067f4:	4b60      	ldr	r3, [pc, #384]	; (8006978 <UART_SetConfig+0x4e4>)
 80067f6:	fba3 2302 	umull	r2, r3, r3, r2
 80067fa:	095b      	lsrs	r3, r3, #5
 80067fc:	011c      	lsls	r4, r3, #4
 80067fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006802:	2200      	movs	r2, #0
 8006804:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006808:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800680c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006810:	4642      	mov	r2, r8
 8006812:	464b      	mov	r3, r9
 8006814:	1891      	adds	r1, r2, r2
 8006816:	61b9      	str	r1, [r7, #24]
 8006818:	415b      	adcs	r3, r3
 800681a:	61fb      	str	r3, [r7, #28]
 800681c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006820:	4641      	mov	r1, r8
 8006822:	1851      	adds	r1, r2, r1
 8006824:	6139      	str	r1, [r7, #16]
 8006826:	4649      	mov	r1, r9
 8006828:	414b      	adcs	r3, r1
 800682a:	617b      	str	r3, [r7, #20]
 800682c:	f04f 0200 	mov.w	r2, #0
 8006830:	f04f 0300 	mov.w	r3, #0
 8006834:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006838:	4659      	mov	r1, fp
 800683a:	00cb      	lsls	r3, r1, #3
 800683c:	4651      	mov	r1, sl
 800683e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006842:	4651      	mov	r1, sl
 8006844:	00ca      	lsls	r2, r1, #3
 8006846:	4610      	mov	r0, r2
 8006848:	4619      	mov	r1, r3
 800684a:	4603      	mov	r3, r0
 800684c:	4642      	mov	r2, r8
 800684e:	189b      	adds	r3, r3, r2
 8006850:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006854:	464b      	mov	r3, r9
 8006856:	460a      	mov	r2, r1
 8006858:	eb42 0303 	adc.w	r3, r2, r3
 800685c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	67bb      	str	r3, [r7, #120]	; 0x78
 800686a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800686c:	f04f 0200 	mov.w	r2, #0
 8006870:	f04f 0300 	mov.w	r3, #0
 8006874:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006878:	4649      	mov	r1, r9
 800687a:	008b      	lsls	r3, r1, #2
 800687c:	4641      	mov	r1, r8
 800687e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006882:	4641      	mov	r1, r8
 8006884:	008a      	lsls	r2, r1, #2
 8006886:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800688a:	f7fa f96b 	bl	8000b64 <__aeabi_uldivmod>
 800688e:	4602      	mov	r2, r0
 8006890:	460b      	mov	r3, r1
 8006892:	4611      	mov	r1, r2
 8006894:	4b38      	ldr	r3, [pc, #224]	; (8006978 <UART_SetConfig+0x4e4>)
 8006896:	fba3 2301 	umull	r2, r3, r3, r1
 800689a:	095b      	lsrs	r3, r3, #5
 800689c:	2264      	movs	r2, #100	; 0x64
 800689e:	fb02 f303 	mul.w	r3, r2, r3
 80068a2:	1acb      	subs	r3, r1, r3
 80068a4:	011b      	lsls	r3, r3, #4
 80068a6:	3332      	adds	r3, #50	; 0x32
 80068a8:	4a33      	ldr	r2, [pc, #204]	; (8006978 <UART_SetConfig+0x4e4>)
 80068aa:	fba2 2303 	umull	r2, r3, r2, r3
 80068ae:	095b      	lsrs	r3, r3, #5
 80068b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068b4:	441c      	add	r4, r3
 80068b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068ba:	2200      	movs	r2, #0
 80068bc:	673b      	str	r3, [r7, #112]	; 0x70
 80068be:	677a      	str	r2, [r7, #116]	; 0x74
 80068c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80068c4:	4642      	mov	r2, r8
 80068c6:	464b      	mov	r3, r9
 80068c8:	1891      	adds	r1, r2, r2
 80068ca:	60b9      	str	r1, [r7, #8]
 80068cc:	415b      	adcs	r3, r3
 80068ce:	60fb      	str	r3, [r7, #12]
 80068d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068d4:	4641      	mov	r1, r8
 80068d6:	1851      	adds	r1, r2, r1
 80068d8:	6039      	str	r1, [r7, #0]
 80068da:	4649      	mov	r1, r9
 80068dc:	414b      	adcs	r3, r1
 80068de:	607b      	str	r3, [r7, #4]
 80068e0:	f04f 0200 	mov.w	r2, #0
 80068e4:	f04f 0300 	mov.w	r3, #0
 80068e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80068ec:	4659      	mov	r1, fp
 80068ee:	00cb      	lsls	r3, r1, #3
 80068f0:	4651      	mov	r1, sl
 80068f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068f6:	4651      	mov	r1, sl
 80068f8:	00ca      	lsls	r2, r1, #3
 80068fa:	4610      	mov	r0, r2
 80068fc:	4619      	mov	r1, r3
 80068fe:	4603      	mov	r3, r0
 8006900:	4642      	mov	r2, r8
 8006902:	189b      	adds	r3, r3, r2
 8006904:	66bb      	str	r3, [r7, #104]	; 0x68
 8006906:	464b      	mov	r3, r9
 8006908:	460a      	mov	r2, r1
 800690a:	eb42 0303 	adc.w	r3, r2, r3
 800690e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	663b      	str	r3, [r7, #96]	; 0x60
 800691a:	667a      	str	r2, [r7, #100]	; 0x64
 800691c:	f04f 0200 	mov.w	r2, #0
 8006920:	f04f 0300 	mov.w	r3, #0
 8006924:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006928:	4649      	mov	r1, r9
 800692a:	008b      	lsls	r3, r1, #2
 800692c:	4641      	mov	r1, r8
 800692e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006932:	4641      	mov	r1, r8
 8006934:	008a      	lsls	r2, r1, #2
 8006936:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800693a:	f7fa f913 	bl	8000b64 <__aeabi_uldivmod>
 800693e:	4602      	mov	r2, r0
 8006940:	460b      	mov	r3, r1
 8006942:	4b0d      	ldr	r3, [pc, #52]	; (8006978 <UART_SetConfig+0x4e4>)
 8006944:	fba3 1302 	umull	r1, r3, r3, r2
 8006948:	095b      	lsrs	r3, r3, #5
 800694a:	2164      	movs	r1, #100	; 0x64
 800694c:	fb01 f303 	mul.w	r3, r1, r3
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	011b      	lsls	r3, r3, #4
 8006954:	3332      	adds	r3, #50	; 0x32
 8006956:	4a08      	ldr	r2, [pc, #32]	; (8006978 <UART_SetConfig+0x4e4>)
 8006958:	fba2 2303 	umull	r2, r3, r2, r3
 800695c:	095b      	lsrs	r3, r3, #5
 800695e:	f003 020f 	and.w	r2, r3, #15
 8006962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4422      	add	r2, r4
 800696a:	609a      	str	r2, [r3, #8]
}
 800696c:	bf00      	nop
 800696e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006972:	46bd      	mov	sp, r7
 8006974:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006978:	51eb851f 	.word	0x51eb851f

0800697c <memset>:
 800697c:	4402      	add	r2, r0
 800697e:	4603      	mov	r3, r0
 8006980:	4293      	cmp	r3, r2
 8006982:	d100      	bne.n	8006986 <memset+0xa>
 8006984:	4770      	bx	lr
 8006986:	f803 1b01 	strb.w	r1, [r3], #1
 800698a:	e7f9      	b.n	8006980 <memset+0x4>

0800698c <__libc_init_array>:
 800698c:	b570      	push	{r4, r5, r6, lr}
 800698e:	4d0d      	ldr	r5, [pc, #52]	; (80069c4 <__libc_init_array+0x38>)
 8006990:	4c0d      	ldr	r4, [pc, #52]	; (80069c8 <__libc_init_array+0x3c>)
 8006992:	1b64      	subs	r4, r4, r5
 8006994:	10a4      	asrs	r4, r4, #2
 8006996:	2600      	movs	r6, #0
 8006998:	42a6      	cmp	r6, r4
 800699a:	d109      	bne.n	80069b0 <__libc_init_array+0x24>
 800699c:	4d0b      	ldr	r5, [pc, #44]	; (80069cc <__libc_init_array+0x40>)
 800699e:	4c0c      	ldr	r4, [pc, #48]	; (80069d0 <__libc_init_array+0x44>)
 80069a0:	f000 f89a 	bl	8006ad8 <_init>
 80069a4:	1b64      	subs	r4, r4, r5
 80069a6:	10a4      	asrs	r4, r4, #2
 80069a8:	2600      	movs	r6, #0
 80069aa:	42a6      	cmp	r6, r4
 80069ac:	d105      	bne.n	80069ba <__libc_init_array+0x2e>
 80069ae:	bd70      	pop	{r4, r5, r6, pc}
 80069b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80069b4:	4798      	blx	r3
 80069b6:	3601      	adds	r6, #1
 80069b8:	e7ee      	b.n	8006998 <__libc_init_array+0xc>
 80069ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80069be:	4798      	blx	r3
 80069c0:	3601      	adds	r6, #1
 80069c2:	e7f2      	b.n	80069aa <__libc_init_array+0x1e>
 80069c4:	08006b10 	.word	0x08006b10
 80069c8:	08006b10 	.word	0x08006b10
 80069cc:	08006b10 	.word	0x08006b10
 80069d0:	08006b14 	.word	0x08006b14
 80069d4:	00000000 	.word	0x00000000

080069d8 <floor>:
 80069d8:	ec51 0b10 	vmov	r0, r1, d0
 80069dc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80069e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069e4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80069e8:	2e13      	cmp	r6, #19
 80069ea:	ee10 5a10 	vmov	r5, s0
 80069ee:	ee10 8a10 	vmov	r8, s0
 80069f2:	460c      	mov	r4, r1
 80069f4:	dc31      	bgt.n	8006a5a <floor+0x82>
 80069f6:	2e00      	cmp	r6, #0
 80069f8:	da14      	bge.n	8006a24 <floor+0x4c>
 80069fa:	a333      	add	r3, pc, #204	; (adr r3, 8006ac8 <floor+0xf0>)
 80069fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a00:	f7f9 fbf0 	bl	80001e4 <__adddf3>
 8006a04:	2200      	movs	r2, #0
 8006a06:	2300      	movs	r3, #0
 8006a08:	f7fa f832 	bl	8000a70 <__aeabi_dcmpgt>
 8006a0c:	b138      	cbz	r0, 8006a1e <floor+0x46>
 8006a0e:	2c00      	cmp	r4, #0
 8006a10:	da53      	bge.n	8006aba <floor+0xe2>
 8006a12:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8006a16:	4325      	orrs	r5, r4
 8006a18:	d052      	beq.n	8006ac0 <floor+0xe8>
 8006a1a:	4c2d      	ldr	r4, [pc, #180]	; (8006ad0 <floor+0xf8>)
 8006a1c:	2500      	movs	r5, #0
 8006a1e:	4621      	mov	r1, r4
 8006a20:	4628      	mov	r0, r5
 8006a22:	e024      	b.n	8006a6e <floor+0x96>
 8006a24:	4f2b      	ldr	r7, [pc, #172]	; (8006ad4 <floor+0xfc>)
 8006a26:	4137      	asrs	r7, r6
 8006a28:	ea01 0307 	and.w	r3, r1, r7
 8006a2c:	4303      	orrs	r3, r0
 8006a2e:	d01e      	beq.n	8006a6e <floor+0x96>
 8006a30:	a325      	add	r3, pc, #148	; (adr r3, 8006ac8 <floor+0xf0>)
 8006a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a36:	f7f9 fbd5 	bl	80001e4 <__adddf3>
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	f7fa f817 	bl	8000a70 <__aeabi_dcmpgt>
 8006a42:	2800      	cmp	r0, #0
 8006a44:	d0eb      	beq.n	8006a1e <floor+0x46>
 8006a46:	2c00      	cmp	r4, #0
 8006a48:	bfbe      	ittt	lt
 8006a4a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006a4e:	4133      	asrlt	r3, r6
 8006a50:	18e4      	addlt	r4, r4, r3
 8006a52:	ea24 0407 	bic.w	r4, r4, r7
 8006a56:	2500      	movs	r5, #0
 8006a58:	e7e1      	b.n	8006a1e <floor+0x46>
 8006a5a:	2e33      	cmp	r6, #51	; 0x33
 8006a5c:	dd0b      	ble.n	8006a76 <floor+0x9e>
 8006a5e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006a62:	d104      	bne.n	8006a6e <floor+0x96>
 8006a64:	ee10 2a10 	vmov	r2, s0
 8006a68:	460b      	mov	r3, r1
 8006a6a:	f7f9 fbbb 	bl	80001e4 <__adddf3>
 8006a6e:	ec41 0b10 	vmov	d0, r0, r1
 8006a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a76:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8006a7a:	f04f 37ff 	mov.w	r7, #4294967295
 8006a7e:	40df      	lsrs	r7, r3
 8006a80:	4238      	tst	r0, r7
 8006a82:	d0f4      	beq.n	8006a6e <floor+0x96>
 8006a84:	a310      	add	r3, pc, #64	; (adr r3, 8006ac8 <floor+0xf0>)
 8006a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8a:	f7f9 fbab 	bl	80001e4 <__adddf3>
 8006a8e:	2200      	movs	r2, #0
 8006a90:	2300      	movs	r3, #0
 8006a92:	f7f9 ffed 	bl	8000a70 <__aeabi_dcmpgt>
 8006a96:	2800      	cmp	r0, #0
 8006a98:	d0c1      	beq.n	8006a1e <floor+0x46>
 8006a9a:	2c00      	cmp	r4, #0
 8006a9c:	da0a      	bge.n	8006ab4 <floor+0xdc>
 8006a9e:	2e14      	cmp	r6, #20
 8006aa0:	d101      	bne.n	8006aa6 <floor+0xce>
 8006aa2:	3401      	adds	r4, #1
 8006aa4:	e006      	b.n	8006ab4 <floor+0xdc>
 8006aa6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006aaa:	2301      	movs	r3, #1
 8006aac:	40b3      	lsls	r3, r6
 8006aae:	441d      	add	r5, r3
 8006ab0:	45a8      	cmp	r8, r5
 8006ab2:	d8f6      	bhi.n	8006aa2 <floor+0xca>
 8006ab4:	ea25 0507 	bic.w	r5, r5, r7
 8006ab8:	e7b1      	b.n	8006a1e <floor+0x46>
 8006aba:	2500      	movs	r5, #0
 8006abc:	462c      	mov	r4, r5
 8006abe:	e7ae      	b.n	8006a1e <floor+0x46>
 8006ac0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006ac4:	e7ab      	b.n	8006a1e <floor+0x46>
 8006ac6:	bf00      	nop
 8006ac8:	8800759c 	.word	0x8800759c
 8006acc:	7e37e43c 	.word	0x7e37e43c
 8006ad0:	bff00000 	.word	0xbff00000
 8006ad4:	000fffff 	.word	0x000fffff

08006ad8 <_init>:
 8006ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ada:	bf00      	nop
 8006adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ade:	bc08      	pop	{r3}
 8006ae0:	469e      	mov	lr, r3
 8006ae2:	4770      	bx	lr

08006ae4 <_fini>:
 8006ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ae6:	bf00      	nop
 8006ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aea:	bc08      	pop	{r3}
 8006aec:	469e      	mov	lr, r3
 8006aee:	4770      	bx	lr
